
soma_stm32_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001500  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001654  08001654  00020804  2**0
                  CONTENTS
  4 .ARM          00000000  08001654  08001654  00020804  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001654  08001654  00020804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001654  08001654  00011654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001658  08001658  00011658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000804  20000000  0800165c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f0  20000804  08001e60  00020804  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  08001e60  000210f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020804  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008984  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d49  00000000  00000000  000291b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00004a07  00000000  00000000  0002aef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000318  00000000  00000000  0002f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c0  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f5da  00000000  00000000  00030ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b17  00000000  00000000  000404b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00050a61  00000000  00000000  00047fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00098a2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006b4  00000000  00000000  00098a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000804 	.word	0x20000804
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080015a8 	.word	0x080015a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000808 	.word	0x20000808
 8000104:	080015a8 	.word	0x080015a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800025c:	b510      	push	{r4, lr}
 800025e:	b08a      	sub	sp, #40	; 0x28

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	2214      	movs	r2, #20
 8000262:	2100      	movs	r1, #0
 8000264:	a805      	add	r0, sp, #20
 8000266:	f001 f996 	bl	8001596 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800026a:	2220      	movs	r2, #32
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_GPIO_Init+0x74>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800026e:	4c19      	ldr	r4, [pc, #100]	; (80002d4 <MX_GPIO_Init+0x78>)
 8000270:	6b59      	ldr	r1, [r3, #52]	; 0x34

  /**/
  GPIO_InitStruct.Pin = nRST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8000272:	4819      	ldr	r0, [pc, #100]	; (80002d8 <MX_GPIO_Init+0x7c>)
 8000274:	4311      	orrs	r1, r2
 8000276:	6359      	str	r1, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800027a:	400a      	ands	r2, r1
 800027c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800027e:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->IOPENR, Periphs);
 8000280:	2201      	movs	r2, #1
 8000282:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000284:	4311      	orrs	r1, r2
 8000286:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800028a:	400a      	ands	r2, r1
 800028c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800028e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8000290:	2202      	movs	r2, #2
 8000292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000294:	4311      	orrs	r1, r2
 8000296:	6359      	str	r1, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800029a:	a904      	add	r1, sp, #16
 800029c:	401a      	ands	r2, r3
 800029e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	2340      	movs	r3, #64	; 0x40
 80002a4:	62a3      	str	r3, [r4, #40]	; 0x28
  GPIO_InitStruct.Pin = nRST_Pin;
 80002a6:	3b3c      	subs	r3, #60	; 0x3c
 80002a8:	9304      	str	r3, [sp, #16]
  LL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 80002aa:	f000 fe23 	bl	8000ef4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80002ae:	2240      	movs	r2, #64	; 0x40
 80002b0:	2301      	movs	r3, #1
 80002b2:	9204      	str	r2, [sp, #16]
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	2203      	movs	r2, #3
 80002b8:	2300      	movs	r3, #0
 80002ba:	9206      	str	r2, [sp, #24]
 80002bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002be:	2300      	movs	r3, #0
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002c0:	0020      	movs	r0, r4
 80002c2:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002c4:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002c6:	f000 fe15 	bl	8000ef4 <LL_GPIO_Init>

}
 80002ca:	b00a      	add	sp, #40	; 0x28
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	40021000 	.word	0x40021000
 80002d4:	50000400 	.word	0x50000400
 80002d8:	50001400 	.word	0x50001400

080002dc <uartsendcmd>:
   return iret;
}

 
void uartsendcmd(uint8_t *scmd, uint32_t ilen)
{
 80002dc:	2396      	movs	r3, #150	; 0x96
 80002de:	b510      	push	{r4, lr}
 80002e0:	000c      	movs	r4, r1
 80002e2:	005b      	lsls	r3, r3, #1
      __NOP(); 
 80002e4:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 80002e6:	3b01      	subs	r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d1fb      	bne.n	80002e4 <uartsendcmd+0x8>
   //switch to tx 
   delay_nop(WAIT2TE_MASTER);  
   switch2send(USART1); 
 80002ec:	2104      	movs	r1, #4
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <uartsendcmd+0x5c>)
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	438b      	bics	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
 80002f6:	6813      	ldr	r3, [r2, #0]
 80002f8:	3104      	adds	r1, #4
 80002fa:	430b      	orrs	r3, r1
 80002fc:	6013      	str	r3, [r2, #0]
   while(ilen--)
 80002fe:	2c00      	cmp	r4, #0
 8000300:	d009      	beq.n	8000316 <uartsendcmd+0x3a>
 8000302:	1904      	adds	r4, r0, r4
   while( (USART1-> ISR & (1<<7) ) ==0 );
 8000304:	3178      	adds	r1, #120	; 0x78
   USART1->TDR = c;
 8000306:	7803      	ldrb	r3, [r0, #0]
 8000308:	6293      	str	r3, [r2, #40]	; 0x28
   while( (USART1-> ISR & (1<<7) ) ==0 );
 800030a:	69d3      	ldr	r3, [r2, #28]
 800030c:	4219      	tst	r1, r3
 800030e:	d0fc      	beq.n	800030a <uartsendcmd+0x2e>
   while(ilen--)
 8000310:	3001      	adds	r0, #1
 8000312:	42a0      	cmp	r0, r4
 8000314:	d1f7      	bne.n	8000306 <uartsendcmd+0x2a>
{
 8000316:	23a0      	movs	r3, #160	; 0xa0
 8000318:	005b      	lsls	r3, r3, #1
      __NOP(); 
 800031a:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 800031c:	3b01      	subs	r3, #1
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1fb      	bne.n	800031a <uartsendcmd+0x3e>
  
   iputbytes1(scmd,ilen);     

   //switch to rx
   delay_nop(WAIT2RE0_MASTER);    
   switch2read(USART1);   
 8000322:	2108      	movs	r1, #8
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <uartsendcmd+0x5c>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	438a      	bics	r2, r1
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	3904      	subs	r1, #4
 8000330:	430a      	orrs	r2, r1
 8000332:	601a      	str	r2, [r3, #0]
}   
 8000334:	bd10      	pop	{r4, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	40013800 	.word	0x40013800

0800033c <byte2uint32>:

uint32_t byte2uint32(uint8_t *strin, uint32_t *strout, uint32_t ilen)
{
 800033c:	4694      	mov	ip, r2
 800033e:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint32_t i = 0;
   uint32_t iret = 0;

   //get crc adder
   for ( i=0; i<(ilen/4); i++)
 8000340:	0892      	lsrs	r2, r2, #2
 8000342:	d011      	beq.n	8000368 <byte2uint32+0x2c>
 8000344:	0004      	movs	r4, r0
 8000346:	000e      	movs	r6, r1
 8000348:	0097      	lsls	r7, r2, #2
 800034a:	183f      	adds	r7, r7, r0
   {
      strout[i] = (uint32_t)((strin[4*i] << 24) | (strin[4*i+1] << 16) | (strin[4*i+ 2] << 8) | strin[4*i+3]);
 800034c:	7823      	ldrb	r3, [r4, #0]
 800034e:	7865      	ldrb	r5, [r4, #1]
 8000350:	061b      	lsls	r3, r3, #24
 8000352:	042d      	lsls	r5, r5, #16
 8000354:	432b      	orrs	r3, r5
 8000356:	78e5      	ldrb	r5, [r4, #3]
 8000358:	432b      	orrs	r3, r5
 800035a:	78a5      	ldrb	r5, [r4, #2]
   for ( i=0; i<(ilen/4); i++)
 800035c:	3404      	adds	r4, #4
      strout[i] = (uint32_t)((strin[4*i] << 24) | (strin[4*i+1] << 16) | (strin[4*i+ 2] << 8) | strin[4*i+3]);
 800035e:	022d      	lsls	r5, r5, #8
 8000360:	432b      	orrs	r3, r5
 8000362:	c608      	stmia	r6!, {r3}
   for ( i=0; i<(ilen/4); i++)
 8000364:	42bc      	cmp	r4, r7
 8000366:	d1f1      	bne.n	800034c <byte2uint32+0x10>
   }

   //last word
   if ( (ilen%4) == 3)
 8000368:	2303      	movs	r3, #3
 800036a:	4664      	mov	r4, ip
 800036c:	4023      	ands	r3, r4
 800036e:	2b03      	cmp	r3, #3
 8000370:	d013      	beq.n	800039a <byte2uint32+0x5e>
      strout[i] = (uint32_t)((strin[4*i] << 24) | (strin[4*i+1] << 16) | (strin[4*i+ 2] << 8) );
   if ( (ilen%4) == 2) 
 8000372:	2b02      	cmp	r3, #2
 8000374:	d10a      	bne.n	800038c <byte2uint32+0x50>
      strout[i] = (uint32_t)((strin[4*i] << 24) | (strin[4*i+1] << 16) );
 8000376:	0094      	lsls	r4, r2, #2
 8000378:	1903      	adds	r3, r0, r4
 800037a:	785b      	ldrb	r3, [r3, #1]
 800037c:	5d00      	ldrb	r0, [r0, r4]
 800037e:	041b      	lsls	r3, r3, #16
 8000380:	0600      	lsls	r0, r0, #24
 8000382:	4303      	orrs	r3, r0
 8000384:	510b      	str	r3, [r1, r4]
   
   //get crc len
   if( (ilen%4) ==0)
      iret =  ilen/4;
   else
      iret = ilen/4 +1;
 8000386:	3201      	adds	r2, #1
   
   return iret;
}
 8000388:	0010      	movs	r0, r2
 800038a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   if ( (ilen%4) == 1)
 800038c:	2b01      	cmp	r3, #1
 800038e:	d1fb      	bne.n	8000388 <byte2uint32+0x4c>
      strout[i] = (uint32_t)((strin[4*i] << 24) );   
 8000390:	0094      	lsls	r4, r2, #2
 8000392:	5d03      	ldrb	r3, [r0, r4]
 8000394:	061b      	lsls	r3, r3, #24
 8000396:	510b      	str	r3, [r1, r4]
   if( (ilen%4) ==0)
 8000398:	e7f5      	b.n	8000386 <byte2uint32+0x4a>
      strout[i] = (uint32_t)((strin[4*i] << 24) | (strin[4*i+1] << 16) | (strin[4*i+ 2] << 8) );
 800039a:	0094      	lsls	r4, r2, #2
 800039c:	1905      	adds	r5, r0, r4
 800039e:	786b      	ldrb	r3, [r5, #1]
 80003a0:	78ad      	ldrb	r5, [r5, #2]
 80003a2:	5d00      	ldrb	r0, [r0, r4]
 80003a4:	041b      	lsls	r3, r3, #16
 80003a6:	022d      	lsls	r5, r5, #8
 80003a8:	432b      	orrs	r3, r5
 80003aa:	0600      	lsls	r0, r0, #24
 80003ac:	4303      	orrs	r3, r0
 80003ae:	510b      	str	r3, [r1, r4]
   if( (ilen%4) ==0)
 80003b0:	e7e9      	b.n	8000386 <byte2uint32+0x4a>
 80003b2:	46c0      	nop			; (mov r8, r8)

080003b4 <dowithuart>:
   
   return (icrc_out);
}

void dowithuart(void)
{           
 80003b4:	2396      	movs	r3, #150	; 0x96
 80003b6:	005b      	lsls	r3, r3, #1
      __NOP(); 
 80003b8:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 80003ba:	3b01      	subs	r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d1fb      	bne.n	80003b8 <dowithuart+0x4>
   //switch to tx
   delay_nop(WAIT2TE_MASTER);     //300  10  
   switch2send(USART1);   
 80003c0:	2004      	movs	r0, #4
 80003c2:	4a26      	ldr	r2, [pc, #152]	; (800045c <dowithuart+0xa8>)
 80003c4:	6811      	ldr	r1, [r2, #0]
 80003c6:	4381      	bics	r1, r0
 80003c8:	6011      	str	r1, [r2, #0]
 80003ca:	6811      	ldr	r1, [r2, #0]
 80003cc:	3004      	adds	r0, #4
 80003ce:	4301      	orrs	r1, r0
 80003d0:	6011      	str	r1, [r2, #0]
         
   //iputs1("rx...\r\n");
   
   switch (irxdata2[3])   //command
 80003d2:	4a23      	ldr	r2, [pc, #140]	; (8000460 <dowithuart+0xac>)
 80003d4:	78d1      	ldrb	r1, [r2, #3]
 80003d6:	b2ca      	uxtb	r2, r1
 80003d8:	29d3      	cmp	r1, #211	; 0xd3
 80003da:	d034      	beq.n	8000446 <dowithuart+0x92>
 80003dc:	2ad3      	cmp	r2, #211	; 0xd3
 80003de:	d81a      	bhi.n	8000416 <dowithuart+0x62>
 80003e0:	2ad1      	cmp	r2, #209	; 0xd1
 80003e2:	d026      	beq.n	8000432 <dowithuart+0x7e>
 80003e4:	2ad2      	cmp	r2, #210	; 0xd2
 80003e6:	d106      	bne.n	80003f6 <dowithuart+0x42>
            
            break;
   
      case 0xD2:    
      
            if(flg_lastpackage==0)
 80003e8:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <dowithuart+0xb0>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d130      	bne.n	8000452 <dowithuart+0x9e>
               flg_sendtype=2;
 80003f0:	2202      	movs	r2, #2
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <dowithuart+0xb4>)
 80003f4:	701a      	strb	r2, [r3, #0]
{           
 80003f6:	23a0      	movs	r3, #160	; 0xa0
 80003f8:	005b      	lsls	r3, r3, #1
      __NOP(); 
 80003fa:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 80003fc:	3b01      	subs	r3, #1
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d1fb      	bne.n	80003fa <dowithuart+0x46>

   }
   
   //switch to rx
   delay_nop(WAIT2RE_MASTER);  
   switch2read(USART1);  
 8000402:	2108      	movs	r1, #8
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <dowithuart+0xa8>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	438a      	bics	r2, r1
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	3904      	subs	r1, #4
 8000410:	430a      	orrs	r2, r1
 8000412:	601a      	str	r2, [r3, #0]
}
 8000414:	4770      	bx	lr
   switch (irxdata2[3])   //command
 8000416:	2ae3      	cmp	r2, #227	; 0xe3
 8000418:	d1ed      	bne.n	80003f6 <dowithuart+0x42>
               flg_sendtype=1;
 800041a:	2101      	movs	r1, #1
 800041c:	4a12      	ldr	r2, [pc, #72]	; (8000468 <dowithuart+0xb4>)
 800041e:	7011      	strb	r1, [r2, #0]
               iflashstep=0;
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <dowithuart+0xb8>)
 8000422:	7013      	strb	r3, [r2, #0]
               iwaitrespcount=0;     
 8000424:	4a12      	ldr	r2, [pc, #72]	; (8000470 <dowithuart+0xbc>)
 8000426:	6013      	str	r3, [r2, #0]
               flg_repeat=0;  
 8000428:	4a12      	ldr	r2, [pc, #72]	; (8000474 <dowithuart+0xc0>)
 800042a:	7013      	strb	r3, [r2, #0]
               flg_lastpackage=0;
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <dowithuart+0xb0>)
 800042e:	7013      	strb	r3, [r2, #0]
               break;
 8000430:	e7e1      	b.n	80003f6 <dowithuart+0x42>
            flg_sendtype=2;
 8000432:	2102      	movs	r1, #2
 8000434:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <dowithuart+0xb4>)
 8000436:	7011      	strb	r1, [r2, #0]
            irestlen=TOTAL_DATA_SIZE;
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <dowithuart+0xc4>)
 800043c:	0109      	lsls	r1, r1, #4
 800043e:	6011      	str	r1, [r2, #0]
            idataoff=0;
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <dowithuart+0xc8>)
 8000442:	6013      	str	r3, [r2, #0]
            break;
 8000444:	e7d7      	b.n	80003f6 <dowithuart+0x42>
               flg_sendtype=0;
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <dowithuart+0xb4>)
 8000448:	7013      	strb	r3, [r2, #0]
               iflashstep=6;       
 800044a:	2206      	movs	r2, #6
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <dowithuart+0xb8>)
 800044e:	701a      	strb	r2, [r3, #0]
            break;
 8000450:	e7d1      	b.n	80003f6 <dowithuart+0x42>
               flg_sendtype=3;
 8000452:	2203      	movs	r2, #3
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <dowithuart+0xb4>)
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e7cd      	b.n	80003f6 <dowithuart+0x42>
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	40013800 	.word	0x40013800
 8000460:	200010c4 	.word	0x200010c4
 8000464:	20000820 	.word	0x20000820
 8000468:	20000822 	.word	0x20000822
 800046c:	2000102c 	.word	0x2000102c
 8000470:	20001044 	.word	0x20001044
 8000474:	20000821 	.word	0x20000821
 8000478:	20001030 	.word	0x20001030
 800047c:	20001028 	.word	0x20001028

08000480 <checkresendcmd>:

void checkresendcmd(void)
{   
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4645      	mov	r5, r8
 8000484:	46de      	mov	lr, fp
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	b5e0      	push	{r5, r6, r7, lr}
   //------------ loop checking to send C1 ------------- 
   
   if(iflashstep==1)   
 800048c:	4dcf      	ldr	r5, [pc, #828]	; (80007cc <checkresendcmd+0x34c>)
{   
 800048e:	b083      	sub	sp, #12
   if(iflashstep==1)   
 8000490:	782b      	ldrb	r3, [r5, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d100      	bne.n	8000498 <checkresendcmd+0x18>
 8000496:	e0f2      	b.n	800067e <checkresendcmd+0x1fe>
         flg_repeat=1;
         flg_sendtype=1;            
      }         
   }
   
   if (flg_sendtype==1)       
 8000498:	4ccd      	ldr	r4, [pc, #820]	; (80007d0 <checkresendcmd+0x350>)
 800049a:	7822      	ldrb	r2, [r4, #0]
 800049c:	2a01      	cmp	r2, #1
 800049e:	d100      	bne.n	80004a2 <checkresendcmd+0x22>
 80004a0:	e189      	b.n	80007b6 <checkresendcmd+0x336>
   }
   
   
   //------------ loop checking to  send C2 ------------- 
   
   if(iflashstep==3)   
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d100      	bne.n	80004a8 <checkresendcmd+0x28>
 80004a6:	e084      	b.n	80005b2 <checkresendcmd+0x132>
         flg_repeat=1;
         flg_sendtype=2;   
      }         
   }      

   if (flg_sendtype==2)       
 80004a8:	7822      	ldrb	r2, [r4, #0]
 80004aa:	2a02      	cmp	r2, #2
 80004ac:	d100      	bne.n	80004b0 <checkresendcmd+0x30>
 80004ae:	e136      	b.n	800071e <checkresendcmd+0x29e>
      flg_repeat=0;         
   }
   
   //------------ loop checking to send C3 ------------- 
   
   if(iflashstep==5)   
 80004b0:	2b05      	cmp	r3, #5
 80004b2:	d00a      	beq.n	80004ca <checkresendcmd+0x4a>
         flg_sendtype=3;   
                     
      }         
   }        
   
   if (flg_sendtype==3)       
 80004b4:	7823      	ldrb	r3, [r4, #0]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d100      	bne.n	80004bc <checkresendcmd+0x3c>
 80004ba:	e180      	b.n	80007be <checkresendcmd+0x33e>

      mastercmd[9]=get_checksum_8(mastercmd,9); 
      uartsendcmd(mastercmd,10);
      
   }     
}      
 80004bc:	b003      	add	sp, #12
 80004be:	bcf0      	pop	{r4, r5, r6, r7}
 80004c0:	46bb      	mov	fp, r7
 80004c2:	46b2      	mov	sl, r6
 80004c4:	46a9      	mov	r9, r5
 80004c6:	46a0      	mov	r8, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(iwaitrespcount>=WAITREPEATTIME)
 80004ca:	23fa      	movs	r3, #250	; 0xfa
 80004cc:	4ac1      	ldr	r2, [pc, #772]	; (80007d4 <checkresendcmd+0x354>)
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	6811      	ldr	r1, [r2, #0]
 80004d2:	4299      	cmp	r1, r3
 80004d4:	d3ee      	bcc.n	80004b4 <checkresendcmd+0x34>
         flg_repeat=1;
 80004d6:	2101      	movs	r1, #1
 80004d8:	4bbf      	ldr	r3, [pc, #764]	; (80007d8 <checkresendcmd+0x358>)
 80004da:	7019      	strb	r1, [r3, #0]
      flg_sendtype=0;
 80004dc:	2300      	movs	r3, #0
      iflashstep=5;
 80004de:	2105      	movs	r1, #5
      flg_sendtype=0;
 80004e0:	7023      	strb	r3, [r4, #0]
      iwaitrespcount=0;
 80004e2:	6013      	str	r3, [r2, #0]
      icrclen=byte2uint32( (uint8_t *)FLASHTEMPDATA,icrctempdata,idataoff);   
 80004e4:	4cbd      	ldr	r4, [pc, #756]	; (80007dc <checkresendcmd+0x35c>)
 80004e6:	4bbe      	ldr	r3, [pc, #760]	; (80007e0 <checkresendcmd+0x360>)
      iflashstep=5;
 80004e8:	7029      	strb	r1, [r5, #0]
      icrclen=byte2uint32( (uint8_t *)FLASHTEMPDATA,icrctempdata,idataoff);   
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	0021      	movs	r1, r4
 80004ee:	48bd      	ldr	r0, [pc, #756]	; (80007e4 <checkresendcmd+0x364>)
 80004f0:	f7ff ff24 	bl	800033c <byte2uint32>
   for(uint32_t i = 0; i < len; i++)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d100      	bne.n	80004fa <checkresendcmd+0x7a>
 80004f8:	e163      	b.n	80007c2 <checkresendcmd+0x342>
 80004fa:	0021      	movs	r1, r4
   uint32_t icrc_out = 0xffffffff;  
 80004fc:	2201      	movs	r2, #1
 80004fe:	0084      	lsls	r4, r0, #2
            icrc_out = (icrc_out << 1) ^ icrc_poly;
 8000500:	48b9      	ldr	r0, [pc, #740]	; (80007e8 <checkresendcmd+0x368>)
 8000502:	190c      	adds	r4, r1, r4
   uint32_t icrc_out = 0xffffffff;  
 8000504:	4252      	negs	r2, r2
      icrc_out ^= idatain[i];        
 8000506:	680b      	ldr	r3, [r1, #0]
 8000508:	405a      	eors	r2, r3
 800050a:	2320      	movs	r3, #32
 800050c:	e004      	b.n	8000518 <checkresendcmd+0x98>
      for (uint8_t j = 0; j < 32; j++)
 800050e:	3b01      	subs	r3, #1
 8000510:	b2db      	uxtb	r3, r3
            icrc_out <<= 1;
 8000512:	0052      	lsls	r2, r2, #1
      for (uint8_t j = 0; j < 32; j++)
 8000514:	2b00      	cmp	r3, #0
 8000516:	d007      	beq.n	8000528 <checkresendcmd+0xa8>
         if (icrc_out & 0x80000000)
 8000518:	2a00      	cmp	r2, #0
 800051a:	daf8      	bge.n	800050e <checkresendcmd+0x8e>
      for (uint8_t j = 0; j < 32; j++)
 800051c:	3b01      	subs	r3, #1
            icrc_out = (icrc_out << 1) ^ icrc_poly;
 800051e:	0052      	lsls	r2, r2, #1
      for (uint8_t j = 0; j < 32; j++)
 8000520:	b2db      	uxtb	r3, r3
            icrc_out = (icrc_out << 1) ^ icrc_poly;
 8000522:	4042      	eors	r2, r0
      for (uint8_t j = 0; j < 32; j++)
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1f7      	bne.n	8000518 <checkresendcmd+0x98>
   for(uint32_t i = 0; i < len; i++)
 8000528:	3104      	adds	r1, #4
 800052a:	428c      	cmp	r4, r1
 800052c:	d1eb      	bne.n	8000506 <checkresendcmd+0x86>
      mastercmd[6]=icrc>>16;   
 800052e:	0c14      	lsrs	r4, r2, #16
      mastercmd[7]=icrc>>8;   
 8000530:	0a11      	lsrs	r1, r2, #8
      mastercmd[5]=icrc>>24;  
 8000532:	0e15      	lsrs	r5, r2, #24
      mastercmd[6]=icrc>>16;   
 8000534:	b2e4      	uxtb	r4, r4
      mastercmd[7]=icrc>>8;   
 8000536:	b2c9      	uxtb	r1, r1
      mastercmd[8]=icrc;  
 8000538:	b2d2      	uxtb	r2, r2
      mastercmd[0]=CMDHEADER1;  //0x55;
 800053a:	48ac      	ldr	r0, [pc, #688]	; (80007ec <checkresendcmd+0x36c>)
 800053c:	4bac      	ldr	r3, [pc, #688]	; (80007f0 <checkresendcmd+0x370>)
      mastercmd[8]=icrc;  
 800053e:	7202      	strb	r2, [r0, #8]
      mastercmd[0]=CMDHEADER1;  //0x55;
 8000540:	6003      	str	r3, [r0, #0]
      mastercmd[4]=islaveaddrout;  
 8000542:	4bac      	ldr	r3, [pc, #688]	; (80007f4 <checkresendcmd+0x374>)
      mastercmd[5]=icrc>>24;  
 8000544:	7145      	strb	r5, [r0, #5]
      mastercmd[4]=islaveaddrout;  
 8000546:	781b      	ldrb	r3, [r3, #0]
      mastercmd[6]=icrc>>16;   
 8000548:	7184      	strb	r4, [r0, #6]
      mastercmd[4]=islaveaddrout;  
 800054a:	7103      	strb	r3, [r0, #4]
      isum += ival[i]; 
 800054c:	33ca      	adds	r3, #202	; 0xca
 800054e:	33ff      	adds	r3, #255	; 0xff
 8000550:	195b      	adds	r3, r3, r5
 8000552:	191b      	adds	r3, r3, r4
 8000554:	185b      	adds	r3, r3, r1
 8000556:	189a      	adds	r2, r3, r2
      mastercmd[9]=get_checksum_8(mastercmd,9); 
 8000558:	2396      	movs	r3, #150	; 0x96
      mastercmd[7]=icrc>>8;   
 800055a:	71c1      	strb	r1, [r0, #7]
      mastercmd[9]=get_checksum_8(mastercmd,9); 
 800055c:	7242      	strb	r2, [r0, #9]
 800055e:	005b      	lsls	r3, r3, #1
      __NOP(); 
 8000560:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 8000562:	3b01      	subs	r3, #1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1fb      	bne.n	8000560 <checkresendcmd+0xe0>
   switch2send(USART1); 
 8000568:	2104      	movs	r1, #4
 800056a:	4aa3      	ldr	r2, [pc, #652]	; (80007f8 <checkresendcmd+0x378>)
 800056c:	0004      	movs	r4, r0
 800056e:	6813      	ldr	r3, [r2, #0]
 8000570:	340a      	adds	r4, #10
 8000572:	438b      	bics	r3, r1
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	6813      	ldr	r3, [r2, #0]
 8000578:	3104      	adds	r1, #4
 800057a:	430b      	orrs	r3, r1
 800057c:	0001      	movs	r1, r0
   while( (USART1-> ISR & (1<<7) ) ==0 );
 800057e:	2080      	movs	r0, #128	; 0x80
   switch2send(USART1); 
 8000580:	6013      	str	r3, [r2, #0]
   USART1->TDR = c;
 8000582:	780b      	ldrb	r3, [r1, #0]
 8000584:	6293      	str	r3, [r2, #40]	; 0x28
   while( (USART1-> ISR & (1<<7) ) ==0 );
 8000586:	69d3      	ldr	r3, [r2, #28]
 8000588:	4218      	tst	r0, r3
 800058a:	d0fc      	beq.n	8000586 <checkresendcmd+0x106>
   while(ilen--)
 800058c:	3101      	adds	r1, #1
 800058e:	42a1      	cmp	r1, r4
 8000590:	d1f7      	bne.n	8000582 <checkresendcmd+0x102>
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	005b      	lsls	r3, r3, #1
      __NOP(); 
 8000596:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 8000598:	3b01      	subs	r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1fb      	bne.n	8000596 <checkresendcmd+0x116>
   switch2read(USART1);   
 800059e:	2108      	movs	r1, #8
 80005a0:	4b95      	ldr	r3, [pc, #596]	; (80007f8 <checkresendcmd+0x378>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	438a      	bics	r2, r1
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	3904      	subs	r1, #4
 80005ac:	430a      	orrs	r2, r1
 80005ae:	601a      	str	r2, [r3, #0]
}      
 80005b0:	e784      	b.n	80004bc <checkresendcmd+0x3c>
      if(iwaitrespcount>=WAITREPEATTIME)
 80005b2:	21fa      	movs	r1, #250	; 0xfa
 80005b4:	4a87      	ldr	r2, [pc, #540]	; (80007d4 <checkresendcmd+0x354>)
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	6810      	ldr	r0, [r2, #0]
 80005ba:	4288      	cmp	r0, r1
 80005bc:	d200      	bcs.n	80005c0 <checkresendcmd+0x140>
 80005be:	e0a9      	b.n	8000714 <checkresendcmd+0x294>
         flg_repeat=1;
 80005c0:	4985      	ldr	r1, [pc, #532]	; (80007d8 <checkresendcmd+0x358>)
      iflashstep=3;
 80005c2:	702b      	strb	r3, [r5, #0]
         flg_repeat=1;
 80005c4:	0008      	movs	r0, r1
 80005c6:	9100      	str	r1, [sp, #0]
 80005c8:	2101      	movs	r1, #1
 80005ca:	7001      	strb	r1, [r0, #0]
      flg_sendtype=0;
 80005cc:	2100      	movs	r1, #0
 80005ce:	7021      	strb	r1, [r4, #0]
      iwaitrespcount=0;
 80005d0:	6011      	str	r1, [r2, #0]
         idataoff-=isendnum;
 80005d2:	4b8a      	ldr	r3, [pc, #552]	; (80007fc <checkresendcmd+0x37c>)
 80005d4:	4982      	ldr	r1, [pc, #520]	; (80007e0 <checkresendcmd+0x360>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4698      	mov	r8, r3
 80005da:	680b      	ldr	r3, [r1, #0]
 80005dc:	9101      	str	r1, [sp, #4]
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
         irestlen+=isendnum;            
 80005e2:	4b87      	ldr	r3, [pc, #540]	; (8000800 <checkresendcmd+0x380>)
 80005e4:	469c      	mov	ip, r3
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	18d6      	adds	r6, r2, r3
 80005ea:	4663      	mov	r3, ip
 80005ec:	601e      	str	r6, [r3, #0]
      if(irestlen<=PACKAGELEN)
 80005ee:	2e40      	cmp	r6, #64	; 0x40
 80005f0:	d800      	bhi.n	80005f4 <checkresendcmd+0x174>
 80005f2:	e0aa      	b.n	800074a <checkresendcmd+0x2ca>
      isendnum=PACKAGELEN;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	4642      	mov	r2, r8
      mastercmd[4]=islaveaddrout;      
 80005f8:	2145      	movs	r1, #69	; 0x45
 80005fa:	2640      	movs	r6, #64	; 0x40
      mastercmd[0]=CMDHEADER1;  //0x55;
 80005fc:	487b      	ldr	r0, [pc, #492]	; (80007ec <checkresendcmd+0x36c>)
      isendnum=PACKAGELEN;
 80005fe:	6013      	str	r3, [r2, #0]
      mastercmd[0]=CMDHEADER1;  //0x55;
 8000600:	4b80      	ldr	r3, [pc, #512]	; (8000804 <checkresendcmd+0x384>)
 8000602:	6003      	str	r3, [r0, #0]
      mastercmd[4]=islaveaddrout;      
 8000604:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <checkresendcmd+0x374>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	7103      	strb	r3, [r0, #4]
      for(uint8_t i=0; i<isendnum; i++)  //64         
 800060a:	4f76      	ldr	r7, [pc, #472]	; (80007e4 <checkresendcmd+0x364>)
 800060c:	2300      	movs	r3, #0
 800060e:	46ba      	mov	sl, r7
         mastercmd[5+i] = FLASHTEMPDATA[idataoff+i];
 8000610:	9f01      	ldr	r7, [sp, #4]
      for(uint8_t i=0; i<isendnum; i++)  //64         
 8000612:	2200      	movs	r2, #0
         mastercmd[5+i] = FLASHTEMPDATA[idataoff+i];
 8000614:	683f      	ldr	r7, [r7, #0]
 8000616:	46b9      	mov	r9, r7
 8000618:	44ca      	add	sl, r9
 800061a:	18c7      	adds	r7, r0, r3
 800061c:	46bb      	mov	fp, r7
 800061e:	4657      	mov	r7, sl
 8000620:	5cba      	ldrb	r2, [r7, r2]
 8000622:	465f      	mov	r7, fp
      for(uint8_t i=0; i<isendnum; i++)  //64         
 8000624:	3301      	adds	r3, #1
 8000626:	b2db      	uxtb	r3, r3
         mastercmd[5+i] = FLASHTEMPDATA[idataoff+i];
 8000628:	717a      	strb	r2, [r7, #5]
      for(uint8_t i=0; i<isendnum; i++)  //64         
 800062a:	001a      	movs	r2, r3
 800062c:	42b3      	cmp	r3, r6
 800062e:	d3f4      	bcc.n	800061a <checkresendcmd+0x19a>
   uint16_t isum =0;
 8000630:	2300      	movs	r3, #0
   for (i=0; i<inum; i++)
 8000632:	2200      	movs	r2, #0
      isum += ival[i]; 
 8000634:	5c16      	ldrb	r6, [r2, r0]
   for (i=0; i<inum; i++)
 8000636:	3201      	adds	r2, #1
      isum += ival[i]; 
 8000638:	199b      	adds	r3, r3, r6
 800063a:	b29b      	uxth	r3, r3
   for (i=0; i<inum; i++)
 800063c:	4291      	cmp	r1, r2
 800063e:	d8f9      	bhi.n	8000634 <checkresendcmd+0x1b4>
      mastercmd[isendnum+5]=get_checksum_8(mastercmd,isendnum+5); 
 8000640:	5443      	strb	r3, [r0, r1]
 8000642:	2396      	movs	r3, #150	; 0x96
 8000644:	005b      	lsls	r3, r3, #1
      __NOP(); 
 8000646:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 8000648:	3b01      	subs	r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1fb      	bne.n	8000646 <checkresendcmd+0x1c6>
   switch2send(USART1); 
 800064e:	2604      	movs	r6, #4
 8000650:	4689      	mov	r9, r1
   while( (USART1-> ISR & (1<<7) ) ==0 );
 8000652:	2180      	movs	r1, #128	; 0x80
   switch2send(USART1); 
 8000654:	4a68      	ldr	r2, [pc, #416]	; (80007f8 <checkresendcmd+0x378>)
 8000656:	6813      	ldr	r3, [r2, #0]
 8000658:	43b3      	bics	r3, r6
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	3604      	adds	r6, #4
 8000660:	4333      	orrs	r3, r6
 8000662:	6013      	str	r3, [r2, #0]
   while(ilen--)
 8000664:	0003      	movs	r3, r0
 8000666:	3001      	adds	r0, #1
 8000668:	4481      	add	r9, r0
   USART1->TDR = c;
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	6293      	str	r3, [r2, #40]	; 0x28
   while( (USART1-> ISR & (1<<7) ) ==0 );
 800066e:	69d3      	ldr	r3, [r2, #28]
 8000670:	4219      	tst	r1, r3
 8000672:	d0fc      	beq.n	800066e <checkresendcmd+0x1ee>
   while(ilen--)
 8000674:	0003      	movs	r3, r0
 8000676:	4581      	cmp	r9, r0
 8000678:	d07c      	beq.n	8000774 <checkresendcmd+0x2f4>
 800067a:	3001      	adds	r0, #1
 800067c:	e7f5      	b.n	800066a <checkresendcmd+0x1ea>
      if(iwaitrespcount>=WAITREPEATTIME)
 800067e:	21fa      	movs	r1, #250	; 0xfa
 8000680:	4a54      	ldr	r2, [pc, #336]	; (80007d4 <checkresendcmd+0x354>)
 8000682:	0089      	lsls	r1, r1, #2
 8000684:	6810      	ldr	r0, [r2, #0]
 8000686:	4288      	cmp	r0, r1
 8000688:	d33c      	bcc.n	8000704 <checkresendcmd+0x284>
         flg_repeat=1;
 800068a:	4953      	ldr	r1, [pc, #332]	; (80007d8 <checkresendcmd+0x358>)
 800068c:	4c50      	ldr	r4, [pc, #320]	; (80007d0 <checkresendcmd+0x350>)
 800068e:	9100      	str	r1, [sp, #0]
 8000690:	700b      	strb	r3, [r1, #0]
      flg_sendtype=0;
 8000692:	2300      	movs	r3, #0
      mastercmd[0]=CMDHEADER1;  //0x55;
 8000694:	4855      	ldr	r0, [pc, #340]	; (80007ec <checkresendcmd+0x36c>)
      flg_sendtype=0;
 8000696:	7023      	strb	r3, [r4, #0]
      iwaitrespcount=0;      
 8000698:	6013      	str	r3, [r2, #0]
      mastercmd[0]=CMDHEADER1;  //0x55;
 800069a:	4b5b      	ldr	r3, [pc, #364]	; (8000808 <checkresendcmd+0x388>)
      iflashstep=1;
 800069c:	2101      	movs	r1, #1
      mastercmd[0]=CMDHEADER1;  //0x55;
 800069e:	6003      	str	r3, [r0, #0]
      mastercmd[4]=islaveaddrout;
 80006a0:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <checkresendcmd+0x374>)
      iflashstep=1;
 80006a2:	7029      	strb	r1, [r5, #0]
      mastercmd[4]=islaveaddrout;
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	7103      	strb	r3, [r0, #4]
   iret = (uint8_t)(isum & 0xff);
 80006a8:	3b3d      	subs	r3, #61	; 0x3d
      mastercmd[5]=get_checksum_8(mastercmd,5);
 80006aa:	7143      	strb	r3, [r0, #5]
 80006ac:	2396      	movs	r3, #150	; 0x96
 80006ae:	005b      	lsls	r3, r3, #1
      __NOP(); 
 80006b0:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 80006b2:	3b01      	subs	r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1fb      	bne.n	80006b0 <checkresendcmd+0x230>
   switch2send(USART1); 
 80006b8:	2104      	movs	r1, #4
 80006ba:	4a4f      	ldr	r2, [pc, #316]	; (80007f8 <checkresendcmd+0x378>)
 80006bc:	1d87      	adds	r7, r0, #6
 80006be:	6813      	ldr	r3, [r2, #0]
 80006c0:	438b      	bics	r3, r1
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	6813      	ldr	r3, [r2, #0]
 80006c6:	3104      	adds	r1, #4
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6013      	str	r3, [r2, #0]
   while( (USART1-> ISR & (1<<7) ) ==0 );
 80006cc:	3178      	adds	r1, #120	; 0x78
   USART1->TDR = c;
 80006ce:	7803      	ldrb	r3, [r0, #0]
 80006d0:	6293      	str	r3, [r2, #40]	; 0x28
   while( (USART1-> ISR & (1<<7) ) ==0 );
 80006d2:	69d3      	ldr	r3, [r2, #28]
 80006d4:	4219      	tst	r1, r3
 80006d6:	d0fc      	beq.n	80006d2 <checkresendcmd+0x252>
   while(ilen--)
 80006d8:	3001      	adds	r0, #1
 80006da:	4287      	cmp	r7, r0
 80006dc:	d1f7      	bne.n	80006ce <checkresendcmd+0x24e>
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	005b      	lsls	r3, r3, #1
      __NOP(); 
 80006e2:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 80006e4:	3b01      	subs	r3, #1
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1fb      	bne.n	80006e2 <checkresendcmd+0x262>
   switch2read(USART1);   
 80006ea:	2008      	movs	r0, #8
 80006ec:	4a42      	ldr	r2, [pc, #264]	; (80007f8 <checkresendcmd+0x378>)
 80006ee:	6811      	ldr	r1, [r2, #0]
 80006f0:	4381      	bics	r1, r0
 80006f2:	6011      	str	r1, [r2, #0]
 80006f4:	6811      	ldr	r1, [r2, #0]
 80006f6:	3804      	subs	r0, #4
 80006f8:	4301      	orrs	r1, r0
 80006fa:	6011      	str	r1, [r2, #0]
      flg_repeat=0;         
 80006fc:	9a00      	ldr	r2, [sp, #0]
 80006fe:	7013      	strb	r3, [r2, #0]
   if(iflashstep==3)   
 8000700:	782b      	ldrb	r3, [r5, #0]
 8000702:	e6ce      	b.n	80004a2 <checkresendcmd+0x22>
   if (flg_sendtype==1)       
 8000704:	4c32      	ldr	r4, [pc, #200]	; (80007d0 <checkresendcmd+0x350>)
 8000706:	7823      	ldrb	r3, [r4, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d055      	beq.n	80007b8 <checkresendcmd+0x338>
   if (flg_sendtype==2)       
 800070c:	2b02      	cmp	r3, #2
 800070e:	d000      	beq.n	8000712 <checkresendcmd+0x292>
 8000710:	e6d0      	b.n	80004b4 <checkresendcmd+0x34>
 8000712:	e005      	b.n	8000720 <checkresendcmd+0x2a0>
 8000714:	7823      	ldrb	r3, [r4, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d000      	beq.n	800071c <checkresendcmd+0x29c>
 800071a:	e6cc      	b.n	80004b6 <checkresendcmd+0x36>
 800071c:	e000      	b.n	8000720 <checkresendcmd+0x2a0>
 800071e:	4a2d      	ldr	r2, [pc, #180]	; (80007d4 <checkresendcmd+0x354>)
      if(flg_repeat==1)
 8000720:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <checkresendcmd+0x358>)
      iflashstep=3;
 8000722:	2003      	movs	r0, #3
      if(flg_repeat==1)
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	9300      	str	r3, [sp, #0]
      flg_sendtype=0;
 8000728:	2300      	movs	r3, #0
      iflashstep=3;
 800072a:	7028      	strb	r0, [r5, #0]
      flg_sendtype=0;
 800072c:	7023      	strb	r3, [r4, #0]
      iwaitrespcount=0;
 800072e:	6013      	str	r3, [r2, #0]
      if(flg_repeat==1)
 8000730:	2901      	cmp	r1, #1
 8000732:	d100      	bne.n	8000736 <checkresendcmd+0x2b6>
 8000734:	e74d      	b.n	80005d2 <checkresendcmd+0x152>
      if(irestlen<=PACKAGELEN)
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <checkresendcmd+0x380>)
 8000738:	469c      	mov	ip, r3
 800073a:	681e      	ldr	r6, [r3, #0]
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <checkresendcmd+0x37c>)
 800073e:	4698      	mov	r8, r3
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <checkresendcmd+0x360>)
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	2e40      	cmp	r6, #64	; 0x40
 8000746:	d900      	bls.n	800074a <checkresendcmd+0x2ca>
 8000748:	e754      	b.n	80005f4 <checkresendcmd+0x174>
         isendnum=irestlen;
 800074a:	4643      	mov	r3, r8
         flg_lastpackage=1;
 800074c:	2201      	movs	r2, #1
         isendnum=irestlen;
 800074e:	601e      	str	r6, [r3, #0]
         flg_lastpackage=1;
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <checkresendcmd+0x38c>)
      mastercmd[0]=CMDHEADER1;  //0x55;
 8000752:	4826      	ldr	r0, [pc, #152]	; (80007ec <checkresendcmd+0x36c>)
         flg_lastpackage=1;
 8000754:	701a      	strb	r2, [r3, #0]
      mastercmd[0]=CMDHEADER1;  //0x55;
 8000756:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <checkresendcmd+0x390>)
      mastercmd[isendnum+5]=get_checksum_8(mastercmd,isendnum+5); 
 8000758:	1d71      	adds	r1, r6, #5
      mastercmd[0]=CMDHEADER1;  //0x55;
 800075a:	8003      	strh	r3, [r0, #0]
      mastercmd[2]=isendnum+3;  //len 
 800075c:	1cf3      	adds	r3, r6, #3
 800075e:	7083      	strb	r3, [r0, #2]
      mastercmd[3]=0xC2;      
 8000760:	23c2      	movs	r3, #194	; 0xc2
 8000762:	70c3      	strb	r3, [r0, #3]
      mastercmd[4]=islaveaddrout;      
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <checkresendcmd+0x374>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	7103      	strb	r3, [r0, #4]
      for(uint8_t i=0; i<isendnum; i++)  //64         
 800076a:	2e00      	cmp	r6, #0
 800076c:	d000      	beq.n	8000770 <checkresendcmd+0x2f0>
 800076e:	e74c      	b.n	800060a <checkresendcmd+0x18a>
 8000770:	2105      	movs	r1, #5
 8000772:	e75d      	b.n	8000630 <checkresendcmd+0x1b0>
 8000774:	23a0      	movs	r3, #160	; 0xa0
 8000776:	005b      	lsls	r3, r3, #1
      __NOP(); 
 8000778:	46c0      	nop			; (mov r8, r8)
   for(; nCount != 0; nCount--)  
 800077a:	3b01      	subs	r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1fb      	bne.n	8000778 <checkresendcmd+0x2f8>
   switch2read(USART1);   
 8000780:	2008      	movs	r0, #8
 8000782:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <checkresendcmd+0x378>)
 8000784:	6811      	ldr	r1, [r2, #0]
 8000786:	4381      	bics	r1, r0
 8000788:	6011      	str	r1, [r2, #0]
 800078a:	6811      	ldr	r1, [r2, #0]
 800078c:	3804      	subs	r0, #4
 800078e:	4301      	orrs	r1, r0
 8000790:	6011      	str	r1, [r2, #0]
      idataoff+=isendnum;
 8000792:	4642      	mov	r2, r8
 8000794:	9801      	ldr	r0, [sp, #4]
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	6801      	ldr	r1, [r0, #0]
 800079a:	1889      	adds	r1, r1, r2
 800079c:	6001      	str	r1, [r0, #0]
      irestlen-=isendnum;
 800079e:	4661      	mov	r1, ip
 80007a0:	6809      	ldr	r1, [r1, #0]
 80007a2:	1a8a      	subs	r2, r1, r2
 80007a4:	4661      	mov	r1, ip
 80007a6:	600a      	str	r2, [r1, #0]
      flg_repeat=0;         
 80007a8:	9a00      	ldr	r2, [sp, #0]
 80007aa:	7013      	strb	r3, [r2, #0]
   if(iflashstep==5)   
 80007ac:	782b      	ldrb	r3, [r5, #0]
 80007ae:	2b05      	cmp	r3, #5
 80007b0:	d000      	beq.n	80007b4 <checkresendcmd+0x334>
 80007b2:	e67f      	b.n	80004b4 <checkresendcmd+0x34>
 80007b4:	e689      	b.n	80004ca <checkresendcmd+0x4a>
 80007b6:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <checkresendcmd+0x354>)
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <checkresendcmd+0x358>)
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	e769      	b.n	8000692 <checkresendcmd+0x212>
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <checkresendcmd+0x354>)
 80007c0:	e68c      	b.n	80004dc <checkresendcmd+0x5c>
   for(uint32_t i = 0; i < len; i++)
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	21ff      	movs	r1, #255	; 0xff
 80007c6:	24ff      	movs	r4, #255	; 0xff
 80007c8:	25ff      	movs	r5, #255	; 0xff
 80007ca:	e6b6      	b.n	800053a <checkresendcmd+0xba>
 80007cc:	2000102c 	.word	0x2000102c
 80007d0:	20000822 	.word	0x20000822
 80007d4:	20001044 	.word	0x20001044
 80007d8:	20000821 	.word	0x20000821
 80007dc:	20000824 	.word	0x20000824
 80007e0:	20001028 	.word	0x20001028
 80007e4:	20000000 	.word	0x20000000
 80007e8:	04c11db7 	.word	0x04c11db7
 80007ec:	20001048 	.word	0x20001048
 80007f0:	c307aa55 	.word	0xc307aa55
 80007f4:	20001039 	.word	0x20001039
 80007f8:	40013800 	.word	0x40013800
 80007fc:	20001034 	.word	0x20001034
 8000800:	20001030 	.word	0x20001030
 8000804:	c243aa55 	.word	0xc243aa55
 8000808:	c103aa55 	.word	0xc103aa55
 800080c:	20000820 	.word	0x20000820
 8000810:	ffffaa55 	.word	0xffffaa55

08000814 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000814:	2107      	movs	r1, #7
 8000816:	4a1a      	ldr	r2, [pc, #104]	; (8000880 <SystemClock_Config+0x6c>)
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b510      	push	{r4, lr}
 800081a:	6813      	ldr	r3, [r2, #0]
 800081c:	438b      	bics	r3, r1
 800081e:	3906      	subs	r1, #6
 8000820:	430b      	orrs	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <SystemClock_Config+0x70>)
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	430a      	orrs	r2, r1
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800082e:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000830:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000832:	00c9      	lsls	r1, r1, #3
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	420a      	tst	r2, r1
 8000838:	d0fc      	beq.n	8000834 <SystemClock_Config+0x20>
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	4912      	ldr	r1, [pc, #72]	; (8000888 <SystemClock_Config+0x74>)
 800083e:	4011      	ands	r1, r2
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	01d2      	lsls	r2, r2, #7
 8000844:	430a      	orrs	r2, r1
 8000846:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4910      	ldr	r1, [pc, #64]	; (800088c <SystemClock_Config+0x78>)
 800084c:	400a      	ands	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	490f      	ldr	r1, [pc, #60]	; (8000890 <SystemClock_Config+0x7c>)
 8000854:	400a      	ands	r2, r1
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000856:	2107      	movs	r1, #7
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000858:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	438a      	bics	r2, r1
 800085e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <SystemClock_Config+0x70>)
 8000862:	3131      	adds	r1, #49	; 0x31
 8000864:	6893      	ldr	r3, [r2, #8]
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_HCLK_DIV_1);

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000866:	4219      	tst	r1, r3
 8000868:	d1fc      	bne.n	8000864 <SystemClock_Config+0x50>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800086a:	6893      	ldr	r3, [r2, #8]
 800086c:	4909      	ldr	r1, [pc, #36]	; (8000894 <SystemClock_Config+0x80>)
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  LL_Init1msTick(48000000);
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <SystemClock_Config+0x84>)
 8000870:	400b      	ands	r3, r1
 8000872:	6093      	str	r3, [r2, #8]
 8000874:	f000 fe36 	bl	80014e4 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <SystemClock_Config+0x84>)
 800087a:	f000 fe59 	bl	8001530 <LL_SetSystemCoreClock>
}
 800087e:	bd10      	pop	{r4, pc}
 8000880:	40022000 	.word	0x40022000
 8000884:	40021000 	.word	0x40021000
 8000888:	ffff80ff 	.word	0xffff80ff
 800088c:	ffffc7ff 	.word	0xffffc7ff
 8000890:	fffff0ff 	.word	0xfffff0ff
 8000894:	ffff8fff 	.word	0xffff8fff
 8000898:	02dc6c00 	.word	0x02dc6c00

0800089c <main>:
{
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	46de      	mov	lr, fp
 80008a0:	4657      	mov	r7, sl
 80008a2:	464e      	mov	r6, r9
 80008a4:	4645      	mov	r5, r8
  SET_BIT(RCC->APBENR2, Periphs);
 80008a6:	2401      	movs	r4, #1
  SET_BIT(RCC->APBENR1, Periphs);
 80008a8:	2180      	movs	r1, #128	; 0x80
  SET_BIT(RCC->APBENR2, Periphs);
 80008aa:	4b5a      	ldr	r3, [pc, #360]	; (8000a14 <main+0x178>)
 80008ac:	b5e0      	push	{r5, r6, r7, lr}
 80008ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b0:	b085      	sub	sp, #20
 80008b2:	4322      	orrs	r2, r4
 80008b4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80008b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  SET_BIT(RCC->APBENR1, Periphs);
 80008b8:	0549      	lsls	r1, r1, #21
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80008ba:	4022      	ands	r2, r4
 80008bc:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80008be:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->APBENR1, Periphs);
 80008c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008c2:	430a      	orrs	r2, r1
 80008c4:	63da      	str	r2, [r3, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c6:	22c0      	movs	r2, #192	; 0xc0
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80008c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ca:	0612      	lsls	r2, r2, #24
 80008cc:	400b      	ands	r3, r1
 80008ce:	4952      	ldr	r1, [pc, #328]	; (8000a18 <main+0x17c>)
 80008d0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80008d2:	9b02      	ldr	r3, [sp, #8]
 80008d4:	6a0b      	ldr	r3, [r1, #32]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	4313      	orrs	r3, r2
 80008dc:	620b      	str	r3, [r1, #32]
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80008de:	2108      	movs	r1, #8
 80008e0:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <main+0x180>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	3108      	adds	r1, #8
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
   SystemClock_Config();
 80008f0:	f7ff ff90 	bl	8000814 <SystemClock_Config>
   MX_GPIO_Init();
 80008f4:	f7ff fcb2 	bl	800025c <MX_GPIO_Init>
   MX_USART1_UART_Init();
 80008f8:	f000 fa1c 	bl	8000d34 <MX_USART1_UART_Init>
   MX_TIM1_Init();
 80008fc:	f000 f97a 	bl	8000bf4 <MX_TIM1_Init>
   MX_TIM17_Init();
 8000900:	f000 f9ce 	bl	8000ca0 <MX_TIM17_Init>
   LL_mDelay(10);  //20
 8000904:	200a      	movs	r0, #10
 8000906:	f000 fdfd 	bl	8001504 <LL_mDelay>
   uartsendcmd( (uint8_t*)"!!!",3);   //start
 800090a:	2103      	movs	r1, #3
 800090c:	4844      	ldr	r0, [pc, #272]	; (8000a20 <main+0x184>)
 800090e:	f7ff fce5 	bl	80002dc <uartsendcmd>
   islaveaddrout=1;
 8000912:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <main+0x188>)
      iflashstep=0;
 8000914:	4a44      	ldr	r2, [pc, #272]	; (8000a28 <main+0x18c>)
   islaveaddrout=1;
 8000916:	701c      	strb	r4, [r3, #0]
      iflashstep=0;
 8000918:	2300      	movs	r3, #0
 800091a:	7013      	strb	r3, [r2, #0]
      flg_sendtype=1;       // write data
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <main+0x190>)
 800091e:	4e44      	ldr	r6, [pc, #272]	; (8000a30 <main+0x194>)
 8000920:	701c      	strb	r4, [r3, #0]
         iuart_txledcount++;   
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <main+0x198>)
 8000924:	4f44      	ldr	r7, [pc, #272]	; (8000a38 <main+0x19c>)
 8000926:	4699      	mov	r9, r3
 8000928:	681c      	ldr	r4, [r3, #0]
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <main+0x1a0>)
 800092c:	469a      	mov	sl, r3
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <main+0x1a4>)
 8000930:	9301      	str	r3, [sp, #4]
         flg_timer1=0;
 8000932:	2300      	movs	r3, #0
 8000934:	4698      	mov	r8, r3
 8000936:	e014      	b.n	8000962 <main+0xc6>
      if (flg_rx==1)
 8000938:	783b      	ldrb	r3, [r7, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d031      	beq.n	80009a2 <main+0x106>
         checkresendcmd();
 800093e:	f7ff fd9f 	bl	8000480 <checkresendcmd>
		if( iuart_txledcount >=1000)
 8000942:	42ac      	cmp	r4, r5
 8000944:	d30f      	bcc.n	8000966 <main+0xca>
			 iuart_txledcount=0;
 8000946:	464b      	mov	r3, r9
 8000948:	4642      	mov	r2, r8
 800094a:	601a      	str	r2, [r3, #0]
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800094c:	2280      	movs	r2, #128	; 0x80
  uint32_t odr = READ_REG(GPIOx->ODR);
 800094e:	493d      	ldr	r1, [pc, #244]	; (8000a44 <main+0x1a8>)
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000950:	03d2      	lsls	r2, r2, #15
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000952:	6948      	ldr	r0, [r1, #20]
}
 8000954:	2400      	movs	r4, #0
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000956:	0403      	lsls	r3, r0, #16
 8000958:	4013      	ands	r3, r2
 800095a:	2240      	movs	r2, #64	; 0x40
 800095c:	4382      	bics	r2, r0
 800095e:	4313      	orrs	r3, r2
 8000960:	618b      	str	r3, [r1, #24]
		if( iuart_txledcount >=1000)
 8000962:	25fa      	movs	r5, #250	; 0xfa
 8000964:	00ad      	lsls	r5, r5, #2
      if(flg_timer1==1)
 8000966:	7833      	ldrb	r3, [r6, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d1e5      	bne.n	8000938 <main+0x9c>
         flg_timer1=0;
 800096c:	4643      	mov	r3, r8
 800096e:	7033      	strb	r3, [r6, #0]
         iuart_txcount++;
 8000970:	4653      	mov	r3, sl
 8000972:	4652      	mov	r2, sl
 8000974:	681b      	ldr	r3, [r3, #0]
         iuart_txledcount++;   
 8000976:	3401      	adds	r4, #1
         iuart_txcount++;
 8000978:	3301      	adds	r3, #1
 800097a:	6013      	str	r3, [r2, #0]
         iuart_txledcount++;   
 800097c:	464b      	mov	r3, r9
 800097e:	601c      	str	r4, [r3, #0]
         if( (iflashstep==1) || (iflashstep==3) || (iflashstep==5) )
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <main+0x18c>)
 8000982:	2102      	movs	r1, #2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	001a      	movs	r2, r3
 8000988:	438a      	bics	r2, r1
 800098a:	2a01      	cmp	r2, #1
 800098c:	d001      	beq.n	8000992 <main+0xf6>
 800098e:	2b05      	cmp	r3, #5
 8000990:	d1d2      	bne.n	8000938 <main+0x9c>
            iwaitrespcount++;         
 8000992:	9b01      	ldr	r3, [sp, #4]
 8000994:	9a01      	ldr	r2, [sp, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	6013      	str	r3, [r2, #0]
      if (flg_rx==1)
 800099c:	783b      	ldrb	r3, [r7, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1cd      	bne.n	800093e <main+0xa2>
         flg_rx=0;  
 80009a2:	4643      	mov	r3, r8
 80009a4:	703b      	strb	r3, [r7, #0]
         islaveaddrin=irxdata2[4];
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <main+0x1ac>)
 80009a8:	7918      	ldrb	r0, [r3, #4]
 80009aa:	b2c3      	uxtb	r3, r0
 80009ac:	469c      	mov	ip, r3
 80009ae:	4662      	mov	r2, ip
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <main+0x1b0>)
 80009b2:	701a      	strb	r2, [r3, #0]
         ichecksum = get_checksum_8((uint8_t *)irxdata2,irxcount2-1);
 80009b4:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <main+0x1b4>)
 80009b6:	6819      	ldr	r1, [r3, #0]
   for (i=0; i<inum; i++)
 80009b8:	2901      	cmp	r1, #1
 80009ba:	d029      	beq.n	8000a10 <main+0x174>
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <main+0x1ac>)
   uint16_t isum =0;
 80009be:	2300      	movs	r3, #0
 80009c0:	4693      	mov	fp, r2
 80009c2:	4459      	add	r1, fp
 80009c4:	3901      	subs	r1, #1
      isum += ival[i]; 
 80009c6:	7810      	ldrb	r0, [r2, #0]
   for (i=0; i<inum; i++)
 80009c8:	3201      	adds	r2, #1
      isum += ival[i]; 
 80009ca:	181b      	adds	r3, r3, r0
 80009cc:	b29b      	uxth	r3, r3
   for (i=0; i<inum; i++)
 80009ce:	4291      	cmp	r1, r2
 80009d0:	d1f9      	bne.n	80009c6 <main+0x12a>
   iret = (uint8_t)(isum & 0xff);
 80009d2:	b2db      	uxtb	r3, r3
         if(ichecksum == irxdata2[irxcount2-1])   
 80009d4:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <main+0x1b4>)
 80009d6:	491c      	ldr	r1, [pc, #112]	; (8000a48 <main+0x1ac>)
 80009d8:	6812      	ldr	r2, [r2, #0]
 80009da:	3a01      	subs	r2, #1
 80009dc:	5c8a      	ldrb	r2, [r1, r2]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d1ad      	bne.n	800093e <main+0xa2>
            if( (iflashstep==1) || (iflashstep==3) || (iflashstep==5) )
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <main+0x18c>)
 80009e4:	2102      	movs	r1, #2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	001a      	movs	r2, r3
 80009ea:	438a      	bics	r2, r1
 80009ec:	2a01      	cmp	r2, #1
 80009ee:	d008      	beq.n	8000a02 <main+0x166>
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d006      	beq.n	8000a02 <main+0x166>
            if(islaveaddrin==islaveaddrout)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <main+0x188>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4563      	cmp	r3, ip
 80009fa:	d1a0      	bne.n	800093e <main+0xa2>
               dowithuart(); 
 80009fc:	f7ff fcda 	bl	80003b4 <dowithuart>
 8000a00:	e79d      	b.n	800093e <main+0xa2>
               iwaitrespcount=0; 
 8000a02:	4641      	mov	r1, r8
 8000a04:	9a01      	ldr	r2, [sp, #4]
               iflashstep+=1;               
 8000a06:	3301      	adds	r3, #1
               iwaitrespcount=0; 
 8000a08:	6011      	str	r1, [r2, #0]
               iflashstep+=1;               
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <main+0x18c>)
 8000a0c:	7013      	strb	r3, [r2, #0]
 8000a0e:	e7f1      	b.n	80009f4 <main+0x158>
   for (i=0; i<inum; i++)
 8000a10:	2300      	movs	r3, #0
 8000a12:	e7df      	b.n	80009d4 <main+0x138>
 8000a14:	40021000 	.word	0x40021000
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	080015c0 	.word	0x080015c0
 8000a24:	20001039 	.word	0x20001039
 8000a28:	2000102c 	.word	0x2000102c
 8000a2c:	20000822 	.word	0x20000822
 8000a30:	200010e8 	.word	0x200010e8
 8000a34:	20001040 	.word	0x20001040
 8000a38:	2000108e 	.word	0x2000108e
 8000a3c:	2000103c 	.word	0x2000103c
 8000a40:	20001044 	.word	0x20001044
 8000a44:	50000400 	.word	0x50000400
 8000a48:	200010c4 	.word	0x200010c4
 8000a4c:	20001038 	.word	0x20001038
 8000a50:	2000109c 	.word	0x2000109c

08000a54 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a54:	e7fe      	b.n	8000a54 <NMI_Handler>
 8000a56:	46c0      	nop			; (mov r8, r8)

08000a58 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <HardFault_Handler>
 8000a5a:	46c0      	nop			; (mov r8, r8)

08000a5c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a5c:	4770      	bx	lr
 8000a5e:	46c0      	nop			; (mov r8, r8)

08000a60 <PendSV_Handler>:
 8000a60:	4770      	bx	lr
 8000a62:	46c0      	nop			; (mov r8, r8)

08000a64 <SysTick_Handler>:
 8000a64:	4770      	bx	lr
 8000a66:	46c0      	nop			; (mov r8, r8)

08000a68 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000a6a:	b510      	push	{r4, lr}
 8000a6c:	691a      	ldr	r2, [r3, #16]
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	  /* Check whether update interrupt is pending */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
 8000a6e:	07d2      	lsls	r2, r2, #31
 8000a70:	d502      	bpl.n	8000a78 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000a72:	2202      	movs	r2, #2
 8000a74:	4252      	negs	r2, r2
 8000a76:	611a      	str	r2, [r3, #16]
	    /* Clear the update interrupt flag */
	    LL_TIM_ClearFlag_UPDATE(TIM1);
	  }

	  /* TIM1 update interrupt processing */
	  TimerUpdate_Callback();
 8000a78:	f000 f950 	bl	8000d1c <TimerUpdate_Callback>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <TIM17_IRQHandler>:
 8000a84:	4770      	bx	lr
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	46ce      	mov	lr, r9
 8000a8c:	4647      	mov	r7, r8
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8000a8e:	2220      	movs	r2, #32
 8000a90:	b580      	push	{r7, lr}
 8000a92:	4b49      	ldr	r3, [pc, #292]	; (8000bb8 <USART1_IRQHandler+0x130>)
 8000a94:	b083      	sub	sp, #12
 8000a96:	69d9      	ldr	r1, [r3, #28]
 8000a98:	420a      	tst	r2, r1
 8000a9a:	d037      	beq.n	8000b0c <USART1_IRQHandler+0x84>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8000a9c:	6819      	ldr	r1, [r3, #0]
 8000a9e:	420a      	tst	r2, r1
 8000aa0:	d034      	beq.n	8000b0c <USART1_IRQHandler+0x84>
   {   
		//USART1->ISR &= ~(USART_ISR_RXNE_RXFNE);  //auto cleared by readed
      
      cuartbyte = (uint8_t)(READ_BIT(USART1->RDR, USART_RDR_RDR) & 0xFFU); 

      if( (flg_rxstart1==0) && ( cuartbyte !=CMDHEADER2) )   
 8000aa2:	4c46      	ldr	r4, [pc, #280]	; (8000bbc <USART1_IRQHandler+0x134>)
      cuartbyte = (uint8_t)(READ_BIT(USART1->RDR, USART_RDR_RDR) & 0xFFU); 
 8000aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if( (flg_rxstart1==0) && ( cuartbyte !=CMDHEADER2) )   
 8000aa6:	7823      	ldrb	r3, [r4, #0]
      cuartbyte = (uint8_t)(READ_BIT(USART1->RDR, USART_RDR_RDR) & 0xFFU); 
 8000aa8:	b2d0      	uxtb	r0, r2
      if( (flg_rxstart1==0) && ( cuartbyte !=CMDHEADER2) )   
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d057      	beq.n	8000b5e <USART1_IRQHandler+0xd6>
         flg_rxstart1=1; 
         irxdata[irxcount++]=cuartbyte;
         return;
      }     

      if( (flg_rxstart2==0) && (flg_rxstart1==1) && ( cuartbyte !=CMDHEADER1) )  
 8000aae:	4d44      	ldr	r5, [pc, #272]	; (8000bc0 <USART1_IRQHandler+0x138>)
 8000ab0:	7829      	ldrb	r1, [r5, #0]
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d166      	bne.n	8000b84 <USART1_IRQHandler+0xfc>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d100      	bne.n	8000abc <USART1_IRQHandler+0x34>
 8000aba:	e075      	b.n	8000ba8 <USART1_IRQHandler+0x120>
         flg_rxstart2=1;   
         irxdata[irxcount++]=cuartbyte;
         return;
      }
      
      if( (flg_rxstart2==1) && (flg_rxstart3==0) )  
 8000abc:	4f41      	ldr	r7, [pc, #260]	; (8000bc4 <USART1_IRQHandler+0x13c>)
 8000abe:	783e      	ldrb	r6, [r7, #0]
         flg_rxstart3=1;
        
         return;
      }        
      
      if( flg_rxstart3==1)   
 8000ac0:	2e01      	cmp	r6, #1
 8000ac2:	d135      	bne.n	8000b30 <USART1_IRQHandler+0xa8>
      {        
         irxdata[irxcount++]=cuartbyte;
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <USART1_IRQHandler+0x140>)
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	4641      	mov	r1, r8
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	600a      	str	r2, [r1, #0]

         if(irxcount>=(ilen+3))
 8000ad0:	4642      	mov	r2, r8
         irxdata[irxcount++]=cuartbyte;
 8000ad2:	493e      	ldr	r1, [pc, #248]	; (8000bcc <USART1_IRQHandler+0x144>)
 8000ad4:	54c8      	strb	r0, [r1, r3]
         if(irxcount>=(ilen+3))
 8000ad6:	4b3e      	ldr	r3, [pc, #248]	; (8000bd0 <USART1_IRQHandler+0x148>)
 8000ad8:	4699      	mov	r9, r3
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	3303      	adds	r3, #3
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d825      	bhi.n	8000b30 <USART1_IRQHandler+0xa8>
         {
            memcpy((void *)irxdata2,(void *)irxdata,irxcount);
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	483b      	ldr	r0, [pc, #236]	; (8000bd4 <USART1_IRQHandler+0x14c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f000 fd4b 	bl	8001584 <memcpy>
            irxcount2=irxcount;
 8000aee:	4643      	mov	r3, r8
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <USART1_IRQHandler+0x150>)
 8000af4:	601a      	str	r2, [r3, #0]
            flg_rx=1;
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <USART1_IRQHandler+0x154>)

            irxcount=0;
 8000af8:	4642      	mov	r2, r8
            flg_rx=1;
 8000afa:	701e      	strb	r6, [r3, #0]
            irxcount=0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	6013      	str	r3, [r2, #0]
            ilen=0;
 8000b00:	464a      	mov	r2, r9
            flg_rxstart1=0;
 8000b02:	7023      	strb	r3, [r4, #0]
            ilen=0;
 8000b04:	6013      	str	r3, [r2, #0]
            flg_rxstart2=0;		
 8000b06:	702b      	strb	r3, [r5, #0]
            flg_rxstart3=0;		            
 8000b08:	703b      	strb	r3, [r7, #0]
 8000b0a:	e011      	b.n	8000b30 <USART1_IRQHandler+0xa8>
   } 
   else
   {
      
      __IO uint32_t iregval;
      iregval = LL_USART_ReadReg(USART1, ISR);
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <USART1_IRQHandler+0x130>)
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	9201      	str	r2, [sp, #4]

      if (iregval & LL_USART_ISR_NE)  //2
 8000b12:	2204      	movs	r2, #4
 8000b14:	9901      	ldr	r1, [sp, #4]
 8000b16:	420a      	tst	r2, r1
 8000b18:	d00f      	beq.n	8000b3a <USART1_IRQHandler+0xb2>
      {
         uart_err = 1;
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	4930      	ldr	r1, [pc, #192]	; (8000be0 <USART1_IRQHandler+0x158>)
 8000b1e:	6008      	str	r0, [r1, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8000b20:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_RTOCF);
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <USART1_IRQHandler+0x130>)
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	621a      	str	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_UDRCF);
 8000b2a:	2280      	movs	r2, #128	; 0x80
 8000b2c:	0192      	lsls	r2, r2, #6
 8000b2e:	621a      	str	r2, [r3, #32]
	 
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b30:	b003      	add	sp, #12
 8000b32:	bcc0      	pop	{r6, r7}
 8000b34:	46b9      	mov	r9, r7
 8000b36:	46b0      	mov	r8, r6
 8000b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
      else if (iregval & LL_USART_ISR_PE)  //0
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	9801      	ldr	r0, [sp, #4]
 8000b3e:	4201      	tst	r1, r0
 8000b40:	d108      	bne.n	8000b54 <USART1_IRQHandler+0xcc>
      else if (iregval & LL_USART_ISR_ORE)  //3
 8000b42:	2108      	movs	r1, #8
 8000b44:	9801      	ldr	r0, [sp, #4]
 8000b46:	4201      	tst	r1, r0
 8000b48:	d014      	beq.n	8000b74 <USART1_IRQHandler+0xec>
         uart_err = 3;
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	4a24      	ldr	r2, [pc, #144]	; (8000be0 <USART1_IRQHandler+0x158>)
 8000b4e:	6010      	str	r0, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000b50:	6219      	str	r1, [r3, #32]
}
 8000b52:	e7e6      	b.n	8000b22 <USART1_IRQHandler+0x9a>
         uart_err = 2;
 8000b54:	2002      	movs	r0, #2
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <USART1_IRQHandler+0x158>)
 8000b58:	6010      	str	r0, [r2, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8000b5a:	6219      	str	r1, [r3, #32]
}
 8000b5c:	e7e1      	b.n	8000b22 <USART1_IRQHandler+0x9a>
      if( (flg_rxstart1==0) && ( cuartbyte !=CMDHEADER2) )   
 8000b5e:	28aa      	cmp	r0, #170	; 0xaa
 8000b60:	d1e6      	bne.n	8000b30 <USART1_IRQHandler+0xa8>
         flg_rxstart1=1; 
 8000b62:	3301      	adds	r3, #1
 8000b64:	7023      	strb	r3, [r4, #0]
         irxdata[irxcount++]=cuartbyte;
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <USART1_IRQHandler+0x140>)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	6011      	str	r1, [r2, #0]
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <USART1_IRQHandler+0x144>)
 8000b70:	54d0      	strb	r0, [r2, r3]
         return;
 8000b72:	e7dd      	b.n	8000b30 <USART1_IRQHandler+0xa8>
      else if (iregval & LL_USART_ISR_FE)  //1
 8000b74:	2102      	movs	r1, #2
 8000b76:	9801      	ldr	r0, [sp, #4]
 8000b78:	4201      	tst	r1, r0
 8000b7a:	d0d2      	beq.n	8000b22 <USART1_IRQHandler+0x9a>
         uart_err = 4;
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <USART1_IRQHandler+0x158>)
 8000b7e:	6002      	str	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000b80:	6219      	str	r1, [r3, #32]
}
 8000b82:	e7ce      	b.n	8000b22 <USART1_IRQHandler+0x9a>
      if( (flg_rxstart2==1) && (flg_rxstart3==0) )  
 8000b84:	2901      	cmp	r1, #1
 8000b86:	d199      	bne.n	8000abc <USART1_IRQHandler+0x34>
 8000b88:	4f0e      	ldr	r7, [pc, #56]	; (8000bc4 <USART1_IRQHandler+0x13c>)
 8000b8a:	783e      	ldrb	r6, [r7, #0]
 8000b8c:	2e00      	cmp	r6, #0
 8000b8e:	d197      	bne.n	8000ac0 <USART1_IRQHandler+0x38>
         ilen=cuartbyte; 
 8000b90:	23ff      	movs	r3, #255	; 0xff
 8000b92:	401a      	ands	r2, r3
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <USART1_IRQHandler+0x148>)
         flg_rxstart3=1;
 8000b96:	7039      	strb	r1, [r7, #0]
         ilen=cuartbyte; 
 8000b98:	601a      	str	r2, [r3, #0]
         irxdata[irxcount++]=cuartbyte;
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <USART1_IRQHandler+0x140>)
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	1c5c      	adds	r4, r3, #1
 8000ba0:	6014      	str	r4, [r2, #0]
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <USART1_IRQHandler+0x144>)
 8000ba4:	54d0      	strb	r0, [r2, r3]
         return;
 8000ba6:	e7c3      	b.n	8000b30 <USART1_IRQHandler+0xa8>
      if( (flg_rxstart2==0) && (flg_rxstart1==1) && ( cuartbyte !=CMDHEADER1) )  
 8000ba8:	2855      	cmp	r0, #85	; 0x55
 8000baa:	d101      	bne.n	8000bb0 <USART1_IRQHandler+0x128>
         flg_rxstart2=1;   
 8000bac:	702b      	strb	r3, [r5, #0]
 8000bae:	e7da      	b.n	8000b66 <USART1_IRQHandler+0xde>
         irxcount=0;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <USART1_IRQHandler+0x140>)
         flg_rxstart1=0;
 8000bb2:	7021      	strb	r1, [r4, #0]
         irxcount=0;
 8000bb4:	6019      	str	r1, [r3, #0]
         return;
 8000bb6:	e7bb      	b.n	8000b30 <USART1_IRQHandler+0xa8>
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	2000108f 	.word	0x2000108f
 8000bc0:	20001090 	.word	0x20001090
 8000bc4:	20001091 	.word	0x20001091
 8000bc8:	20001098 	.word	0x20001098
 8000bcc:	200010a0 	.word	0x200010a0
 8000bd0:	20001094 	.word	0x20001094
 8000bd4:	200010c4 	.word	0x200010c4
 8000bd8:	2000109c 	.word	0x2000109c
 8000bdc:	2000108e 	.word	0x2000108e
 8000be0:	200010f0 	.word	0x200010f0

08000be4 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <SystemInit+0xc>)
 8000be8:	0512      	lsls	r2, r2, #20
 8000bea:	609a      	str	r2, [r3, #8]
#endif
}
 8000bec:	4770      	bx	lr
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000bf4:	b530      	push	{r4, r5, lr}
 8000bf6:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000bf8:	ad01      	add	r5, sp, #4
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0028      	movs	r0, r5
 8000c00:	f000 fcc9 	bl	8001596 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8000c04:	2080      	movs	r0, #128	; 0x80
 8000c06:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <MX_TIM1_Init+0x90>)
 8000c08:	0100      	lsls	r0, r0, #4
 8000c0a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000c0c:	4301      	orrs	r1, r0
 8000c0e:	6411      	str	r1, [r2, #64]	; 0x40
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	21c3      	movs	r1, #195	; 0xc3
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000c12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c14:	0089      	lsls	r1, r1, #2
 8000c16:	4003      	ands	r3, r0
 8000c18:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000c1a:	9b00      	ldr	r3, [sp, #0]
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM1_Init+0x94>)
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_TIM1_Init+0x98>)
 8000c20:	585a      	ldr	r2, [r3, r1]
 8000c22:	4002      	ands	r2, r0
 8000c24:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	2280      	movs	r2, #128	; 0x80
 8000c28:	0192      	lsls	r2, r2, #6
 8000c2a:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 4799;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_TIM1_Init+0x9c>)
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 9;
 8000c2e:	2209      	movs	r2, #9
  TIM_InitStruct.Prescaler = 4799;
 8000c30:	802b      	strh	r3, [r5, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c32:	2300      	movs	r3, #0
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000c34:	4c17      	ldr	r4, [pc, #92]	; (8000c94 <MX_TIM1_Init+0xa0>)
 8000c36:	0029      	movs	r1, r5
 8000c38:	0020      	movs	r0, r4
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c3a:	606b      	str	r3, [r5, #4]
  TIM_InitStruct.Autoreload = 9;
 8000c3c:	60aa      	str	r2, [r5, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c3e:	60eb      	str	r3, [r5, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000c40:	612b      	str	r3, [r5, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000c42:	f000 fb8f 	bl	8001364 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c4a:	4913      	ldr	r1, [pc, #76]	; (8000c98 <MX_TIM1_Init+0xa4>)
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000c4c:	4393      	bics	r3, r2
 8000c4e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c50:	68a3      	ldr	r3, [r4, #8]
 8000c52:	400b      	ands	r3, r1
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c54:	2170      	movs	r1, #112	; 0x70
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000c56:	60a3      	str	r3, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000c58:	6863      	ldr	r3, [r4, #4]
 8000c5a:	438b      	bics	r3, r1
 8000c5c:	6063      	str	r3, [r4, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000c5e:	6863      	ldr	r3, [r4, #4]
 8000c60:	490e      	ldr	r1, [pc, #56]	; (8000c9c <MX_TIM1_Init+0xa8>)
 8000c62:	400b      	ands	r3, r1
 8000c64:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c66:	68a3      	ldr	r3, [r4, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c68:	2101      	movs	r1, #1
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000c6a:	4393      	bics	r3, r2
 8000c6c:	60a3      	str	r3, [r4, #8]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000c6e:	2302      	movs	r3, #2
 8000c70:	425b      	negs	r3, r3
 8000c72:	6123      	str	r3, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000c74:	68e2      	ldr	r2, [r4, #12]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	60e2      	str	r2, [r4, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6023      	str	r3, [r4, #0]

  /* Enable counter */
  LL_TIM_EnableCounter(TIM1);
  /* USER CODE END TIM1_Init 2 */

}
 8000c80:	b007      	add	sp, #28
 8000c82:	bd30      	pop	{r4, r5, pc}
 8000c84:	40021000 	.word	0x40021000
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	ffff00ff 	.word	0xffff00ff
 8000c90:	000012bf 	.word	0x000012bf
 8000c94:	40012c00 	.word	0x40012c00
 8000c98:	fffebff8 	.word	0xfffebff8
 8000c9c:	ff0fffff 	.word	0xff0fffff

08000ca0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ca4:	ac01      	add	r4, sp, #4
 8000ca6:	2214      	movs	r2, #20
 8000ca8:	2100      	movs	r1, #0
 8000caa:	0020      	movs	r0, r4
 8000cac:	f000 fc73 	bl	8001596 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8000cb0:	2080      	movs	r0, #128	; 0x80
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <MX_TIM17_Init+0x68>)
 8000cb4:	02c0      	lsls	r0, r0, #11
 8000cb6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000cb8:	4301      	orrs	r1, r0
 8000cba:	6411      	str	r1, [r2, #64]	; 0x40
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	21c5      	movs	r1, #197	; 0xc5
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000cbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cc0:	0089      	lsls	r1, r1, #2
 8000cc2:	4003      	ands	r3, r0
 8000cc4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000cc6:	9b00      	ldr	r3, [sp, #0]
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_TIM17_Init+0x6c>)
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_TIM17_Init+0x70>)
 8000ccc:	585a      	ldr	r2, [r3, r1]
 8000cce:	4002      	ands	r2, r0
 8000cd0:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	03d2      	lsls	r2, r2, #15
 8000cd6:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(TIM17_IRQn);

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8000cd8:	232f      	movs	r3, #47	; 0x2f
 8000cda:	8023      	strh	r3, [r4, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000cdc:	2300      	movs	r3, #0
  TIM_InitStruct.Autoreload = 65535;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  TIM_InitStruct.RepetitionCounter = 0;
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000cde:	4d0d      	ldr	r5, [pc, #52]	; (8000d14 <MX_TIM17_Init+0x74>)
  TIM_InitStruct.Autoreload = 65535;
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <MX_TIM17_Init+0x78>)
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	0028      	movs	r0, r5
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ce6:	6063      	str	r3, [r4, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000ce8:	60a2      	str	r2, [r4, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000cea:	60e3      	str	r3, [r4, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000cec:	6123      	str	r3, [r4, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000cee:	f000 fb39 	bl	8001364 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cf2:	2280      	movs	r2, #128	; 0x80
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	4393      	bics	r3, r2
 8000cf8:	602b      	str	r3, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cfa:	682b      	ldr	r3, [r5, #0]
 8000cfc:	3a7f      	subs	r2, #127	; 0x7f
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	602b      	str	r3, [r5, #0]
  LL_TIM_DisableARRPreload(TIM17);
  /* USER CODE BEGIN TIM17_Init 2 */
  LL_TIM_EnableCounter(TIM17);
  /* USER CODE END TIM17_Init 2 */

}
 8000d02:	b007      	add	sp, #28
 8000d04:	bd30      	pop	{r4, r5, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	ff00ffff 	.word	0xff00ffff
 8000d14:	40014800 	.word	0x40014800
 8000d18:	0000ffff 	.word	0x0000ffff

08000d1c <TimerUpdate_Callback>:
  * @param  None
  * @retval None
  */
void TimerUpdate_Callback(void)
{
	flg_timer1 = 1;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <TimerUpdate_Callback+0x10>)
 8000d20:	701a      	strb	r2, [r3, #0]
   
   itimecount++;   
 8000d22:	4a03      	ldr	r2, [pc, #12]	; (8000d30 <TimerUpdate_Callback+0x14>)
 8000d24:	6813      	ldr	r3, [r2, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	6013      	str	r3, [r2, #0]
}
 8000d2a:	4770      	bx	lr
 8000d2c:	200010e8 	.word	0x200010e8
 8000d30:	200010ec 	.word	0x200010ec

08000d34 <MX_USART1_UART_Init>:
{

  /* USER CODE BEGIN USART1_Init 0 */

  //switch to tx
  switch2send(USART1); 
 8000d34:	2204      	movs	r2, #4
{
 8000d36:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch2send(USART1); 
 8000d38:	2708      	movs	r7, #8
 8000d3a:	4c51      	ldr	r4, [pc, #324]	; (8000e80 <MX_USART1_UART_Init+0x14c>)
{
 8000d3c:	b091      	sub	sp, #68	; 0x44
  switch2send(USART1); 
 8000d3e:	6823      	ldr	r3, [r4, #0]
   
  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d40:	2100      	movs	r1, #0
  switch2send(USART1); 
 8000d42:	4393      	bics	r3, r2
 8000d44:	6023      	str	r3, [r4, #0]
 8000d46:	6823      	ldr	r3, [r4, #0]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d48:	321c      	adds	r2, #28
  switch2send(USART1); 
 8000d4a:	433b      	orrs	r3, r7
 8000d4c:	6023      	str	r3, [r4, #0]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d4e:	a808      	add	r0, sp, #32
 8000d50:	f000 fc21 	bl	8001596 <memset>
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000d54:	2103      	movs	r1, #3
  SET_BIT(RCC->APBENR2, Periphs);
 8000d56:	2080      	movs	r0, #128	; 0x80
  SET_BIT(RCC->IOPENR, Periphs);
 8000d58:	2501      	movs	r5, #1
 8000d5a:	4b4a      	ldr	r3, [pc, #296]	; (8000e84 <MX_USART1_UART_Init+0x150>)
  SET_BIT(RCC->APBENR2, Periphs);
 8000d5c:	01c0      	lsls	r0, r0, #7
 8000d5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000d60:	2680      	movs	r6, #128	; 0x80
 8000d62:	438a      	bics	r2, r1
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
 8000d66:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d68:	03f6      	lsls	r6, r6, #15
 8000d6a:	4301      	orrs	r1, r0
 8000d6c:	6419      	str	r1, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000d6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	a902      	add	r1, sp, #8
 8000d72:	4002      	ands	r2, r0
 8000d74:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d76:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7a:	20a0      	movs	r0, #160	; 0xa0
 8000d7c:	432a      	orrs	r2, r5
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	402b      	ands	r3, r5
 8000d86:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000d88:	9b00      	ldr	r3, [sp, #0]
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	9202      	str	r2, [sp, #8]
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	2202      	movs	r2, #2
 8000d94:	2301      	movs	r3, #1
 8000d96:	9204      	str	r2, [sp, #16]
 8000d98:	9305      	str	r3, [sp, #20]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2301      	movs	r3, #1
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000da0:	9206      	str	r2, [sp, #24]
 8000da2:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f000 f8a6 	bl	8000ef4 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da8:	21c6      	movs	r1, #198	; 0xc6
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_USART1_UART_Init+0x154>)
 8000dac:	0089      	lsls	r1, r1, #2
 8000dae:	6813      	ldr	r3, [r2, #0]
 8000db0:	4333      	orrs	r3, r6
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4a35      	ldr	r2, [pc, #212]	; (8000e8c <MX_USART1_UART_Init+0x158>)
 8000db6:	5853      	ldr	r3, [r2, r1]
 8000db8:	021b      	lsls	r3, r3, #8
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	051b      	lsls	r3, r3, #20
 8000dc2:	6013      	str	r3, [r2, #0]
  NVIC_EnableIRQ(USART1_IRQn);

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_USART1_UART_Init+0x15c>)
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART1, &USART_InitStruct);
 8000dc8:	0020      	movs	r0, r4
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000dca:	9208      	str	r2, [sp, #32]
 8000dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	920a      	str	r2, [sp, #40]	; 0x28
 8000dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	230c      	movs	r3, #12
 8000dda:	920c      	str	r2, [sp, #48]	; 0x30
 8000ddc:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dde:	2300      	movs	r3, #0
  LL_USART_Init(USART1, &USART_InitStruct);
 8000de0:	a908      	add	r1, sp, #32
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000de2:	930f      	str	r3, [sp, #60]	; 0x3c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000de4:	f000 fafe 	bl	80013e4 <LL_USART_Init>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000de8:	f3ef 8210 	mrs	r2, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dec:	f385 8810 	msr	PRIMASK, r5
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000df0:	68a3      	ldr	r3, [r4, #8]
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	60a3      	str	r3, [r4, #8]
 8000df8:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000dfc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e00:	f385 8810 	msr	PRIMASK, r5
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000e04:	4923      	ldr	r1, [pc, #140]	; (8000e94 <MX_USART1_UART_Init+0x160>)
 8000e06:	68a3      	ldr	r3, [r4, #8]
 8000e08:	400b      	ands	r3, r1
 8000e0a:	60a3      	str	r3, [r4, #8]
 8000e0c:	f382 8810 	msr	PRIMASK, r2
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000e10:	4a21      	ldr	r2, [pc, #132]	; (8000e98 <MX_USART1_UART_Init+0x164>)
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	4013      	ands	r3, r2
 8000e16:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e18:	6863      	ldr	r3, [r4, #4]
 8000e1a:	4a20      	ldr	r2, [pc, #128]	; (8000e9c <MX_USART1_UART_Init+0x168>)
 8000e1c:	4013      	ands	r3, r2
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8000e1e:	2222      	movs	r2, #34	; 0x22
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e20:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8000e22:	68a3      	ldr	r3, [r4, #8]
 8000e24:	4393      	bics	r3, r2
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000e26:	2280      	movs	r2, #128	; 0x80
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8000e28:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000e2a:	68a3      	ldr	r3, [r4, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000e2c:	0392      	lsls	r2, r2, #14
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	60a7      	str	r7, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	431d      	orrs	r5, r3
 8000e36:	6025      	str	r5, [r4, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000e38:	69e3      	ldr	r3, [r4, #28]
 8000e3a:	4213      	tst	r3, r2
 8000e3c:	d0fc      	beq.n	8000e38 <MX_USART1_UART_Init+0x104>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000e3e:	69e3      	ldr	r3, [r4, #28]
 8000e40:	4233      	tst	r3, r6
 8000e42:	d0f9      	beq.n	8000e38 <MX_USART1_UART_Init+0x104>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000e44:	2308      	movs	r3, #8
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000e46:	2202      	movs	r2, #2
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000e48:	6223      	str	r3, [r4, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	6223      	str	r3, [r4, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8000e4e:	3b03      	subs	r3, #3
 8000e50:	6223      	str	r3, [r4, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000e52:	6222      	str	r2, [r4, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000e54:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e58:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	6822      	ldr	r2, [r4, #0]
 8000e60:	4302      	orrs	r2, r0
 8000e62:	6022      	str	r2, [r4, #0]
 8000e64:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000e68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e6c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000e70:	68a2      	ldr	r2, [r4, #8]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60a3      	str	r3, [r4, #8]
 8000e76:	f381 8810 	msr	PRIMASK, r1
  LL_USART_EnableIT_RXNE(USART1);
  LL_USART_EnableIT_ERROR(USART1); 
  
  /* USER CODE END USART1_Init 2 */

}
 8000e7a:	b011      	add	sp, #68	; 0x44
 8000e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	000f4240 	.word	0x000f4240
 8000e94:	f1ffffff 	.word	0xf1ffffff
 8000e98:	dfffffff 	.word	0xdfffffff
 8000e9c:	ffffb7ff 	.word	0xffffb7ff

08000ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea4:	f7ff fe9e 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ea8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eaa:	e003      	b.n	8000eb4 <LoopCopyDataInit>

08000eac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000eae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000eb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eb2:	3104      	adds	r1, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000eb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ebc:	d3f6      	bcc.n	8000eac <CopyDataInit>
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ec0:	e002      	b.n	8000ec8 <LoopFillZerobss>

08000ec2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ec4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec6:	3204      	adds	r2, #4

08000ec8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <LoopForever+0x16>)
  cmp r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ecc:	d3f9      	bcc.n	8000ec2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ece:	f000 fb35 	bl	800153c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed2:	f7ff fce3 	bl	800089c <main>

08000ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
  ldr   r0, =_estack
 8000ed8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000edc:	0800165c 	.word	0x0800165c
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ee4:	20000804 	.word	0x20000804
  ldr r2, =_sbss
 8000ee8:	20000804 	.word	0x20000804
  ldr r3, = _ebss
 8000eec:	200010f4 	.word	0x200010f4

08000ef0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_IRQHandler>
	...

08000ef4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	46de      	mov	lr, fp
 8000ef8:	4657      	mov	r7, sl
 8000efa:	464e      	mov	r6, r9
 8000efc:	4645      	mov	r5, r8
 8000efe:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f00:	680f      	ldr	r7, [r1, #0]
{
 8000f02:	4681      	mov	r9, r0
 8000f04:	468b      	mov	fp, r1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f06:	0038      	movs	r0, r7
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000f08:	221f      	movs	r2, #31
 8000f0a:	b085      	sub	sp, #20
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f0c:	087b      	lsrs	r3, r7, #1
 8000f0e:	d007      	beq.n	8000f20 <LL_GPIO_Init+0x2c>
    result |= value & 1U;
 8000f10:	2401      	movs	r4, #1
 8000f12:	0021      	movs	r1, r4
    result <<= 1U;
 8000f14:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8000f16:	4019      	ands	r1, r3
 8000f18:	4308      	orrs	r0, r1
    s--;
 8000f1a:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	d1f8      	bne.n	8000f12 <LL_GPIO_Init+0x1e>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000f20:	4090      	lsls	r0, r2
  if (value == 0U)
 8000f22:	d100      	bne.n	8000f26 <LL_GPIO_Init+0x32>
 8000f24:	e129      	b.n	800117a <LL_GPIO_Init+0x286>
  return __builtin_clz(value);
 8000f26:	f7ff f97b 	bl	8000220 <__clzsi2>

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	0006      	movs	r6, r0
 8000f2e:	40f3      	lsrs	r3, r6
 8000f30:	d100      	bne.n	8000f34 <LL_GPIO_Init+0x40>
 8000f32:	e127      	b.n	8001184 <LL_GPIO_Init+0x290>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f34:	465b      	mov	r3, fp
 8000f36:	685b      	ldr	r3, [r3, #4]
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8000f38:	2401      	movs	r4, #1
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	e004      	b.n	8000f4c <LL_GPIO_Init+0x58>
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8000f42:	003b      	movs	r3, r7
    pinpos++;
 8000f44:	3601      	adds	r6, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8000f46:	40f3      	lsrs	r3, r6
 8000f48:	d100      	bne.n	8000f4c <LL_GPIO_Init+0x58>
 8000f4a:	e0be      	b.n	80010ca <LL_GPIO_Init+0x1d6>
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8000f4c:	0023      	movs	r3, r4
 8000f4e:	003d      	movs	r5, r7
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	401d      	ands	r5, r3
    if (currentpin != 0U)
 8000f54:	421f      	tst	r7, r3
 8000f56:	d0f4      	beq.n	8000f42 <LL_GPIO_Init+0x4e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000f58:	464b      	mov	r3, r9
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	469a      	mov	sl, r3
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f5e:	086b      	lsrs	r3, r5, #1
 8000f60:	4698      	mov	r8, r3
 8000f62:	d100      	bne.n	8000f66 <LL_GPIO_Init+0x72>
 8000f64:	e0fb      	b.n	800115e <LL_GPIO_Init+0x26a>
 8000f66:	0028      	movs	r0, r5
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000f68:	221f      	movs	r2, #31
    result |= value & 1U;
 8000f6a:	0021      	movs	r1, r4
    result <<= 1U;
 8000f6c:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8000f6e:	4019      	ands	r1, r3
 8000f70:	4308      	orrs	r0, r1
    s--;
 8000f72:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	d1f8      	bne.n	8000f6a <LL_GPIO_Init+0x76>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000f78:	4090      	lsls	r0, r2
  if (value == 0U)
 8000f7a:	d007      	beq.n	8000f8c <LL_GPIO_Init+0x98>
  return __builtin_clz(value);
 8000f7c:	f7ff f950 	bl	8000220 <__clzsi2>
 8000f80:	2303      	movs	r3, #3
 8000f82:	0040      	lsls	r0, r0, #1
 8000f84:	4652      	mov	r2, sl
 8000f86:	4083      	lsls	r3, r0
 8000f88:	439a      	bics	r2, r3
 8000f8a:	4692      	mov	sl, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f8c:	4643      	mov	r3, r8
 8000f8e:	0028      	movs	r0, r5
 8000f90:	221f      	movs	r2, #31
    result |= value & 1U;
 8000f92:	0021      	movs	r1, r4
    result <<= 1U;
 8000f94:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8000f96:	4019      	ands	r1, r3
 8000f98:	4308      	orrs	r0, r1
    s--;
 8000f9a:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000f9c:	085b      	lsrs	r3, r3, #1
 8000f9e:	d1f8      	bne.n	8000f92 <LL_GPIO_Init+0x9e>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000fa0:	4090      	lsls	r0, r2
  if (value == 0U)
 8000fa2:	d100      	bne.n	8000fa6 <LL_GPIO_Init+0xb2>
 8000fa4:	e0d7      	b.n	8001156 <LL_GPIO_Init+0x262>
  return __builtin_clz(value);
 8000fa6:	f7ff f93b 	bl	8000220 <__clzsi2>
 8000faa:	0040      	lsls	r0, r0, #1
 8000fac:	9b01      	ldr	r3, [sp, #4]
 8000fae:	4652      	mov	r2, sl
 8000fb0:	4083      	lsls	r3, r0
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	464a      	mov	r2, r9
 8000fb6:	6013      	str	r3, [r2, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fb8:	9b03      	ldr	r3, [sp, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d800      	bhi.n	8000fc0 <LL_GPIO_Init+0xcc>
 8000fbe:	e098      	b.n	80010f2 <LL_GPIO_Init+0x1fe>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000fc0:	465b      	mov	r3, fp
 8000fc2:	691b      	ldr	r3, [r3, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000fc4:	0028      	movs	r0, r5
 8000fc6:	9302      	str	r3, [sp, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fc8:	464b      	mov	r3, r9
 8000fca:	68db      	ldr	r3, [r3, #12]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000fcc:	221f      	movs	r2, #31
 8000fce:	469a      	mov	sl, r3
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000fd0:	4643      	mov	r3, r8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <LL_GPIO_Init+0xe4>
 8000fd6:	e0c9      	b.n	800116c <LL_GPIO_Init+0x278>
    result |= value & 1U;
 8000fd8:	0021      	movs	r1, r4
    result <<= 1U;
 8000fda:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8000fdc:	4019      	ands	r1, r3
 8000fde:	4308      	orrs	r0, r1
    s--;
 8000fe0:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	d1f8      	bne.n	8000fd8 <LL_GPIO_Init+0xe4>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000fe6:	4090      	lsls	r0, r2
  if (value == 0U)
 8000fe8:	d007      	beq.n	8000ffa <LL_GPIO_Init+0x106>
  return __builtin_clz(value);
 8000fea:	f7ff f919 	bl	8000220 <__clzsi2>
 8000fee:	2303      	movs	r3, #3
 8000ff0:	0040      	lsls	r0, r0, #1
 8000ff2:	4652      	mov	r2, sl
 8000ff4:	4083      	lsls	r3, r0
 8000ff6:	439a      	bics	r2, r3
 8000ff8:	4692      	mov	sl, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000ffa:	4643      	mov	r3, r8
 8000ffc:	0028      	movs	r0, r5
 8000ffe:	221f      	movs	r2, #31
    result |= value & 1U;
 8001000:	0021      	movs	r1, r4
    result <<= 1U;
 8001002:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8001004:	4019      	ands	r1, r3
 8001006:	4308      	orrs	r0, r1
    s--;
 8001008:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	d1f8      	bne.n	8001000 <LL_GPIO_Init+0x10c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800100e:	4090      	lsls	r0, r2
  if (value == 0U)
 8001010:	d100      	bne.n	8001014 <LL_GPIO_Init+0x120>
 8001012:	e0a2      	b.n	800115a <LL_GPIO_Init+0x266>
  return __builtin_clz(value);
 8001014:	f7ff f904 	bl	8000220 <__clzsi2>
 8001018:	0040      	lsls	r0, r0, #1
 800101a:	9b02      	ldr	r3, [sp, #8]
 800101c:	4652      	mov	r2, sl
 800101e:	4083      	lsls	r3, r0
 8001020:	4313      	orrs	r3, r2
 8001022:	464a      	mov	r2, r9
 8001024:	60d3      	str	r3, [r2, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001026:	9b01      	ldr	r3, [sp, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d18a      	bne.n	8000f42 <LL_GPIO_Init+0x4e>
  for (value >>= 1U; value != 0U; value >>= 1U)
 800102c:	4643      	mov	r3, r8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d100      	bne.n	8001034 <LL_GPIO_Init+0x140>
 8001032:	e0e9      	b.n	8001208 <LL_GPIO_Init+0x314>
 8001034:	0028      	movs	r0, r5
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001036:	221f      	movs	r2, #31
    result |= value & 1U;
 8001038:	0021      	movs	r1, r4
    result <<= 1U;
 800103a:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 800103c:	4019      	ands	r1, r3
 800103e:	4308      	orrs	r0, r1
    s--;
 8001040:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	d1f8      	bne.n	8001038 <LL_GPIO_Init+0x144>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001046:	4090      	lsls	r0, r2
  if (value == 0U)
 8001048:	d004      	beq.n	8001054 <LL_GPIO_Init+0x160>
  return __builtin_clz(value);
 800104a:	f7ff f8e9 	bl	8000220 <__clzsi2>
        if (POSITION_VAL(currentpin) < 8U)
 800104e:	2807      	cmp	r0, #7
 8001050:	dc00      	bgt.n	8001054 <LL_GPIO_Init+0x160>
 8001052:	e09e      	b.n	8001192 <LL_GPIO_Init+0x29e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001054:	465b      	mov	r3, fp
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	9302      	str	r3, [sp, #8]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800105a:	464b      	mov	r3, r9
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	469a      	mov	sl, r3
 8001060:	0a2b      	lsrs	r3, r5, #8
 8001062:	4698      	mov	r8, r3
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001064:	0a6d      	lsrs	r5, r5, #9
 8001066:	d100      	bne.n	800106a <LL_GPIO_Init+0x176>
 8001068:	e0d1      	b.n	800120e <LL_GPIO_Init+0x31a>
 800106a:	002b      	movs	r3, r5
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800106c:	4640      	mov	r0, r8
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800106e:	221f      	movs	r2, #31
    result |= value & 1U;
 8001070:	0021      	movs	r1, r4
    result <<= 1U;
 8001072:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8001074:	4019      	ands	r1, r3
 8001076:	4308      	orrs	r0, r1
    s--;
 8001078:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	d1f8      	bne.n	8001070 <LL_GPIO_Init+0x17c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800107e:	4090      	lsls	r0, r2
  if (value == 0U)
 8001080:	d007      	beq.n	8001092 <LL_GPIO_Init+0x19e>
  return __builtin_clz(value);
 8001082:	f7ff f8cd 	bl	8000220 <__clzsi2>
 8001086:	230f      	movs	r3, #15
 8001088:	0080      	lsls	r0, r0, #2
 800108a:	4652      	mov	r2, sl
 800108c:	4083      	lsls	r3, r0
 800108e:	439a      	bics	r2, r3
 8001090:	4692      	mov	sl, r2
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001092:	231f      	movs	r3, #31
 8001094:	4642      	mov	r2, r8
    result |= value & 1U;
 8001096:	0021      	movs	r1, r4
    result <<= 1U;
 8001098:	0052      	lsls	r2, r2, #1
    result |= value & 1U;
 800109a:	4029      	ands	r1, r5
 800109c:	430a      	orrs	r2, r1
    s--;
 800109e:	3b01      	subs	r3, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 80010a0:	086d      	lsrs	r5, r5, #1
 80010a2:	d1f8      	bne.n	8001096 <LL_GPIO_Init+0x1a2>
  result <<= s;                        /* shift when v's highest bits are zero */
 80010a4:	0010      	movs	r0, r2
 80010a6:	4098      	lsls	r0, r3
  if (value == 0U)
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d100      	bne.n	80010ae <LL_GPIO_Init+0x1ba>
 80010ac:	e0aa      	b.n	8001204 <LL_GPIO_Init+0x310>
  return __builtin_clz(value);
 80010ae:	f7ff f8b7 	bl	8000220 <__clzsi2>
 80010b2:	0080      	lsls	r0, r0, #2
 80010b4:	9b02      	ldr	r3, [sp, #8]
 80010b6:	4652      	mov	r2, sl
 80010b8:	4083      	lsls	r3, r0
 80010ba:	4313      	orrs	r3, r2
 80010bc:	464a      	mov	r2, r9
 80010be:	6253      	str	r3, [r2, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80010c0:	003b      	movs	r3, r7
    pinpos++;
 80010c2:	3601      	adds	r6, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80010c4:	40f3      	lsrs	r3, r6
 80010c6:	d000      	beq.n	80010ca <LL_GPIO_Init+0x1d6>
 80010c8:	e740      	b.n	8000f4c <LL_GPIO_Init+0x58>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010ca:	9b03      	ldr	r3, [sp, #12]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d808      	bhi.n	80010e2 <LL_GPIO_Init+0x1ee>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010d0:	464b      	mov	r3, r9
 80010d2:	465a      	mov	r2, fp
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	68d2      	ldr	r2, [r2, #12]
 80010d8:	43bb      	bics	r3, r7
 80010da:	4357      	muls	r7, r2
 80010dc:	431f      	orrs	r7, r3
 80010de:	464b      	mov	r3, r9
 80010e0:	605f      	str	r7, [r3, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 80010e2:	2000      	movs	r0, #0
 80010e4:	b005      	add	sp, #20
 80010e6:	bcf0      	pop	{r4, r5, r6, r7}
 80010e8:	46bb      	mov	fp, r7
 80010ea:	46b2      	mov	sl, r6
 80010ec:	46a9      	mov	r9, r5
 80010ee:	46a0      	mov	r8, r4
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010f2:	465b      	mov	r3, fp
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	9302      	str	r3, [sp, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80010f8:	6893      	ldr	r3, [r2, #8]
 80010fa:	469a      	mov	sl, r3
  for (value >>= 1U; value != 0U; value >>= 1U)
 80010fc:	4643      	mov	r3, r8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <LL_GPIO_Init+0x210>
 8001102:	e078      	b.n	80011f6 <LL_GPIO_Init+0x302>
 8001104:	0028      	movs	r0, r5
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001106:	221f      	movs	r2, #31
    result |= value & 1U;
 8001108:	0021      	movs	r1, r4
    result <<= 1U;
 800110a:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 800110c:	4019      	ands	r1, r3
 800110e:	4308      	orrs	r0, r1
    s--;
 8001110:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001112:	085b      	lsrs	r3, r3, #1
 8001114:	d1f8      	bne.n	8001108 <LL_GPIO_Init+0x214>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001116:	4090      	lsls	r0, r2
  if (value == 0U)
 8001118:	d007      	beq.n	800112a <LL_GPIO_Init+0x236>
  return __builtin_clz(value);
 800111a:	f7ff f881 	bl	8000220 <__clzsi2>
 800111e:	2303      	movs	r3, #3
 8001120:	0040      	lsls	r0, r0, #1
 8001122:	4652      	mov	r2, sl
 8001124:	4083      	lsls	r3, r0
 8001126:	439a      	bics	r2, r3
 8001128:	4692      	mov	sl, r2
  for (value >>= 1U; value != 0U; value >>= 1U)
 800112a:	4643      	mov	r3, r8
 800112c:	0028      	movs	r0, r5
 800112e:	221f      	movs	r2, #31
    result |= value & 1U;
 8001130:	0021      	movs	r1, r4
    result <<= 1U;
 8001132:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 8001134:	4019      	ands	r1, r3
 8001136:	4308      	orrs	r0, r1
    s--;
 8001138:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	d1f8      	bne.n	8001130 <LL_GPIO_Init+0x23c>
  result <<= s;                        /* shift when v's highest bits are zero */
 800113e:	4090      	lsls	r0, r2
  if (value == 0U)
 8001140:	d025      	beq.n	800118e <LL_GPIO_Init+0x29a>
  return __builtin_clz(value);
 8001142:	f7ff f86d 	bl	8000220 <__clzsi2>
 8001146:	0040      	lsls	r0, r0, #1
 8001148:	9b02      	ldr	r3, [sp, #8]
 800114a:	4652      	mov	r2, sl
 800114c:	4083      	lsls	r3, r0
 800114e:	4313      	orrs	r3, r2
 8001150:	464a      	mov	r2, r9
 8001152:	6093      	str	r3, [r2, #8]
}
 8001154:	e734      	b.n	8000fc0 <LL_GPIO_Init+0xcc>
 8001156:	2040      	movs	r0, #64	; 0x40
 8001158:	e728      	b.n	8000fac <LL_GPIO_Init+0xb8>
 800115a:	2040      	movs	r0, #64	; 0x40
 800115c:	e75d      	b.n	800101a <LL_GPIO_Init+0x126>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800115e:	4653      	mov	r3, sl
 8001160:	2203      	movs	r2, #3
 8001162:	2080      	movs	r0, #128	; 0x80
 8001164:	4393      	bics	r3, r2
 8001166:	469a      	mov	sl, r3
 8001168:	0600      	lsls	r0, r0, #24
 800116a:	e71c      	b.n	8000fa6 <LL_GPIO_Init+0xb2>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800116c:	4653      	mov	r3, sl
 800116e:	2203      	movs	r2, #3
 8001170:	2080      	movs	r0, #128	; 0x80
 8001172:	4393      	bics	r3, r2
 8001174:	469a      	mov	sl, r3
 8001176:	0600      	lsls	r0, r0, #24
 8001178:	e74c      	b.n	8001014 <LL_GPIO_Init+0x120>
 800117a:	2620      	movs	r6, #32
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800117c:	003b      	movs	r3, r7
 800117e:	40f3      	lsrs	r3, r6
 8001180:	d000      	beq.n	8001184 <LL_GPIO_Init+0x290>
 8001182:	e6d7      	b.n	8000f34 <LL_GPIO_Init+0x40>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001184:	465b      	mov	r3, fp
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	3b01      	subs	r3, #1
 800118a:	9303      	str	r3, [sp, #12]
 800118c:	e79d      	b.n	80010ca <LL_GPIO_Init+0x1d6>
 800118e:	2040      	movs	r0, #64	; 0x40
 8001190:	e7da      	b.n	8001148 <LL_GPIO_Init+0x254>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001192:	465b      	mov	r3, fp
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	9302      	str	r3, [sp, #8]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001198:	464b      	mov	r3, r9
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	469a      	mov	sl, r3
  for (value >>= 1U; value != 0U; value >>= 1U)
 800119e:	4643      	mov	r3, r8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d044      	beq.n	800122e <LL_GPIO_Init+0x33a>
 80011a4:	0028      	movs	r0, r5
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80011a6:	221f      	movs	r2, #31
    result |= value & 1U;
 80011a8:	0021      	movs	r1, r4
    result <<= 1U;
 80011aa:	0040      	lsls	r0, r0, #1
    result |= value & 1U;
 80011ac:	4019      	ands	r1, r3
 80011ae:	4308      	orrs	r0, r1
    s--;
 80011b0:	3a01      	subs	r2, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	d1f8      	bne.n	80011a8 <LL_GPIO_Init+0x2b4>
  result <<= s;                        /* shift when v's highest bits are zero */
 80011b6:	4090      	lsls	r0, r2
  if (value == 0U)
 80011b8:	d007      	beq.n	80011ca <LL_GPIO_Init+0x2d6>
  return __builtin_clz(value);
 80011ba:	f7ff f831 	bl	8000220 <__clzsi2>
 80011be:	230f      	movs	r3, #15
 80011c0:	0080      	lsls	r0, r0, #2
 80011c2:	4652      	mov	r2, sl
 80011c4:	4083      	lsls	r3, r0
 80011c6:	439a      	bics	r2, r3
 80011c8:	4692      	mov	sl, r2
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80011ca:	231f      	movs	r3, #31
 80011cc:	4642      	mov	r2, r8
    result |= value & 1U;
 80011ce:	0021      	movs	r1, r4
    result <<= 1U;
 80011d0:	006d      	lsls	r5, r5, #1
    result |= value & 1U;
 80011d2:	4011      	ands	r1, r2
 80011d4:	430d      	orrs	r5, r1
    s--;
 80011d6:	3b01      	subs	r3, #1
  for (value >>= 1U; value != 0U; value >>= 1U)
 80011d8:	0852      	lsrs	r2, r2, #1
 80011da:	d1f8      	bne.n	80011ce <LL_GPIO_Init+0x2da>
  result <<= s;                        /* shift when v's highest bits are zero */
 80011dc:	0028      	movs	r0, r5
 80011de:	4098      	lsls	r0, r3
  if (value == 0U)
 80011e0:	d023      	beq.n	800122a <LL_GPIO_Init+0x336>
  return __builtin_clz(value);
 80011e2:	f7ff f81d 	bl	8000220 <__clzsi2>
 80011e6:	0080      	lsls	r0, r0, #2
 80011e8:	9b02      	ldr	r3, [sp, #8]
 80011ea:	4652      	mov	r2, sl
 80011ec:	4083      	lsls	r3, r0
 80011ee:	4313      	orrs	r3, r2
 80011f0:	464a      	mov	r2, r9
 80011f2:	6213      	str	r3, [r2, #32]
}
 80011f4:	e6a5      	b.n	8000f42 <LL_GPIO_Init+0x4e>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80011f6:	4653      	mov	r3, sl
 80011f8:	2203      	movs	r2, #3
 80011fa:	2080      	movs	r0, #128	; 0x80
 80011fc:	4393      	bics	r3, r2
 80011fe:	469a      	mov	sl, r3
 8001200:	0600      	lsls	r0, r0, #24
 8001202:	e79e      	b.n	8001142 <LL_GPIO_Init+0x24e>
  if (value == 0U)
 8001204:	2080      	movs	r0, #128	; 0x80
 8001206:	e755      	b.n	80010b4 <LL_GPIO_Init+0x1c0>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001208:	2080      	movs	r0, #128	; 0x80
 800120a:	0600      	lsls	r0, r0, #24
 800120c:	e71d      	b.n	800104a <LL_GPIO_Init+0x156>
 800120e:	07dd      	lsls	r5, r3, #31
  if (value == 0U)
 8001210:	07db      	lsls	r3, r3, #31
 8001212:	d5f7      	bpl.n	8001204 <LL_GPIO_Init+0x310>
  return __builtin_clz(value);
 8001214:	0028      	movs	r0, r5
 8001216:	f7ff f803 	bl	8000220 <__clzsi2>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800121a:	230f      	movs	r3, #15
 800121c:	0080      	lsls	r0, r0, #2
 800121e:	4083      	lsls	r3, r0
 8001220:	4652      	mov	r2, sl
 8001222:	439a      	bics	r2, r3
 8001224:	4692      	mov	sl, r2
  result <<= s;                        /* shift when v's highest bits are zero */
 8001226:	0028      	movs	r0, r5
 8001228:	e73e      	b.n	80010a8 <LL_GPIO_Init+0x1b4>
 800122a:	2080      	movs	r0, #128	; 0x80
 800122c:	e7dc      	b.n	80011e8 <LL_GPIO_Init+0x2f4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800122e:	4653      	mov	r3, sl
 8001230:	220f      	movs	r2, #15
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	4393      	bics	r3, r2
 8001236:	469a      	mov	sl, r3
 8001238:	0600      	lsls	r0, r0, #24
 800123a:	e7d2      	b.n	80011e2 <LL_GPIO_Init+0x2ee>

0800123c <LL_RCC_GetSystemClocksFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800123c:	2338      	movs	r3, #56	; 0x38
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <LL_RCC_GetSystemClocksFreq+0x48>)
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001240:	b530      	push	{r4, r5, lr}
 8001242:	6891      	ldr	r1, [r2, #8]
 8001244:	400b      	ands	r3, r1
{
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001246:	2b08      	cmp	r3, #8
 8001248:	d01a      	beq.n	8001280 <LL_RCC_GetSystemClocksFreq+0x44>
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
      break;
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800124a:	6812      	ldr	r2, [r2, #0]
      frequency = (HSI_VALUE / hsidiv);
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <LL_RCC_GetSystemClocksFreq+0x4c>)
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800124e:	0492      	lsls	r2, r2, #18
 8001250:	0f52      	lsrs	r2, r2, #29
      frequency = (HSI_VALUE / hsidiv);
 8001252:	40d3      	lsrs	r3, r2
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001254:	241f      	movs	r4, #31
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001256:	4d0b      	ldr	r5, [pc, #44]	; (8001284 <LL_RCC_GetSystemClocksFreq+0x48>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001258:	6003      	str	r3, [r0, #0]
 800125a:	68aa      	ldr	r2, [r5, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800125c:	490b      	ldr	r1, [pc, #44]	; (800128c <LL_RCC_GetSystemClocksFreq+0x50>)
 800125e:	0512      	lsls	r2, r2, #20
 8001260:	0f12      	lsrs	r2, r2, #28
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	5851      	ldr	r1, [r2, r1]
 8001266:	4021      	ands	r1, r4
 8001268:	40cb      	lsrs	r3, r1
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800126a:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800126c:	68aa      	ldr	r2, [r5, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <LL_RCC_GetSystemClocksFreq+0x54>)
 8001270:	0452      	lsls	r2, r2, #17
 8001272:	0f52      	lsrs	r2, r2, #29
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	5852      	ldr	r2, [r2, r1]
 8001278:	4022      	ands	r2, r4
 800127a:	40d3      	lsrs	r3, r2
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800127c:	6083      	str	r3, [r0, #8]
}
 800127e:	bd30      	pop	{r4, r5, pc}
      frequency = HSE_VALUE;
 8001280:	4b01      	ldr	r3, [pc, #4]	; (8001288 <LL_RCC_GetSystemClocksFreq+0x4c>)
 8001282:	e7e7      	b.n	8001254 <LL_RCC_GetSystemClocksFreq+0x18>
 8001284:	40021000 	.word	0x40021000
 8001288:	02dc6c00 	.word	0x02dc6c00
 800128c:	080015c4 	.word	0x080015c4
 8001290:	08001604 	.word	0x08001604

08001294 <LL_RCC_GetUSARTClockFreq>:
{
 8001294:	0003      	movs	r3, r0
 8001296:	b510      	push	{r4, lr}
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001298:	2000      	movs	r0, #0
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800129a:	2b03      	cmp	r3, #3
 800129c:	d000      	beq.n	80012a0 <LL_RCC_GetUSARTClockFreq+0xc>
}
 800129e:	bd10      	pop	{r4, pc}
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSIKER
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <LL_RCC_GetUSARTClockFreq+0xb4>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80012a2:	492a      	ldr	r1, [pc, #168]	; (800134c <LL_RCC_GetUSARTClockFreq+0xb8>)
 80012a4:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80012a6:	4003      	ands	r3, r0
 80012a8:	20c0      	movs	r0, #192	; 0xc0
 80012aa:	0280      	lsls	r0, r0, #10
 80012ac:	4303      	orrs	r3, r0
 80012ae:	428b      	cmp	r3, r1
 80012b0:	d022      	beq.n	80012f8 <LL_RCC_GetUSARTClockFreq+0x64>
 80012b2:	4927      	ldr	r1, [pc, #156]	; (8001350 <LL_RCC_GetUSARTClockFreq+0xbc>)
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d039      	beq.n	800132c <LL_RCC_GetUSARTClockFreq+0x98>
 80012b8:	4926      	ldr	r1, [pc, #152]	; (8001354 <LL_RCC_GetUSARTClockFreq+0xc0>)
 80012ba:	428b      	cmp	r3, r1
 80012bc:	d02b      	beq.n	8001316 <LL_RCC_GetUSARTClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80012be:	2338      	movs	r3, #56	; 0x38
 80012c0:	6891      	ldr	r1, [r2, #8]
 80012c2:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d03a      	beq.n	800133e <LL_RCC_GetUSARTClockFreq+0xaa>
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80012c8:	6813      	ldr	r3, [r2, #0]
      frequency = (HSI_VALUE / hsidiv);
 80012ca:	4823      	ldr	r0, [pc, #140]	; (8001358 <LL_RCC_GetUSARTClockFreq+0xc4>)
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80012cc:	049b      	lsls	r3, r3, #18
 80012ce:	0f5b      	lsrs	r3, r3, #29
      frequency = (HSI_VALUE / hsidiv);
 80012d0:	40d8      	lsrs	r0, r3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012d2:	211f      	movs	r1, #31
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <LL_RCC_GetUSARTClockFreq+0xb4>)
 80012d6:	4c21      	ldr	r4, [pc, #132]	; (800135c <LL_RCC_GetUSARTClockFreq+0xc8>)
 80012d8:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	0512      	lsls	r2, r2, #20
 80012de:	0f12      	lsrs	r2, r2, #28
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	5912      	ldr	r2, [r2, r4]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80012e4:	045b      	lsls	r3, r3, #17
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012e6:	400a      	ands	r2, r1
 80012e8:	40d0      	lsrs	r0, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80012ea:	0f5b      	lsrs	r3, r3, #29
 80012ec:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <LL_RCC_GetUSARTClockFreq+0xcc>)
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	589b      	ldr	r3, [r3, r2]
 80012f2:	400b      	ands	r3, r1
 80012f4:	40d8      	lsrs	r0, r3
        break;
 80012f6:	e7d2      	b.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	0008      	movs	r0, r1
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4018      	ands	r0, r3
 8001302:	4219      	tst	r1, r3
 8001304:	d0cb      	beq.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
  return (READ_BIT(RCC->CR, RCC_CR_HSIKERDIV));
 8001306:	6811      	ldr	r1, [r2, #0]
          usart_frequency = (HSI_VALUE / ((LL_RCC_HSIKER_GetDivider() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <LL_RCC_GetUSARTClockFreq+0xc4>)
 800130a:	0609      	lsls	r1, r1, #24
 800130c:	0f49      	lsrs	r1, r1, #29
 800130e:	3101      	adds	r1, #1
 8001310:	f7fe fefa 	bl	8000108 <__udivsi3>
 8001314:	e7c3      	b.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001316:	2338      	movs	r3, #56	; 0x38
 8001318:	6891      	ldr	r1, [r2, #8]
 800131a:	400b      	ands	r3, r1
  switch (LL_RCC_GetSysClkSource())
 800131c:	2b08      	cmp	r3, #8
 800131e:	d010      	beq.n	8001342 <LL_RCC_GetUSARTClockFreq+0xae>
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001320:	6813      	ldr	r3, [r2, #0]
      frequency = (HSI_VALUE / hsidiv);
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <LL_RCC_GetUSARTClockFreq+0xc4>)
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001324:	049b      	lsls	r3, r3, #18
 8001326:	0f5b      	lsrs	r3, r3, #29
      frequency = (HSI_VALUE / hsidiv);
 8001328:	40d8      	lsrs	r0, r3
      break;
 800132a:	e7b8      	b.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 800132c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800132e:	2202      	movs	r2, #2
 8001330:	0010      	movs	r0, r2
 8001332:	4018      	ands	r0, r3
 8001334:	421a      	tst	r2, r3
 8001336:	d0b2      	beq.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
          usart_frequency = LSE_VALUE;
 8001338:	2080      	movs	r0, #128	; 0x80
 800133a:	0200      	lsls	r0, r0, #8
 800133c:	e7af      	b.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
      frequency = HSE_VALUE;
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <LL_RCC_GetUSARTClockFreq+0xc4>)
 8001340:	e7c7      	b.n	80012d2 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <LL_RCC_GetUSARTClockFreq+0xc4>)
  return usart_frequency;
 8001344:	e7ab      	b.n	800129e <LL_RCC_GetUSARTClockFreq+0xa>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40021000 	.word	0x40021000
 800134c:	00030002 	.word	0x00030002
 8001350:	00030003 	.word	0x00030003
 8001354:	00030001 	.word	0x00030001
 8001358:	02dc6c00 	.word	0x02dc6c00
 800135c:	080015c4 	.word	0x080015c4
 8001360:	08001604 	.word	0x08001604

08001364 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <LL_TIM_Init+0x68>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001366:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001368:	4290      	cmp	r0, r2
 800136a:	d01f      	beq.n	80013ac <LL_TIM_Init+0x48>
 800136c:	4a18      	ldr	r2, [pc, #96]	; (80013d0 <LL_TIM_Init+0x6c>)
 800136e:	4290      	cmp	r0, r2
 8001370:	d013      	beq.n	800139a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <LL_TIM_Init+0x70>)
 8001374:	4290      	cmp	r0, r2
 8001376:	d014      	beq.n	80013a2 <LL_TIM_Init+0x3e>
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <LL_TIM_Init+0x74>)
 800137a:	4290      	cmp	r0, r2
 800137c:	d01a      	beq.n	80013b4 <LL_TIM_Init+0x50>
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <LL_TIM_Init+0x78>)
 8001380:	4290      	cmp	r0, r2
 8001382:	d017      	beq.n	80013b4 <LL_TIM_Init+0x50>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001384:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001386:	688b      	ldr	r3, [r1, #8]
 8001388:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800138a:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800138c:	6283      	str	r3, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800138e:	2201      	movs	r2, #1
 8001390:	6943      	ldr	r3, [r0, #20]
 8001392:	4313      	orrs	r3, r2
 8001394:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001396:	2000      	movs	r0, #0
 8001398:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800139a:	2270      	movs	r2, #112	; 0x70
 800139c:	4393      	bics	r3, r2
 800139e:	684a      	ldr	r2, [r1, #4]
 80013a0:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <LL_TIM_Init+0x7c>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	68ca      	ldr	r2, [r1, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	e7eb      	b.n	8001384 <LL_TIM_Init+0x20>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80013ac:	2270      	movs	r2, #112	; 0x70
 80013ae:	4393      	bics	r3, r2
 80013b0:	684a      	ldr	r2, [r1, #4]
 80013b2:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <LL_TIM_Init+0x7c>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	68ca      	ldr	r2, [r1, #12]
 80013ba:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80013bc:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80013be:	688b      	ldr	r3, [r1, #8]
 80013c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80013c2:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80013c4:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80013c6:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80013c8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80013ca:	e7e0      	b.n	800138e <LL_TIM_Init+0x2a>
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	40000400 	.word	0x40000400
 80013d4:	40002000 	.word	0x40002000
 80013d8:	40014400 	.word	0x40014400
 80013dc:	40014800 	.word	0x40014800
 80013e0:	fffffcff 	.word	0xfffffcff

080013e4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	46c6      	mov	lr, r8
 80013e8:	b500      	push	{lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80013ea:	6803      	ldr	r3, [r0, #0]
 80013ec:	0004      	movs	r4, r0
 80013ee:	000d      	movs	r5, r1
  ErrorStatus status = ERROR;
 80013f0:	2701      	movs	r7, #1
{
 80013f2:	b084      	sub	sp, #16
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80013f4:	07db      	lsls	r3, r3, #31
 80013f6:	d425      	bmi.n	8001444 <LL_USART_Init+0x60>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80013f8:	688b      	ldr	r3, [r1, #8]
 80013fa:	6909      	ldr	r1, [r1, #16]
 80013fc:	6802      	ldr	r2, [r0, #0]
 80013fe:	430b      	orrs	r3, r1
 8001400:	6969      	ldr	r1, [r5, #20]
 8001402:	430b      	orrs	r3, r1
 8001404:	69e9      	ldr	r1, [r5, #28]
 8001406:	430b      	orrs	r3, r1
 8001408:	492f      	ldr	r1, [pc, #188]	; (80014c8 <LL_USART_Init+0xe4>)
 800140a:	400a      	ands	r2, r1
 800140c:	4313      	orrs	r3, r2
 800140e:	6003      	str	r3, [r0, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001410:	6843      	ldr	r3, [r0, #4]
 8001412:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <LL_USART_Init+0xe8>)
 8001414:	4013      	ands	r3, r2
 8001416:	68ea      	ldr	r2, [r5, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	6043      	str	r3, [r0, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800141c:	6883      	ldr	r3, [r0, #8]
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <LL_USART_Init+0xec>)
 8001420:	4013      	ands	r3, r2
 8001422:	69aa      	ldr	r2, [r5, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	6083      	str	r3, [r0, #8]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <LL_USART_Init+0xf0>)
 800142a:	4298      	cmp	r0, r3
 800142c:	d00f      	beq.n	800144e <LL_USART_Init+0x6a>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <LL_USART_Init+0xf4>)
 8001430:	4298      	cmp	r0, r3
 8001432:	d018      	beq.n	8001466 <LL_USART_Init+0x82>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001434:	682e      	ldr	r6, [r5, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001436:	220f      	movs	r2, #15
 8001438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800143a:	0436      	lsls	r6, r6, #16
 800143c:	4393      	bics	r3, r2
 800143e:	0c36      	lsrs	r6, r6, #16
 8001440:	431e      	orrs	r6, r3
 8001442:	62e6      	str	r6, [r4, #44]	; 0x2c
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001444:	0038      	movs	r0, r7
 8001446:	b004      	add	sp, #16
 8001448:	bc80      	pop	{r7}
 800144a:	46b8      	mov	r8, r7
 800144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800144e:	2003      	movs	r0, #3
 8001450:	f7ff ff20 	bl	8001294 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001454:	2800      	cmp	r0, #0
 8001456:	d003      	beq.n	8001460 <LL_USART_Init+0x7c>
        && (USART_InitStruct->BaudRate != 0U))
 8001458:	686b      	ldr	r3, [r5, #4]
 800145a:	4698      	mov	r8, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d107      	bne.n	8001470 <LL_USART_Init+0x8c>
  ErrorStatus status = ERROR;
 8001460:	2701      	movs	r7, #1
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001462:	682e      	ldr	r6, [r5, #0]
 8001464:	e7e7      	b.n	8001436 <LL_USART_Init+0x52>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001466:	a801      	add	r0, sp, #4
 8001468:	f7ff fee8 	bl	800123c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800146c:	9803      	ldr	r0, [sp, #12]
 800146e:	e7f1      	b.n	8001454 <LL_USART_Init+0x70>
      LL_USART_SetBaudRate(USARTx,
 8001470:	682e      	ldr	r6, [r5, #0]
      status = SUCCESS;
 8001472:	2700      	movs	r7, #0
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001474:	2e0b      	cmp	r6, #11
 8001476:	d8de      	bhi.n	8001436 <LL_USART_Init+0x52>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	69ea      	ldr	r2, [r5, #28]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	429a      	cmp	r2, r3
 8001480:	d00e      	beq.n	80014a0 <LL_USART_Init+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <LL_USART_Init+0xf8>)
 8001484:	00b2      	lsls	r2, r6, #2
 8001486:	58d1      	ldr	r1, [r2, r3]
 8001488:	f7fe fe3e 	bl	8000108 <__udivsi3>
 800148c:	4643      	mov	r3, r8
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	18c0      	adds	r0, r0, r3
 8001492:	4641      	mov	r1, r8
 8001494:	f7fe fe38 	bl	8000108 <__udivsi3>
 8001498:	0403      	lsls	r3, r0, #16
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	60e3      	str	r3, [r4, #12]
 800149e:	e7ca      	b.n	8001436 <LL_USART_Init+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <LL_USART_Init+0xf8>)
 80014a2:	00b2      	lsls	r2, r6, #2
 80014a4:	58d1      	ldr	r1, [r2, r3]
 80014a6:	f7fe fe2f 	bl	8000108 <__udivsi3>
 80014aa:	4643      	mov	r3, r8
 80014ac:	0040      	lsls	r0, r0, #1
 80014ae:	085b      	lsrs	r3, r3, #1
 80014b0:	18c0      	adds	r0, r0, r3
 80014b2:	4641      	mov	r1, r8
 80014b4:	f7fe fe28 	bl	8000108 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <LL_USART_Init+0xfc>)
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014ba:	0703      	lsls	r3, r0, #28
    brrtemp = usartdiv & 0xFFF0U;
 80014bc:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014be:	0f5b      	lsrs	r3, r3, #29
 80014c0:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 80014c2:	60e3      	str	r3, [r4, #12]
 80014c4:	e7b7      	b.n	8001436 <LL_USART_Init+0x52>
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	efff69f3 	.word	0xefff69f3
 80014cc:	ffffcfff 	.word	0xffffcfff
 80014d0:	fffffcff 	.word	0xfffffcff
 80014d4:	40013800 	.word	0x40013800
 80014d8:	40004400 	.word	0x40004400
 80014dc:	08001624 	.word	0x08001624
 80014e0:	0000fff0 	.word	0x0000fff0

080014e4 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80014e4:	21fa      	movs	r1, #250	; 0xfa
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80014e6:	b510      	push	{r4, lr}
 80014e8:	0089      	lsls	r1, r1, #2
 80014ea:	f7fe fe0d 	bl	8000108 <__udivsi3>
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80014ee:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <LL_Init1msTick+0x1c>)
 80014f2:	3801      	subs	r0, #1
 80014f4:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80014f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f8:	3205      	adds	r2, #5
 80014fa:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80014fc:	bd10      	pop	{r4, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	e000e010 	.word	0xe000e010

08001504 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <LL_mDelay+0x28>)
{
 8001506:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	9301      	str	r3, [sp, #4]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800150c:	9b01      	ldr	r3, [sp, #4]
  tmpDelay  = Delay;
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
  {
    tmpDelay ++;
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	1e59      	subs	r1, r3, #1
 8001512:	418b      	sbcs	r3, r1
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001514:	2180      	movs	r1, #128	; 0x80
    tmpDelay ++;
 8001516:	18c0      	adds	r0, r0, r3
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001518:	0249      	lsls	r1, r1, #9
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	420b      	tst	r3, r1
 800151e:	d0fc      	beq.n	800151a <LL_mDelay+0x16>
    {
      tmpDelay --;
 8001520:	3801      	subs	r0, #1
 8001522:	2800      	cmp	r0, #0
 8001524:	d1f9      	bne.n	800151a <LL_mDelay+0x16>
    }
  }
}
 8001526:	b002      	add	sp, #8
 8001528:	4770      	bx	lr
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	e000e010 	.word	0xe000e010

08001530 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001530:	4b01      	ldr	r3, [pc, #4]	; (8001538 <LL_SetSystemCoreClock+0x8>)
 8001532:	6018      	str	r0, [r3, #0]
}
 8001534:	4770      	bx	lr
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	20000800 	.word	0x20000800

0800153c <__libc_init_array>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	2600      	movs	r6, #0
 8001540:	4d0c      	ldr	r5, [pc, #48]	; (8001574 <__libc_init_array+0x38>)
 8001542:	4c0d      	ldr	r4, [pc, #52]	; (8001578 <__libc_init_array+0x3c>)
 8001544:	1b64      	subs	r4, r4, r5
 8001546:	10a4      	asrs	r4, r4, #2
 8001548:	42a6      	cmp	r6, r4
 800154a:	d109      	bne.n	8001560 <__libc_init_array+0x24>
 800154c:	2600      	movs	r6, #0
 800154e:	f000 f82b 	bl	80015a8 <_init>
 8001552:	4d0a      	ldr	r5, [pc, #40]	; (800157c <__libc_init_array+0x40>)
 8001554:	4c0a      	ldr	r4, [pc, #40]	; (8001580 <__libc_init_array+0x44>)
 8001556:	1b64      	subs	r4, r4, r5
 8001558:	10a4      	asrs	r4, r4, #2
 800155a:	42a6      	cmp	r6, r4
 800155c:	d105      	bne.n	800156a <__libc_init_array+0x2e>
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	00b3      	lsls	r3, r6, #2
 8001562:	58eb      	ldr	r3, [r5, r3]
 8001564:	4798      	blx	r3
 8001566:	3601      	adds	r6, #1
 8001568:	e7ee      	b.n	8001548 <__libc_init_array+0xc>
 800156a:	00b3      	lsls	r3, r6, #2
 800156c:	58eb      	ldr	r3, [r5, r3]
 800156e:	4798      	blx	r3
 8001570:	3601      	adds	r6, #1
 8001572:	e7f2      	b.n	800155a <__libc_init_array+0x1e>
 8001574:	08001654 	.word	0x08001654
 8001578:	08001654 	.word	0x08001654
 800157c:	08001654 	.word	0x08001654
 8001580:	08001658 	.word	0x08001658

08001584 <memcpy>:
 8001584:	2300      	movs	r3, #0
 8001586:	b510      	push	{r4, lr}
 8001588:	429a      	cmp	r2, r3
 800158a:	d100      	bne.n	800158e <memcpy+0xa>
 800158c:	bd10      	pop	{r4, pc}
 800158e:	5ccc      	ldrb	r4, [r1, r3]
 8001590:	54c4      	strb	r4, [r0, r3]
 8001592:	3301      	adds	r3, #1
 8001594:	e7f8      	b.n	8001588 <memcpy+0x4>

08001596 <memset>:
 8001596:	0003      	movs	r3, r0
 8001598:	1882      	adds	r2, r0, r2
 800159a:	4293      	cmp	r3, r2
 800159c:	d100      	bne.n	80015a0 <memset+0xa>
 800159e:	4770      	bx	lr
 80015a0:	7019      	strb	r1, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	e7f9      	b.n	800159a <memset+0x4>
	...

080015a8 <_init>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ae:	bc08      	pop	{r3}
 80015b0:	469e      	mov	lr, r3
 80015b2:	4770      	bx	lr

080015b4 <_fini>:
 80015b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ba:	bc08      	pop	{r3}
 80015bc:	469e      	mov	lr, r3
 80015be:	4770      	bx	lr
