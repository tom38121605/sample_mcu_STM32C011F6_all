
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f5c  08001f5c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001f5c  08001f5c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f5c  08001f5c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f5c  08001f5c  00011f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001f68  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001f68  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006572  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001656  00000000  00000000  0002659e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00027bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  000282f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e4c0  00000000  00000000  00028930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005ae5  00000000  00000000  00036df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c75f  00000000  00000000  0003c8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00089034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017ac  00000000  00000000  00089084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ea8 	.word	0x08001ea8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001ea8 	.word	0x08001ea8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <LL_IOP_GRP1_EnableClock+0x28>)
 8000266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <LL_IOP_GRP1_EnableClock+0x28>)
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	430a      	orrs	r2, r1
 800026e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000270:	4b04      	ldr	r3, [pc, #16]	; (8000284 <LL_IOP_GRP1_EnableClock+0x28>)
 8000272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	4013      	ands	r3, r2
 8000278:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800027a:	68fb      	ldr	r3, [r7, #12]
}
 800027c:	46c0      	nop			; (mov r8, r8)
 800027e:	46bd      	mov	sp, r7
 8000280:	b004      	add	sp, #16
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40021000 	.word	0x40021000

08000288 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	683a      	ldr	r2, [r7, #0]
 8000296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	46bd      	mov	sp, r7
 800029c:	b002      	add	sp, #8
 800029e:	bd80      	pop	{r7, pc}

080002a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2318      	movs	r3, #24
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f001 fdf2 	bl	8001e98 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 80002b4:	2020      	movs	r0, #32
 80002b6:	f7ff ffd1 	bl	800025c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f7ff ffce 	bl	800025c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 80002c0:	2002      	movs	r0, #2
 80002c2:	f7ff ffcb 	bl	800025c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80002c6:	4b23      	ldr	r3, [pc, #140]	; (8000354 <MX_GPIO_Init+0xb4>)
 80002c8:	2140      	movs	r1, #64	; 0x40
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ffdc 	bl	8000288 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_7);
 80002d0:	4b20      	ldr	r3, [pc, #128]	; (8000354 <MX_GPIO_Init+0xb4>)
 80002d2:	2180      	movs	r1, #128	; 0x80
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ffd7 	bl	8000288 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = nRST_Pin;
 80002da:	003b      	movs	r3, r7
 80002dc:	2204      	movs	r2, #4
 80002de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002e6:	003b      	movs	r3, r7
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 80002ec:	003b      	movs	r3, r7
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <MX_GPIO_Init+0xb8>)
 80002f0:	0019      	movs	r1, r3
 80002f2:	0010      	movs	r0, r2
 80002f4:	f001 f9aa 	bl	800164c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2240      	movs	r2, #64	; 0x40
 80002fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002fe:	003b      	movs	r3, r7
 8000300:	2201      	movs	r2, #1
 8000302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000304:	003b      	movs	r3, r7
 8000306:	2203      	movs	r2, #3
 8000308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800030a:	003b      	movs	r3, r7
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000310:	003b      	movs	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000316:	003b      	movs	r3, r7
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <MX_GPIO_Init+0xb4>)
 800031a:	0019      	movs	r1, r3
 800031c:	0010      	movs	r0, r2
 800031e:	f001 f995 	bl	800164c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000322:	003b      	movs	r3, r7
 8000324:	2280      	movs	r2, #128	; 0x80
 8000326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000328:	003b      	movs	r3, r7
 800032a:	2201      	movs	r2, #1
 800032c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800032e:	003b      	movs	r3, r7
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000334:	003b      	movs	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800033a:	003b      	movs	r3, r7
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	003b      	movs	r3, r7
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <MX_GPIO_Init+0xb4>)
 8000344:	0019      	movs	r1, r3
 8000346:	0010      	movs	r0, r2
 8000348:	f001 f980 	bl	800164c <LL_GPIO_Init>

}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b006      	add	sp, #24
 8000352:	bd80      	pop	{r7, pc}
 8000354:	50000400 	.word	0x50000400
 8000358:	50001400 	.word	0x50001400

0800035c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	0002      	movs	r2, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800036a:	1dfb      	adds	r3, r7, #7
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	2b7f      	cmp	r3, #127	; 0x7f
 8000370:	d828      	bhi.n	80003c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	4a2f      	ldr	r2, [pc, #188]	; (8000430 <__NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	b25b      	sxtb	r3, r3
 800037a:	089b      	lsrs	r3, r3, #2
 800037c:	33c0      	adds	r3, #192	; 0xc0
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	589b      	ldr	r3, [r3, r2]
 8000382:	1dfa      	adds	r2, r7, #7
 8000384:	7812      	ldrb	r2, [r2, #0]
 8000386:	0011      	movs	r1, r2
 8000388:	2203      	movs	r2, #3
 800038a:	400a      	ands	r2, r1
 800038c:	00d2      	lsls	r2, r2, #3
 800038e:	21ff      	movs	r1, #255	; 0xff
 8000390:	4091      	lsls	r1, r2
 8000392:	000a      	movs	r2, r1
 8000394:	43d2      	mvns	r2, r2
 8000396:	401a      	ands	r2, r3
 8000398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	019b      	lsls	r3, r3, #6
 800039e:	22ff      	movs	r2, #255	; 0xff
 80003a0:	401a      	ands	r2, r3
 80003a2:	1dfb      	adds	r3, r7, #7
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	0018      	movs	r0, r3
 80003a8:	2303      	movs	r3, #3
 80003aa:	4003      	ands	r3, r0
 80003ac:	00db      	lsls	r3, r3, #3
 80003ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003b0:	481f      	ldr	r0, [pc, #124]	; (8000430 <__NVIC_SetPriority+0xd4>)
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	089b      	lsrs	r3, r3, #2
 80003ba:	430a      	orrs	r2, r1
 80003bc:	33c0      	adds	r3, #192	; 0xc0
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003c2:	e031      	b.n	8000428 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <__NVIC_SetPriority+0xd8>)
 80003c6:	1dfb      	adds	r3, r7, #7
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	0019      	movs	r1, r3
 80003cc:	230f      	movs	r3, #15
 80003ce:	400b      	ands	r3, r1
 80003d0:	3b08      	subs	r3, #8
 80003d2:	089b      	lsrs	r3, r3, #2
 80003d4:	3306      	adds	r3, #6
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	18d3      	adds	r3, r2, r3
 80003da:	3304      	adds	r3, #4
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	1dfa      	adds	r2, r7, #7
 80003e0:	7812      	ldrb	r2, [r2, #0]
 80003e2:	0011      	movs	r1, r2
 80003e4:	2203      	movs	r2, #3
 80003e6:	400a      	ands	r2, r1
 80003e8:	00d2      	lsls	r2, r2, #3
 80003ea:	21ff      	movs	r1, #255	; 0xff
 80003ec:	4091      	lsls	r1, r2
 80003ee:	000a      	movs	r2, r1
 80003f0:	43d2      	mvns	r2, r2
 80003f2:	401a      	ands	r2, r3
 80003f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	019b      	lsls	r3, r3, #6
 80003fa:	22ff      	movs	r2, #255	; 0xff
 80003fc:	401a      	ands	r2, r3
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	0018      	movs	r0, r3
 8000404:	2303      	movs	r3, #3
 8000406:	4003      	ands	r3, r0
 8000408:	00db      	lsls	r3, r3, #3
 800040a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800040c:	4809      	ldr	r0, [pc, #36]	; (8000434 <__NVIC_SetPriority+0xd8>)
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	001c      	movs	r4, r3
 8000414:	230f      	movs	r3, #15
 8000416:	4023      	ands	r3, r4
 8000418:	3b08      	subs	r3, #8
 800041a:	089b      	lsrs	r3, r3, #2
 800041c:	430a      	orrs	r2, r1
 800041e:	3306      	adds	r3, #6
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	18c3      	adds	r3, r0, r3
 8000424:	3304      	adds	r3, #4
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b003      	add	sp, #12
 800042e:	bd90      	pop	{r4, r7, pc}
 8000430:	e000e100 	.word	0xe000e100
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800043c:	4b04      	ldr	r3, [pc, #16]	; (8000450 <LL_RCC_HSI_Enable+0x18>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <LL_RCC_HSI_Enable+0x18>)
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	0049      	lsls	r1, r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <LL_RCC_HSI_IsReady+0x24>)
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	00db      	lsls	r3, r3, #3
 8000460:	401a      	ands	r2, r3
 8000462:	2380      	movs	r3, #128	; 0x80
 8000464:	00db      	lsls	r3, r3, #3
 8000466:	429a      	cmp	r2, r3
 8000468:	d101      	bne.n	800046e <LL_RCC_HSI_IsReady+0x1a>
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <LL_RCC_HSI_IsReady+0x1c>
 800046e:	2300      	movs	r3, #0
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800048a:	4013      	ands	r3, r2
 800048c:	0019      	movs	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	021a      	lsls	r2, r3, #8
 8000492:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000494:	430a      	orrs	r2, r1
 8000496:	605a      	str	r2, [r3, #4]
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40021000 	.word	0x40021000
 80004a4:	ffff80ff 	.word	0xffff80ff

080004a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <LL_RCC_SetSysClkSource+0x24>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	2207      	movs	r2, #7
 80004b6:	4393      	bics	r3, r2
 80004b8:	0019      	movs	r1, r3
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <LL_RCC_SetSysClkSource+0x24>)
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	430a      	orrs	r2, r1
 80004c0:	609a      	str	r2, [r3, #8]
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <LL_RCC_GetSysClkSource+0x14>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	2238      	movs	r2, #56	; 0x38
 80004da:	4013      	ands	r3, r2
}
 80004dc:	0018      	movs	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_HCLK_DIV_256  
  *         @arg @ref LL_RCC_HCLK_DIV_512  
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_RCC_SetAHBPrescaler+0x24>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <LL_RCC_SetAHBPrescaler+0x28>)
 80004f6:	4013      	ands	r3, r2
 80004f8:	0019      	movs	r1, r3
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <LL_RCC_SetAHBPrescaler+0x24>)
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	430a      	orrs	r2, r1
 8000500:	609a      	str	r2, [r3, #8]
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000
 8000510:	fffff0ff 	.word	0xfffff0ff

08000514 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_RCC_SetAPB1Prescaler+0x24>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <LL_RCC_SetAPB1Prescaler+0x28>)
 8000522:	4013      	ands	r3, r2
 8000524:	0019      	movs	r1, r3
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	430a      	orrs	r2, r1
 800052c:	609a      	str	r2, [r3, #8]
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40021000 	.word	0x40021000
 800053c:	ffff8fff 	.word	0xffff8fff

08000540 <LL_RCC_SetHSIDiv>:
  *         @arg @ref LL_RCC_HSI_DIV_64
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <LL_RCC_SetHSIDiv+0x24>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <LL_RCC_SetHSIDiv+0x28>)
 800054e:	4013      	ands	r3, r2
 8000550:	0019      	movs	r1, r3
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <LL_RCC_SetHSIDiv+0x24>)
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000
 8000568:	ffffc7ff 	.word	0xffffc7ff

0800056c <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_64
  *         @arg @ref LL_RCC_MCO1_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_RCC_ConfigMCO+0x28>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	0a19      	lsrs	r1, r3, #8
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	431a      	orrs	r2, r3
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <LL_RCC_ConfigMCO+0x28>)
 8000586:	430a      	orrs	r2, r1
 8000588:	609a      	str	r2, [r3, #8]
}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b002      	add	sp, #8
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <LL_APB1_GRP1_EnableClock>:
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80005a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_APB1_GRP1_EnableClock+0x28>)
 80005ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4013      	ands	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b6:	68fb      	ldr	r3, [r7, #12]
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b004      	add	sp, #16
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_APB2_GRP1_EnableClock>:
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <LL_APB2_GRP1_EnableClock+0x28>)
 80005ce:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <LL_APB2_GRP1_EnableClock+0x28>)
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <LL_APB2_GRP1_EnableClock+0x28>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b004      	add	sp, #16
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <LL_SYSCFG_EnablePinRemap>:
  *         @arg @ref LL_SYSCFG_PIN_RMP_PA11
  *         @arg @ref LL_SYSCFG_PIN_RMP_PA12
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnablePinRemap(uint32_t PinRemap)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <LL_SYSCFG_EnablePinRemap+0x1c>)
 80005fa:	6819      	ldr	r1, [r3, #0]
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <LL_SYSCFG_EnablePinRemap+0x1c>)
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010000 	.word	0x40010000

08000610 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <LL_FLASH_SetLatency+0x24>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2207      	movs	r2, #7
 800061e:	4393      	bics	r3, r2
 8000620:	0019      	movs	r1, r3
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <LL_FLASH_SetLatency+0x24>)
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40022000 	.word	0x40022000

08000638 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4013      	ands	r3, r2
 800064e:	041a      	lsls	r2, r3, #16
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	43db      	mvns	r3, r3
 8000654:	6839      	ldr	r1, [r7, #0]
 8000656:	400b      	ands	r3, r1
 8000658:	431a      	orrs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	619a      	str	r2, [r3, #24]
}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}

08000666 <iputs1>:
/* USER CODE BEGIN 0 */



void iputs1(char *msg)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
   while(*msg)
 800066e:	e006      	b.n	800067e <iputs1+0x18>
   Send_Data_To_UART1(*msg++);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	0018      	movs	r0, r3
 800067a:	f000 f809 	bl	8000690 <Send_Data_To_UART1>
   while(*msg)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <iputs1+0xa>
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}

08000690 <Send_Data_To_UART1>:
   while(ilen--)
   Send_Data_To_UART1(*msg++);
}

void Send_Data_To_UART1 (uint8_t c)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	0002      	movs	r2, r0
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	701a      	strb	r2, [r3, #0]

   USART1->TDR = c;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <Send_Data_To_UART1+0x2c>)
 800069e:	1dfa      	adds	r2, r7, #7
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28

   //while(TI==0);
   while( (USART1-> ISR & (1<<7) ) ==0 );
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <Send_Data_To_UART1+0x2c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	4013      	ands	r3, r2
 80006ae:	d0fa      	beq.n	80006a6 <Send_Data_To_UART1+0x16>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	40013800 	.word	0x40013800

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff7d 	bl	80005c4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	055b      	lsls	r3, r3, #21
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ff62 	bl	8000598 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 80006d4:	2301      	movs	r3, #1
 80006d6:	425b      	negs	r3, r3
 80006d8:	2103      	movs	r1, #3
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff fe3e 	bl	800035c <__NVIC_SetPriority>

  LL_SYSCFG_EnablePinRemap(LL_SYSCFG_PIN_RMP_PA11);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff85 	bl	80005f0 <LL_SYSCFG_EnablePinRemap>
  LL_SYSCFG_EnablePinRemap(LL_SYSCFG_PIN_RMP_PA12);
 80006e6:	2010      	movs	r0, #16
 80006e8:	f7ff ff82 	bl	80005f0 <LL_SYSCFG_EnablePinRemap>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f830 	bl	8000750 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_4);//12Mhz = 48Mhz/4
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	059a      	lsls	r2, r3, #22
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	045b      	lsls	r3, r3, #17
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff36 	bl	800056c <LL_RCC_ConfigMCO>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff fdce 	bl	80002a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000704:	f000 fc58 	bl	8000fb8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000708:	f000 fa08 	bl	8000b1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  
  //iputs1((uint8_t *)"start...");
  iputs1("start9...");
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <main+0x84>)
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ffa9 	bl	8000666 <iputs1>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     LL_mDelay(1000);
 8000714:	23fa      	movs	r3, #250	; 0xfa
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f001 fb67 	bl	8001dec <LL_mDelay>

    /* USER CODE BEGIN 3 */
	  //ommo_timer1_task();
     
     
     if (flg_rx==1)
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <main+0x88>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d102      	bne.n	800072c <main+0x6c>
     {
        flg_rx=0;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <main+0x88>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
        //USART1->TDR = irxdata; //0x32;
        
     }     
 
     LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <main+0x8c>)
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff ff81 	bl	8000638 <LL_GPIO_TogglePin>
     LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_7);     
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <main+0x8c>)
 8000738:	2180      	movs	r1, #128	; 0x80
 800073a:	0018      	movs	r0, r3
 800073c:	f7ff ff7c 	bl	8000638 <LL_GPIO_TogglePin>
     LL_mDelay(1000);
 8000740:	e7e8      	b.n	8000714 <main+0x54>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	08001ec0 	.word	0x08001ec0
 8000748:	20000020 	.word	0x20000020
 800074c:	50000400 	.word	0x50000400

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff5b 	bl	8000610 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 800075a:	f7ff fe6d 	bl	8000438 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	f7ff fe78 	bl	8000454 <LL_RCC_HSI_IsReady>
 8000764:	0003      	movs	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d1fa      	bne.n	8000760 <SystemClock_Config+0x10>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 800076a:	2040      	movs	r0, #64	; 0x40
 800076c:	f7ff fe86 	bl	800047c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetHSIDiv(LL_RCC_HSI_DIV_1);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fee5 	bl	8000540 <LL_RCC_SetHSIDiv>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_HCLK_DIV_1);
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff feb6 	bl	80004e8 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe93 	bl	80004a8 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	f7ff fea4 	bl	80004d0 <LL_RCC_GetSysClkSource>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d1fb      	bne.n	8000784 <SystemClock_Config+0x34>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fec1 	bl	8000514 <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(48000000);
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SystemClock_Config+0x58>)
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fb19 	bl	8001dcc <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <SystemClock_Config+0x58>)
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fb49 	bl	8001e34 <LL_SetSystemCoreClock>
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	02dc6c00 	.word	0x02dc6c00

080007ac <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2202      	movs	r2, #2
 80007b8:	4252      	negs	r2, r2
 80007ba:	611a      	str	r2, [r3, #16]
}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b002      	add	sp, #8
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d101      	bne.n	80007dc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80007d8:	2301      	movs	r3, #1
 80007da:	e000      	b.n	80007de <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80007dc:	2300      	movs	r3, #0
}
 80007de:	0018      	movs	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	2220      	movs	r2, #32
 80007f4:	4013      	ands	r3, r2
 80007f6:	2b20      	cmp	r3, #32
 80007f8:	d101      	bne.n	80007fe <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80007fe:	2300      	movs	r3, #0
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2220      	movs	r2, #32
 8000816:	4013      	ands	r3, r2
 8000818:	2b20      	cmp	r3, #32
 800081a:	d101      	bne.n	8000820 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8000820:	2300      	movs	r3, #0
}
 8000822:	0018      	movs	r0, r3
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}

0800082a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082e:	e7fe      	b.n	800082e <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <HardFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	  /* Check whether update interrupt is pending */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff ffb2 	bl	80007c4 <LL_TIM_IsActiveFlag_UPDATE>
 8000860:	0003      	movs	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d103      	bne.n	800086e <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a>
	  {
	    /* Clear the update interrupt flag */
	    LL_TIM_ClearFlag_UPDATE(TIM1);
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff9f 	bl	80007ac <LL_TIM_ClearFlag_UPDATE>
	  }

	  /* TIM1 update interrupt processing */
	  TimerUpdate_Callback();
 800086e:	f000 f9ab 	bl	8000bc8 <TimerUpdate_Callback>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40012c00 	.word	0x40012c00

0800087c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
   
   if (LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1)) 
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <USART1_IRQHandler+0x3c>)
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ffaf 	bl	80007e6 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d011      	beq.n	80008b0 <USART1_IRQHandler+0x34>
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <USART1_IRQHandler+0x3c>)
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff ffba 	bl	8000808 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d00b      	beq.n	80008b0 <USART1_IRQHandler+0x34>
   {   
      //LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
      //USART1->TDR = 0x32;
      flg_rx=1;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <USART1_IRQHandler+0x40>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
      
      //USART1->ISR &= ~(USART_ISR_RXNE_RXFNE);
      
      irxdata = (uint8_t)(READ_BIT(USART1->RDR, USART_RDR_RDR) & 0xFFU);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <USART1_IRQHandler+0x3c>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <USART1_IRQHandler+0x44>)
 80008a6:	701a      	strb	r2, [r3, #0]
      USART1->TDR = irxdata;      
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <USART1_IRQHandler+0x44>)
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <USART1_IRQHandler+0x3c>)
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40013800 	.word	0x40013800
 80008bc:	20000020 	.word	0x20000020
 80008c0:	20000021 	.word	0x20000021

080008c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <SystemInit+0x14>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	0512      	lsls	r2, r2, #20
 80008ce:	609a      	str	r2, [r3, #8]
#endif
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	0002      	movs	r2, r0
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b7f      	cmp	r3, #127	; 0x7f
 80008ee:	d809      	bhi.n	8000904 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	001a      	movs	r2, r3
 80008f6:	231f      	movs	r3, #31
 80008f8:	401a      	ands	r2, r3
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_EnableIRQ+0x30>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	4091      	lsls	r1, r2
 8000900:	000a      	movs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	e000e100 	.word	0xe000e100

08000910 <__NVIC_SetPriority>:
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b7f      	cmp	r3, #127	; 0x7f
 8000924:	d828      	bhi.n	8000978 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000926:	4a2f      	ldr	r2, [pc, #188]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b25b      	sxtb	r3, r3
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	33c0      	adds	r3, #192	; 0xc0
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	589b      	ldr	r3, [r3, r2]
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	0011      	movs	r1, r2
 800093c:	2203      	movs	r2, #3
 800093e:	400a      	ands	r2, r1
 8000940:	00d2      	lsls	r2, r2, #3
 8000942:	21ff      	movs	r1, #255	; 0xff
 8000944:	4091      	lsls	r1, r2
 8000946:	000a      	movs	r2, r1
 8000948:	43d2      	mvns	r2, r2
 800094a:	401a      	ands	r2, r3
 800094c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	019b      	lsls	r3, r3, #6
 8000952:	22ff      	movs	r2, #255	; 0xff
 8000954:	401a      	ands	r2, r3
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	2303      	movs	r3, #3
 800095e:	4003      	ands	r3, r0
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	481f      	ldr	r0, [pc, #124]	; (80009e4 <__NVIC_SetPriority+0xd4>)
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b25b      	sxtb	r3, r3
 800096c:	089b      	lsrs	r3, r3, #2
 800096e:	430a      	orrs	r2, r1
 8000970:	33c0      	adds	r3, #192	; 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	501a      	str	r2, [r3, r0]
}
 8000976:	e031      	b.n	80009dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0019      	movs	r1, r3
 8000980:	230f      	movs	r3, #15
 8000982:	400b      	ands	r3, r1
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3306      	adds	r3, #6
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	3304      	adds	r3, #4
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1dfa      	adds	r2, r7, #7
 8000994:	7812      	ldrb	r2, [r2, #0]
 8000996:	0011      	movs	r1, r2
 8000998:	2203      	movs	r2, #3
 800099a:	400a      	ands	r2, r1
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	21ff      	movs	r1, #255	; 0xff
 80009a0:	4091      	lsls	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	43d2      	mvns	r2, r2
 80009a6:	401a      	ands	r2, r3
 80009a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	019b      	lsls	r3, r3, #6
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	401a      	ands	r2, r3
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	2303      	movs	r3, #3
 80009ba:	4003      	ands	r3, r0
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <__NVIC_SetPriority+0xd8>)
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	001c      	movs	r4, r3
 80009c8:	230f      	movs	r3, #15
 80009ca:	4023      	ands	r3, r4
 80009cc:	3b08      	subs	r3, #8
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	430a      	orrs	r2, r1
 80009d2:	3306      	adds	r3, #6
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	18c3      	adds	r3, r0, r3
 80009d8:	3304      	adds	r3, #4
 80009da:	601a      	str	r2, [r3, #0]
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b003      	add	sp, #12
 80009e2:	bd90      	pop	{r4, r7, pc}
 80009e4:	e000e100 	.word	0xe000e100
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <LL_APB2_GRP1_EnableClock>:
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <LL_APB2_GRP1_EnableClock+0x28>)
 80009f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <LL_APB2_GRP1_EnableClock+0x28>)
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <LL_APB2_GRP1_EnableClock+0x28>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4013      	ands	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000

08000a18 <LL_TIM_EnableCounter>:
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2201      	movs	r2, #1
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <LL_TIM_DisableARRPreload>:
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	4393      	bics	r3, r2
 8000a44:	001a      	movs	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <LL_TIM_SetClockSource>:
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <LL_TIM_SetClockSource+0x24>)
 8000a64:	401a      	ands	r2, r3
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	fffebff8 	.word	0xfffebff8

08000a7c <LL_TIM_SetTriggerOutput>:
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2270      	movs	r2, #112	; 0x70
 8000a8c:	4393      	bics	r3, r2
 8000a8e:	001a      	movs	r2, r3
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	605a      	str	r2, [r3, #4]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <LL_TIM_SetTriggerOutput2>:
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <LL_TIM_SetTriggerOutput2+0x24>)
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	605a      	str	r2, [r3, #4]
}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b002      	add	sp, #8
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	ff0fffff 	.word	0xff0fffff

08000ac8 <LL_TIM_DisableMasterSlaveMode>:
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	4393      	bics	r3, r2
 8000ad8:	001a      	movs	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	609a      	str	r2, [r3, #8]
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <LL_TIM_ClearFlag_UPDATE>:
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2202      	movs	r2, #2
 8000af2:	4252      	negs	r2, r2
 8000af4:	611a      	str	r2, [r3, #16]
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}

08000afe <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60da      	str	r2, [r3, #12]
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <MX_TIM1_Init>:
volatile uint8_t ommo_timer_err_flag = 0;
/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	0018      	movs	r0, r3
 8000b26:	2314      	movs	r3, #20
 8000b28:	001a      	movs	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f001 f9b4 	bl	8001e98 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ff59 	bl	80009ec <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	200d      	movs	r0, #13
 8000b3e:	f7ff fee7 	bl	8000910 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000b42:	200d      	movs	r0, #13
 8000b44:	f7ff feca 	bl	80008dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 47999;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <MX_TIM1_Init+0xa4>)
 8000b4c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2209      	movs	r2, #9
 8000b58:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b6a:	0019      	movs	r1, r3
 8000b6c:	0010      	movs	r0, r2
 8000b6e:	f000 ff8d 	bl	8001a8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b74:	0018      	movs	r0, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff68 	bl	8000a54 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff77 	bl	8000a7c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b90:	2100      	movs	r1, #0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff84 	bl	8000aa0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff94 	bl	8000ac8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  /* Clear the update flag */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff ff9f 	bl	8000ae6 <LL_TIM_ClearFlag_UPDATE>

  /* Enable the update interrupt */
  LL_TIM_EnableIT_UPDATE(TIM1);
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff ffa7 	bl	8000afe <LL_TIM_EnableIT_UPDATE>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM1);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <MX_TIM1_Init+0xa8>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff ff30 	bl	8000a18 <LL_TIM_EnableCounter>
  /* USER CODE END TIM1_Init 2 */

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b006      	add	sp, #24
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	ffffbb7f 	.word	0xffffbb7f
 8000bc4:	40012c00 	.word	0x40012c00

08000bc8 <TimerUpdate_Callback>:
  * @brief  Timer update interrupt processing
  * @param  None
  * @retval None
  */
void TimerUpdate_Callback(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	timer1_flag = 1;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <TimerUpdate_Callback+0x10>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	701a      	strb	r2, [r3, #0]
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000022 	.word	0x20000022

08000bdc <__NVIC_EnableIRQ>:
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b7f      	cmp	r3, #127	; 0x7f
 8000bee:	d809      	bhi.n	8000c04 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_EnableIRQ+0x30>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b7f      	cmp	r3, #127	; 0x7f
 8000c24:	d828      	bhi.n	8000c78 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c26:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	589b      	ldr	r3, [r3, r2]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	33c0      	adds	r3, #192	; 0xc0
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	501a      	str	r2, [r3, r0]
}
 8000c76:	e031      	b.n	8000cdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0019      	movs	r1, r3
 8000c80:	230f      	movs	r3, #15
 8000c82:	400b      	ands	r3, r1
 8000c84:	3b08      	subs	r3, #8
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3306      	adds	r3, #6
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	3304      	adds	r3, #4
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	; 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001c      	movs	r4, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	3306      	adds	r3, #6
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	18c3      	adds	r3, r0, r3
 8000cd8:	3304      	adds	r3, #4
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSIKER
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	0c12      	lsrs	r2, r2, #16
 8000cfc:	43d2      	mvns	r2, r2
 8000cfe:	401a      	ands	r2, r3
 8000d00:	0011      	movs	r1, r2
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	0c1a      	lsrs	r2, r3, #16
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <LL_RCC_SetUSARTClockSource+0x2c>)
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40021000 	.word	0x40021000

08000d1c <LL_APB2_GRP1_EnableClock>:
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <LL_APB2_GRP1_EnableClock+0x28>)
 8000d26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <LL_APB2_GRP1_EnableClock+0x28>)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <LL_APB2_GRP1_EnableClock+0x28>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_IOP_GRP1_EnableClock>:
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b004      	add	sp, #16
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000

08000d74 <LL_SYSCFG_EnableFastModePlus>:
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000d7e:	6819      	ldr	r1, [r3, #0]
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b002      	add	sp, #8
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010000 	.word	0x40010000

08000d94 <LL_USART_Enable>:
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2201      	movs	r2, #1
 8000da2:	431a      	orrs	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <LL_USART_DisableFIFO>:
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <LL_USART_DisableFIFO+0x1c>)
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	601a      	str	r2, [r3, #0]
}
 8000dc4:	46c0      	nop			; (mov r8, r8)
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	dfffffff 	.word	0xdfffffff

08000dd0 <LL_USART_SetTXFIFOThreshold>:
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000dda:	f3ef 8310 	mrs	r3, PRIMASK
 8000dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8000de0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	2301      	movs	r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f383 8810 	msr	PRIMASK, r3
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	075b      	lsls	r3, r3, #29
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f383 8810 	msr	PRIMASK, r3
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b006      	add	sp, #24
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <LL_USART_SetRXFIFOThreshold>:
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000e22:	f3ef 8310 	mrs	r3, PRIMASK
 8000e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e28:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f383 8810 	msr	PRIMASK, r3
}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <LL_USART_SetRXFIFOThreshold+0x48>)
 8000e3e:	401a      	ands	r2, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	065b      	lsls	r3, r3, #25
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	f383 8810 	msr	PRIMASK, r3
}
 8000e54:	46c0      	nop			; (mov r8, r8)
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b006      	add	sp, #24
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	f1ffffff 	.word	0xf1ffffff

08000e64 <LL_USART_ConfigAsyncMode>:
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <LL_USART_ConfigAsyncMode+0x2c>)
 8000e72:	401a      	ands	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	222a      	movs	r2, #42	; 0x2a
 8000e7e:	4393      	bics	r3, r2
 8000e80:	001a      	movs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	ffffb7ff 	.word	0xffffb7ff

08000e94 <LL_USART_IsActiveFlag_TEACK>:
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69da      	ldr	r2, [r3, #28]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	039b      	lsls	r3, r3, #14
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	039b      	lsls	r3, r3, #14
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d101      	bne.n	8000eb2 <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <LL_USART_IsActiveFlag_REACK>:
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69da      	ldr	r2, [r3, #28]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	03db      	lsls	r3, r3, #15
 8000ecc:	401a      	ands	r2, r3
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	03db      	lsls	r3, r3, #15
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d101      	bne.n	8000eda <LL_USART_IsActiveFlag_REACK+0x1e>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <LL_USART_IsActiveFlag_REACK+0x20>
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	0018      	movs	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <LL_USART_ClearFlag_PE>:
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	621a      	str	r2, [r3, #32]
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <LL_USART_ClearFlag_FE>:
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2202      	movs	r2, #2
 8000f06:	621a      	str	r2, [r3, #32]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LL_USART_ClearFlag_NE>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	621a      	str	r2, [r3, #32]
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <LL_USART_ClearFlag_ORE>:
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2208      	movs	r2, #8
 8000f32:	621a      	str	r2, [r3, #32]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LL_USART_EnableIT_RXNE_RXFNE>:
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000f44:	f3ef 8310 	mrs	r3, PRIMASK
 8000f48:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f383 8810 	msr	PRIMASK, r3
}
 8000f58:	46c0      	nop			; (mov r8, r8)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f383 8810 	msr	PRIMASK, r3
}
 8000f70:	46c0      	nop			; (mov r8, r8)
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b006      	add	sp, #24
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LL_USART_EnableIT_ERROR>:
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000f82:	f3ef 8310 	mrs	r3, PRIMASK
 8000f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8000f88:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f383 8810 	msr	PRIMASK, r3
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	f383 8810 	msr	PRIMASK, r3
}
 8000fae:	46c0      	nop			; (mov r8, r8)
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b08f      	sub	sp, #60	; 0x3c
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fbe:	2418      	movs	r4, #24
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f000 ff65 	bl	8001e98 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	003b      	movs	r3, r7
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	2318      	movs	r3, #24
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f000 ff5e 	bl	8001e98 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000fdc:	23c0      	movs	r3, #192	; 0xc0
 8000fde:	029b      	lsls	r3, r3, #10
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff fe83 	bl	8000cec <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fe96 	bl	8000d1c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f7ff fea9 	bl	8000d48 <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9 [PA11]   ------> USART1_TX
  PA10 [PA12]   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	0092      	lsls	r2, r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ffe:	003b      	movs	r3, r7
 8001000:	2202      	movs	r2, #2
 8001002:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	003b      	movs	r3, r7
 8001006:	2203      	movs	r2, #3
 8001008:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800100a:	003b      	movs	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001010:	003b      	movs	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001016:	003b      	movs	r3, r7
 8001018:	2201      	movs	r2, #1
 800101a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	003a      	movs	r2, r7
 800101e:	23a0      	movs	r3, #160	; 0xa0
 8001020:	05db      	lsls	r3, r3, #23
 8001022:	0011      	movs	r1, r2
 8001024:	0018      	movs	r0, r3
 8001026:	f000 fb11 	bl	800164c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800102a:	003b      	movs	r3, r7
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	00d2      	lsls	r2, r2, #3
 8001030:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001032:	003b      	movs	r3, r7
 8001034:	2202      	movs	r2, #2
 8001036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	003b      	movs	r3, r7
 800103a:	2203      	movs	r2, #3
 800103c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800103e:	003b      	movs	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001044:	003b      	movs	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800104a:	003b      	movs	r3, r7
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	003a      	movs	r2, r7
 8001052:	23a0      	movs	r3, #160	; 0xa0
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f000 faf7 	bl	800164c <LL_GPIO_Init>

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PA9);
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	03db      	lsls	r3, r3, #15
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff fe86 	bl	8000d74 <LL_SYSCFG_EnableFastModePlus>

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PA10);
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fe81 	bl	8000d74 <LL_SYSCFG_EnableFastModePlus>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001072:	2100      	movs	r1, #0
 8001074:	201b      	movs	r0, #27
 8001076:	f7ff fdcb 	bl	8000c10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800107a:	201b      	movs	r0, #27
 800107c:	f7ff fdae 	bl	8000bdc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001080:	193b      	adds	r3, r7, r4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8001086:	193b      	adds	r3, r7, r4
 8001088:	22e1      	movs	r2, #225	; 0xe1
 800108a:	0252      	lsls	r2, r2, #9
 800108c:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800108e:	0021      	movs	r1, r4
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	220c      	movs	r2, #12
 80010a6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	4a22      	ldr	r2, [pc, #136]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f000 fdfa 	bl	8001cb4 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010c2:	2100      	movs	r1, #0
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fe83 	bl	8000dd0 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010cc:	2100      	movs	r1, #0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fea2 	bl	8000e18 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f7ff fe6a 	bl	8000db0 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff fec0 	bl	8000e64 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fe54 	bl	8000d94 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fecf 	bl	8000e94 <LL_USART_IsActiveFlag_TEACK>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d0f9      	beq.n	80010ee <MX_USART1_UART_Init+0x136>
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_USART1_UART_Init+0x188>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff fedd 	bl	8000ebc <LL_USART_IsActiveFlag_REACK>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d0f3      	beq.n	80010ee <MX_USART1_UART_Init+0x136>
  }
  /* USER CODE BEGIN USART1_Init 2 */
//  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
//  {
//  }
  LL_USART_ClearFlag_ORE(USART1);
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001108:	0018      	movs	r0, r3
 800110a:	f7ff ff0c 	bl	8000f26 <LL_USART_ClearFlag_ORE>
  LL_USART_ClearFlag_NE(USART1);
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fefd 	bl	8000f10 <LL_USART_ClearFlag_NE>
  LL_USART_ClearFlag_PE(USART1);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001118:	0018      	movs	r0, r3
 800111a:	f7ff fee3 	bl	8000ee4 <LL_USART_ClearFlag_PE>
  LL_USART_ClearFlag_FE(USART1);
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff feea 	bl	8000efa <LL_USART_ClearFlag_FE>

  LL_USART_EnableIT_RXNE(USART1);
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff07 	bl	8000f3c <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USART1);// for some reason cannot start ERR interrupt
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <MX_USART1_UART_Init+0x188>)
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff22 	bl	8000f7a <LL_USART_EnableIT_ERROR>


  /* USER CODE END USART1_Init 2 */

}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b00f      	add	sp, #60	; 0x3c
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40013800 	.word	0x40013800

08001144 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001146:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff fbbc 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800114c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800114e:	e003      	b.n	8001158 <LoopCopyDataInit>

08001150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001156:	3104      	adds	r1, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <LoopForever+0xa>)
  ldr r3, =_edata
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <LoopForever+0xe>)
  adds r2, r0, r1
 800115c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001160:	d3f6      	bcc.n	8001150 <CopyDataInit>
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopForever+0x12>)
  b LoopFillZerobss
 8001164:	e002      	b.n	800116c <LoopFillZerobss>

08001166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  str  r3, [r2]
 8001168:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116a:	3204      	adds	r2, #4

0800116c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LoopForever+0x16>)
  cmp r2, r3
 800116e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001170:	d3f9      	bcc.n	8001166 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001172:	f000 fe6d 	bl	8001e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001176:	f7ff faa3 	bl	80006c0 <main>

0800117a <LoopForever>:

LoopForever:
    b LoopForever
 800117a:	e7fe      	b.n	800117a <LoopForever>
  ldr   r0, =_estack
 800117c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001180:	08001f64 	.word	0x08001f64
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001188:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800118c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001190:	20000024 	.word	0x20000024

08001194 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC1_IRQHandler>

08001196 <LL_GPIO_SetPinMode>:
{
 8001196:	b590      	push	{r4, r7, lr}
 8001198:	b08d      	sub	sp, #52	; 0x34
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681c      	ldr	r4, [r3, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80011aa:	231f      	movs	r3, #31
 80011ac:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	e00e      	b.n	80011d8 <LL_GPIO_SetPinMode+0x42>
    result <<= 1U;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
    s--;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	085b      	lsrs	r3, r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1ed      	bne.n	80011ba <LL_GPIO_SetPinMode+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
  return result;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <LL_GPIO_SetPinMode+0x60>
    return 32U;
 80011f2:	2320      	movs	r3, #32
 80011f4:	e004      	b.n	8001200 <LL_GPIO_SetPinMode+0x6a>
  return __builtin_clz(value);
 80011f6:	69f8      	ldr	r0, [r7, #28]
 80011f8:	f7ff f812 	bl	8000220 <__clzsi2>
 80011fc:	0003      	movs	r3, r0
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	43db      	mvns	r3, r3
 800120a:	401c      	ands	r4, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001210:	231f      	movs	r3, #31
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
 800121e:	e00e      	b.n	800123e <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	6a3a      	ldr	r2, [r7, #32]
 800122e:	4313      	orrs	r3, r2
 8001230:	623b      	str	r3, [r7, #32]
    s--;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	3b01      	subs	r3, #1
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	085b      	lsrs	r3, r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ed      	bne.n	8001220 <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	409a      	lsls	r2, r3
 800124a:	0013      	movs	r3, r2
 800124c:	623b      	str	r3, [r7, #32]
  return result;
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 8001258:	2320      	movs	r3, #32
 800125a:	e004      	b.n	8001266 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 800125c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800125e:	f7fe ffdf 	bl	8000220 <__clzsi2>
 8001262:	0003      	movs	r3, r0
 8001264:	b2db      	uxtb	r3, r3
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	0022      	movs	r2, r4
 8001270:	431a      	orrs	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b00d      	add	sp, #52	; 0x34
 800127c:	bd90      	pop	{r4, r7, pc}

0800127e <LL_GPIO_SetPinOutputType>:
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	434b      	muls	r3, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b004      	add	sp, #16
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LL_GPIO_SetPinSpeed>:
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08d      	sub	sp, #52	; 0x34
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	689c      	ldr	r4, [r3, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80012bc:	231f      	movs	r3, #31
 80012be:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	e00e      	b.n	80012ea <LL_GPIO_SetPinSpeed+0x42>
    result <<= 1U;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
    s--;
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	085b      	lsrs	r3, r3, #1
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ed      	bne.n	80012cc <LL_GPIO_SetPinSpeed+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
  return result;
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <LL_GPIO_SetPinSpeed+0x60>
    return 32U;
 8001304:	2320      	movs	r3, #32
 8001306:	e004      	b.n	8001312 <LL_GPIO_SetPinSpeed+0x6a>
  return __builtin_clz(value);
 8001308:	69f8      	ldr	r0, [r7, #28]
 800130a:	f7fe ff89 	bl	8000220 <__clzsi2>
 800130e:	0003      	movs	r3, r0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43db      	mvns	r3, r3
 800131c:	401c      	ands	r4, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001322:	231f      	movs	r3, #31
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001330:	e00e      	b.n	8001350 <LL_GPIO_SetPinSpeed+0xa8>
    result <<= 1U;
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	2201      	movs	r2, #1
 800133c:	4013      	ands	r3, r2
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	4313      	orrs	r3, r2
 8001342:	623b      	str	r3, [r7, #32]
    s--;
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	3b01      	subs	r3, #1
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ed      	bne.n	8001332 <LL_GPIO_SetPinSpeed+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001356:	6a3a      	ldr	r2, [r7, #32]
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	623b      	str	r3, [r7, #32]
  return result;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <LL_GPIO_SetPinSpeed+0xc6>
    return 32U;
 800136a:	2320      	movs	r3, #32
 800136c:	e004      	b.n	8001378 <LL_GPIO_SetPinSpeed+0xd0>
  return __builtin_clz(value);
 800136e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001370:	f7fe ff56 	bl	8000220 <__clzsi2>
 8001374:	0003      	movs	r3, r0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	409a      	lsls	r2, r3
 800137e:	0013      	movs	r3, r2
 8001380:	0022      	movs	r2, r4
 8001382:	431a      	orrs	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	609a      	str	r2, [r3, #8]
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b00d      	add	sp, #52	; 0x34
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <LL_GPIO_SetPinPull>:
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b08d      	sub	sp, #52	; 0x34
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	68dc      	ldr	r4, [r3, #12]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80013a4:	231f      	movs	r3, #31
 80013a6:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	085b      	lsrs	r3, r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
 80013b2:	e00e      	b.n	80013d2 <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2201      	movs	r2, #1
 80013be:	4013      	ands	r3, r2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
    s--;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ed      	bne.n	80013b4 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	409a      	lsls	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
  return result;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <LL_GPIO_SetPinPull+0x60>
    return 32U;
 80013ec:	2320      	movs	r3, #32
 80013ee:	e004      	b.n	80013fa <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 80013f0:	69f8      	ldr	r0, [r7, #28]
 80013f2:	f7fe ff15 	bl	8000220 <__clzsi2>
 80013f6:	0003      	movs	r3, r0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	43db      	mvns	r3, r3
 8001404:	401c      	ands	r4, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800140a:	231f      	movs	r3, #31
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
 8001418:	e00e      	b.n	8001438 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	2201      	movs	r2, #1
 8001424:	4013      	ands	r3, r2
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	4313      	orrs	r3, r2
 800142a:	623b      	str	r3, [r7, #32]
    s--;
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ed      	bne.n	800141a <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	623b      	str	r3, [r7, #32]
  return result;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 8001452:	2320      	movs	r3, #32
 8001454:	e004      	b.n	8001460 <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 8001456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001458:	f7fe fee2 	bl	8000220 <__clzsi2>
 800145c:	0003      	movs	r3, r0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	0022      	movs	r2, r4
 800146a:	431a      	orrs	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	60da      	str	r2, [r3, #12]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b00d      	add	sp, #52	; 0x34
 8001476:	bd90      	pop	{r4, r7, pc}

08001478 <LL_GPIO_SetAFPin_0_7>:
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	; 0x34
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a1c      	ldr	r4, [r3, #32]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800148c:	231f      	movs	r3, #31
 800148e:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	085b      	lsrs	r3, r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	e00e      	b.n	80014ba <LL_GPIO_SetAFPin_0_7+0x42>
    result <<= 1U;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2201      	movs	r2, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
    s--;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1ed      	bne.n	800149c <LL_GPIO_SetAFPin_0_7+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
  return result;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <LL_GPIO_SetAFPin_0_7+0x60>
    return 32U;
 80014d4:	2320      	movs	r3, #32
 80014d6:	e004      	b.n	80014e2 <LL_GPIO_SetAFPin_0_7+0x6a>
  return __builtin_clz(value);
 80014d8:	69f8      	ldr	r0, [r7, #28]
 80014da:	f7fe fea1 	bl	8000220 <__clzsi2>
 80014de:	0003      	movs	r3, r0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43db      	mvns	r3, r3
 80014ec:	401c      	ands	r4, r3
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80014f2:	231f      	movs	r3, #31
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001500:	e00e      	b.n	8001520 <LL_GPIO_SetAFPin_0_7+0xa8>
    result <<= 1U;
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	4313      	orrs	r3, r2
 8001512:	623b      	str	r3, [r7, #32]
    s--;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3b01      	subs	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ed      	bne.n	8001502 <LL_GPIO_SetAFPin_0_7+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001526:	6a3a      	ldr	r2, [r7, #32]
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	623b      	str	r3, [r7, #32]
  return result;
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <LL_GPIO_SetAFPin_0_7+0xc6>
    return 32U;
 800153a:	2320      	movs	r3, #32
 800153c:	e004      	b.n	8001548 <LL_GPIO_SetAFPin_0_7+0xd0>
  return __builtin_clz(value);
 800153e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001540:	f7fe fe6e 	bl	8000220 <__clzsi2>
 8001544:	0003      	movs	r3, r0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	0022      	movs	r2, r4
 8001552:	431a      	orrs	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	621a      	str	r2, [r3, #32]
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b00d      	add	sp, #52	; 0x34
 800155e:	bd90      	pop	{r4, r7, pc}

08001560 <LL_GPIO_SetAFPin_8_15>:
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b08d      	sub	sp, #52	; 0x34
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001576:	231f      	movs	r3, #31
 8001578:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	e00e      	b.n	80015a4 <LL_GPIO_SetAFPin_8_15+0x44>
    result <<= 1U;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2201      	movs	r2, #1
 8001590:	4013      	ands	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
    s--;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3b01      	subs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ed      	bne.n	8001586 <LL_GPIO_SetAFPin_8_15+0x26>
  result <<= s;                        /* shift when v's highest bits are zero */
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
 80015b0:	0013      	movs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
  return result;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <LL_GPIO_SetAFPin_8_15+0x62>
    return 32U;
 80015be:	2320      	movs	r3, #32
 80015c0:	e004      	b.n	80015cc <LL_GPIO_SetAFPin_8_15+0x6c>
  return __builtin_clz(value);
 80015c2:	69f8      	ldr	r0, [r7, #28]
 80015c4:	f7fe fe2c 	bl	8000220 <__clzsi2>
 80015c8:	0003      	movs	r3, r0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	409a      	lsls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	43db      	mvns	r3, r3
 80015d6:	401c      	ands	r4, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80015de:	231f      	movs	r3, #31
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	085b      	lsrs	r3, r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ec:	e00e      	b.n	800160c <LL_GPIO_SetAFPin_8_15+0xac>
    result <<= 1U;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	6a3a      	ldr	r2, [r7, #32]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
    s--;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3b01      	subs	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ed      	bne.n	80015ee <LL_GPIO_SetAFPin_8_15+0x8e>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	623b      	str	r3, [r7, #32]
  return result;
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <LL_GPIO_SetAFPin_8_15+0xca>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e004      	b.n	8001634 <LL_GPIO_SetAFPin_8_15+0xd4>
  return __builtin_clz(value);
 800162a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800162c:	f7fe fdf8 	bl	8000220 <__clzsi2>
 8001630:	0003      	movs	r3, r0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	0022      	movs	r2, r4
 800163e:	431a      	orrs	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b00d      	add	sp, #52	; 0x34
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800165c:	231f      	movs	r3, #31
 800165e:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	085b      	lsrs	r3, r3, #1
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	e00e      	b.n	800168a <LL_GPIO_Init+0x3e>
    result <<= 1U;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
    s--;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b01      	subs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	623b      	str	r3, [r7, #32]
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ed      	bne.n	800166c <LL_GPIO_Init+0x20>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	409a      	lsls	r2, r3
 8001696:	0013      	movs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
  return result;
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <LL_GPIO_Init+0x5c>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e004      	b.n	80016b2 <LL_GPIO_Init+0x66>
  return __builtin_clz(value);
 80016a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016aa:	f7fe fdb9 	bl	8000220 <__clzsi2>
 80016ae:	0003      	movs	r3, r0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80016b4:	e06c      	b.n	8001790 <LL_GPIO_Init+0x144>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2101      	movs	r1, #1
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	4091      	lsls	r1, r2
 80016c0:	000a      	movs	r2, r1
 80016c2:	4013      	ands	r3, r2
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if (currentpin != 0U)
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d05e      	beq.n	800178a <LL_GPIO_Init+0x13e>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff fd5e 	bl	8001196 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d003      	beq.n	80016ea <LL_GPIO_Init+0x9e>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d106      	bne.n	80016f8 <LL_GPIO_Init+0xac>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff fdd8 	bl	80012a8 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fe45 	bl	8001390 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d13d      	bne.n	800178a <LL_GPIO_Init+0x13e>
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001712:	231f      	movs	r3, #31
 8001714:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	085b      	lsrs	r3, r3, #1
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e00e      	b.n	8001740 <LL_GPIO_Init+0xf4>
    result <<= 1U;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4313      	orrs	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
    s--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3b01      	subs	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ed      	bne.n	8001722 <LL_GPIO_Init+0xd6>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  return result;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <LL_GPIO_Init+0x112>
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e004      	b.n	8001768 <LL_GPIO_Init+0x11c>
  return __builtin_clz(value);
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7fe fd5e 	bl	8000220 <__clzsi2>
 8001764:	0003      	movs	r3, r0
 8001766:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8001768:	2b07      	cmp	r3, #7
 800176a:	d807      	bhi.n	800177c <LL_GPIO_Init+0x130>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff fe7f 	bl	8001478 <LL_GPIO_SetAFPin_0_7>
 800177a:	e006      	b.n	800178a <LL_GPIO_Init+0x13e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff feeb 	bl	8001560 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	3301      	adds	r3, #1
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	40da      	lsrs	r2, r3
 8001798:	1e13      	subs	r3, r2, #0
 800179a:	d18c      	bne.n	80016b6 <LL_GPIO_Init+0x6a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d003      	beq.n	80017ac <LL_GPIO_Init+0x160>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d107      	bne.n	80017bc <LL_GPIO_Init+0x170>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fd61 	bl	800127e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80017bc:	2300      	movs	r3, #0
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b00c      	add	sp, #48	; 0x30
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <LL_RCC_HSIKER_GetDivider>:
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIKERDIV));
 80017cc:	4b03      	ldr	r3, [pc, #12]	; (80017dc <LL_RCC_HSIKER_GetDivider+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	22e0      	movs	r2, #224	; 0xe0
 80017d2:	4013      	ands	r3, r2
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40021000 	.word	0x40021000

080017e0 <LL_RCC_HSI_IsReady>:
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <LL_RCC_HSI_IsReady+0x24>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	401a      	ands	r2, r3
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d101      	bne.n	80017fa <LL_RCC_HSI_IsReady+0x1a>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_RCC_HSI_IsReady+0x1c>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	0018      	movs	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40021000 	.word	0x40021000

08001808 <LL_RCC_LSE_IsReady>:
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <LL_RCC_LSE_IsReady+0x1c>)
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2202      	movs	r2, #2
 8001812:	4013      	ands	r3, r2
 8001814:	2b02      	cmp	r3, #2
 8001816:	d101      	bne.n	800181c <LL_RCC_LSE_IsReady+0x14>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <LL_RCC_LSE_IsReady+0x16>
 800181c:	2300      	movs	r3, #0
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <LL_RCC_GetSysClkSource>:
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <LL_RCC_GetSysClkSource+0x14>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	4013      	ands	r3, r2
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000

08001840 <LL_RCC_GetAHBPrescaler>:
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001844:	4b03      	ldr	r3, [pc, #12]	; (8001854 <LL_RCC_GetAHBPrescaler+0x14>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	23f0      	movs	r3, #240	; 0xf0
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4013      	ands	r3, r2
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000

08001858 <LL_RCC_GetAPB1Prescaler>:
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <LL_RCC_GetAPB1Prescaler+0x14>)
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	23e0      	movs	r3, #224	; 0xe0
 8001862:	01db      	lsls	r3, r3, #7
 8001864:	4013      	ands	r3, r2
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSIKER
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <LL_RCC_GetUSARTClockSource+0x20>)
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	401a      	ands	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	4313      	orrs	r3, r2
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40021000 	.word	0x40021000

08001894 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800189c:	f000 f870 	bl	8001980 <RCC_GetSystemClockFreq>
 80018a0:	0002      	movs	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f88e 	bl	80019cc <RCC_GetHCLKClockFreq>
 80018b0:	0002      	movs	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f89e 	bl	80019fc <RCC_GetPCLK1ClockFreq>
 80018c0:	0002      	movs	r2, r0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	609a      	str	r2, [r3, #8]
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b002      	add	sp, #8
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80018d8:	2300      	movs	r3, #0
 80018da:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d140      	bne.n	8001964 <LL_RCC_GetUSARTClockFreq+0x94>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ffc3 	bl	8001870 <LL_RCC_GetUSARTClockSource>
 80018ea:	0003      	movs	r3, r0
 80018ec:	4a20      	ldr	r2, [pc, #128]	; (8001970 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d01f      	beq.n	8001932 <LL_RCC_GetUSARTClockFreq+0x62>
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d825      	bhi.n	8001944 <LL_RCC_GetUSARTClockFreq+0x74>
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <LL_RCC_GetUSARTClockFreq+0xa4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d003      	beq.n	8001906 <LL_RCC_GetUSARTClockFreq+0x36>
 80018fe:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d005      	beq.n	8001910 <LL_RCC_GetUSARTClockFreq+0x40>
 8001904:	e01e      	b.n	8001944 <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001906:	f000 f83b 	bl	8001980 <RCC_GetSystemClockFreq>
 800190a:	0003      	movs	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]
        break;
 800190e:	e029      	b.n	8001964 <LL_RCC_GetUSARTClockFreq+0x94>

      case LL_RCC_USART1_CLKSOURCE_HSIKER:    /* USART1 Clock is HSI Kernel */
        if (LL_RCC_HSI_IsReady() == 1U)
 8001910:	f7ff ff66 	bl	80017e0 <LL_RCC_HSI_IsReady>
 8001914:	0003      	movs	r3, r0
 8001916:	2b01      	cmp	r3, #1
 8001918:	d121      	bne.n	800195e <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = (HSI_VALUE / ((LL_RCC_HSIKER_GetDivider() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800191a:	f7ff ff55 	bl	80017c8 <LL_RCC_HSIKER_GetDivider>
 800191e:	0003      	movs	r3, r0
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	3301      	adds	r3, #1
 8001924:	0019      	movs	r1, r3
 8001926:	4815      	ldr	r0, [pc, #84]	; (800197c <LL_RCC_GetUSARTClockFreq+0xac>)
 8001928:	f7fe fbee 	bl	8000108 <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001930:	e015      	b.n	800195e <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8001932:	f7ff ff69 	bl	8001808 <LL_RCC_LSE_IsReady>
 8001936:	0003      	movs	r3, r0
 8001938:	2b01      	cmp	r3, #1
 800193a:	d112      	bne.n	8001962 <LL_RCC_GetUSARTClockFreq+0x92>
        {
          usart_frequency = LSE_VALUE;
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001942:	e00e      	b.n	8001962 <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001944:	f000 f81c 	bl	8001980 <RCC_GetSystemClockFreq>
 8001948:	0003      	movs	r3, r0
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f83e 	bl	80019cc <RCC_GetHCLKClockFreq>
 8001950:	0003      	movs	r3, r0
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f852 	bl	80019fc <RCC_GetPCLK1ClockFreq>
 8001958:	0003      	movs	r3, r0
 800195a:	60fb      	str	r3, [r7, #12]
        break;
 800195c:	e002      	b.n	8001964 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	e000      	b.n	8001964 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 8001962:	46c0      	nop			; (mov r8, r8)
    }
  }
  else
  {
  }
  return usart_frequency;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	00030003 	.word	0x00030003
 8001974:	00030001 	.word	0x00030001
 8001978:	00030002 	.word	0x00030002
 800197c:	02dc6c00 	.word	0x02dc6c00

08001980 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001986:	f7ff ff4f 	bl	8001828 <LL_RCC_GetSysClkSource>
 800198a:	0003      	movs	r3, r0
 800198c:	2b08      	cmp	r3, #8
 800198e:	d102      	bne.n	8001996 <RCC_GetSystemClockFreq+0x16>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <RCC_GetSystemClockFreq+0x40>)
 8001992:	607b      	str	r3, [r7, #4]
      break;
 8001994:	e00f      	b.n	80019b6 <RCC_GetSystemClockFreq+0x36>
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <RCC_GetSystemClockFreq+0x44>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	0adb      	lsrs	r3, r3, #11
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	2201      	movs	r2, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <RCC_GetSystemClockFreq+0x48>)
 80019ac:	f7fe fbac 	bl	8000108 <__udivsi3>
 80019b0:	0003      	movs	r3, r0
 80019b2:	607b      	str	r3, [r7, #4]
      break;
 80019b4:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	007a1200 	.word	0x007a1200
 80019c4:	40021000 	.word	0x40021000
 80019c8:	02dc6c00 	.word	0x02dc6c00

080019cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80019d4:	f7ff ff34 	bl	8001840 <LL_RCC_GetAHBPrescaler>
 80019d8:	0003      	movs	r3, r0
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	220f      	movs	r2, #15
 80019de:	401a      	ands	r2, r3
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <RCC_GetHCLKClockFreq+0x2c>)
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	58d3      	ldr	r3, [r2, r3]
 80019e6:	221f      	movs	r2, #31
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	40da      	lsrs	r2, r3
 80019ee:	0013      	movs	r3, r2
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	08001ecc 	.word	0x08001ecc

080019fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001a04:	f7ff ff28 	bl	8001858 <LL_RCC_GetAPB1Prescaler>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	0b1a      	lsrs	r2, r3, #12
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <RCC_GetPCLK1ClockFreq+0x28>)
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	58d3      	ldr	r3, [r2, r3]
 8001a12:	221f      	movs	r2, #31
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	40da      	lsrs	r2, r3
 8001a1a:	0013      	movs	r3, r2
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b002      	add	sp, #8
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	08001f0c 	.word	0x08001f0c

08001a28 <LL_TIM_SetPrescaler>:
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <LL_TIM_SetAutoReload>:
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <LL_TIM_SetRepetitionCounter>:
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	615a      	str	r2, [r3, #20]
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <LL_TIM_Init+0xc4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <LL_TIM_Init+0x20>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a2b      	ldr	r2, [pc, #172]	; (8001b54 <LL_TIM_Init+0xc8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d107      	bne.n	8001abc <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2270      	movs	r2, #112	; 0x70
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <LL_TIM_Init+0xc4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00f      	beq.n	8001ae4 <LL_TIM_Init+0x58>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <LL_TIM_Init+0xc8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00b      	beq.n	8001ae4 <LL_TIM_Init+0x58>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <LL_TIM_Init+0xcc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <LL_TIM_Init+0x58>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a21      	ldr	r2, [pc, #132]	; (8001b5c <LL_TIM_Init+0xd0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d003      	beq.n	8001ae4 <LL_TIM_Init+0x58>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <LL_TIM_Init+0xd4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d106      	bne.n	8001af2 <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <LL_TIM_Init+0xd8>)
 8001ae8:	401a      	ands	r2, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff9d 	bl	8001a40 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff ff89 	bl	8001a28 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <LL_TIM_Init+0xc4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <LL_TIM_Init+0xa2>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LL_TIM_Init+0xd0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d003      	beq.n	8001b2e <LL_TIM_Init+0xa2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <LL_TIM_Init+0xd4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d106      	bne.n	8001b3c <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ff8e 	bl	8001a58 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff ff96 	bl	8001a70 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40002000 	.word	0x40002000
 8001b5c:	40014400 	.word	0x40014400
 8001b60:	40014800 	.word	0x40014800
 8001b64:	fffffcff 	.word	0xfffffcff

08001b68 <LL_USART_IsEnabled>:
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <LL_USART_IsEnabled+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_USART_IsEnabled+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b002      	add	sp, #8
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <LL_USART_SetPrescaler>:
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	220f      	movs	r2, #15
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <LL_USART_SetStopBitsLength>:
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <LL_USART_SetStopBitsLength+0x24>)
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	605a      	str	r2, [r3, #4]
}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	ffffcfff 	.word	0xffffcfff

08001bd8 <LL_USART_SetHWFlowCtrl>:
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <LL_USART_SetHWFlowCtrl+0x24>)
 8001be8:	401a      	ands	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	431a      	orrs	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b002      	add	sp, #8
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	fffffcff 	.word	0xfffffcff

08001c00 <LL_USART_SetBaudRate>:
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0b      	cmp	r3, #11
 8001c12:	d846      	bhi.n	8001ca2 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d043      	beq.n	8001ca2 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d126      	bne.n	8001c72 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	001a      	movs	r2, r3
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <LL_USART_SetBaudRate+0xac>)
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	58d3      	ldr	r3, [r2, r3]
 8001c30:	0019      	movs	r1, r3
 8001c32:	68b8      	ldr	r0, [r7, #8]
 8001c34:	f7fe fa68 	bl	8000108 <__udivsi3>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	005a      	lsls	r2, r3, #1
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	18d3      	adds	r3, r2, r3
 8001c42:	6a39      	ldr	r1, [r7, #32]
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7fe fa5f 	bl	8000108 <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4a17      	ldr	r2, [pc, #92]	; (8001cb0 <LL_USART_SetBaudRate+0xb0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	001a      	movs	r2, r3
 8001c60:	2307      	movs	r3, #7
 8001c62:	4013      	ands	r3, r2
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	60da      	str	r2, [r3, #12]
}
 8001c70:	e017      	b.n	8001ca2 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	001a      	movs	r2, r3
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <LL_USART_SetBaudRate+0xac>)
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	58d3      	ldr	r3, [r2, r3]
 8001c7e:	0019      	movs	r1, r3
 8001c80:	68b8      	ldr	r0, [r7, #8]
 8001c82:	f7fe fa41 	bl	8000108 <__udivsi3>
 8001c86:	0003      	movs	r3, r0
 8001c88:	001a      	movs	r2, r3
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	18d3      	adds	r3, r2, r3
 8001c90:	6a39      	ldr	r1, [r7, #32]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f7fe fa38 	bl	8000108 <__udivsi3>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	001a      	movs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	60da      	str	r2, [r3, #12]
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b006      	add	sp, #24
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	08001f2c 	.word	0x08001f2c
 8001cb0:	0000fff0 	.word	0x0000fff0

08001cb4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b08b      	sub	sp, #44	; 0x2c
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001cbe:	231f      	movs	r3, #31
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f7ff ff4b 	bl	8001b68 <LL_USART_IsEnabled>
 8001cd2:	1e03      	subs	r3, r0, #0
 8001cd4:	d153      	bne.n	8001d7e <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a2c      	ldr	r2, [pc, #176]	; (8001d8c <LL_USART_Init+0xd8>)
 8001cdc:	401a      	ands	r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	4319      	orrs	r1, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	4319      	orrs	r1, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0011      	movs	r1, r2
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff ff54 	bl	8001bb0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0011      	movs	r1, r2
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff ff61 	bl	8001bd8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <LL_USART_Init+0xdc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f7ff fdd6 	bl	80018d0 <LL_RCC_GetUSARTClockFreq>
 8001d24:	0003      	movs	r3, r0
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	e00b      	b.n	8001d42 <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <LL_USART_Init+0xe0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d107      	bne.n	8001d42 <LL_USART_Init+0x8e>
    {
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d32:	240c      	movs	r4, #12
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7ff fdac 	bl	8001894 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00f      	beq.n	8001d70 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001d50:	231f      	movs	r3, #31
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	69dc      	ldr	r4, [r3, #28]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	69b9      	ldr	r1, [r7, #24]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	0023      	movs	r3, r4
 8001d6c:	f7ff ff48 	bl	8001c00 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff ff06 	bl	8001b8a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001d7e:	231f      	movs	r3, #31
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b009      	add	sp, #36	; 0x24
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	efff69f3 	.word	0xefff69f3
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40004400 	.word	0x40004400

08001d98 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7fe f9af 	bl	8000108 <__udivsi3>
 8001daa:	0003      	movs	r3, r0
 8001dac:	001a      	movs	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <LL_InitTick+0x30>)
 8001db0:	3a01      	subs	r2, #1
 8001db2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <LL_InitTick+0x30>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dba:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <LL_InitTick+0x30>)
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001dc0:	46c0      	nop			; (mov r8, r8)
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	b002      	add	sp, #8
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001dd4:	23fa      	movs	r3, #250	; 0xfa
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0011      	movs	r1, r2
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7ff ffdb 	bl	8001d98 <LL_InitTick>
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b002      	add	sp, #8
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <LL_mDelay+0x44>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	d00c      	beq.n	8001e20 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8001e0c:	e008      	b.n	8001e20 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <LL_mDelay+0x44>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	4013      	ands	r3, r2
 8001e18:	d002      	beq.n	8001e20 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f3      	bne.n	8001e0e <LL_mDelay+0x22>
    }
  }
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <LL_SetSystemCoreClock+0x18>)
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b002      	add	sp, #8
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	20000000 	.word	0x20000000

08001e50 <__libc_init_array>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	2600      	movs	r6, #0
 8001e54:	4d0c      	ldr	r5, [pc, #48]	; (8001e88 <__libc_init_array+0x38>)
 8001e56:	4c0d      	ldr	r4, [pc, #52]	; (8001e8c <__libc_init_array+0x3c>)
 8001e58:	1b64      	subs	r4, r4, r5
 8001e5a:	10a4      	asrs	r4, r4, #2
 8001e5c:	42a6      	cmp	r6, r4
 8001e5e:	d109      	bne.n	8001e74 <__libc_init_array+0x24>
 8001e60:	2600      	movs	r6, #0
 8001e62:	f000 f821 	bl	8001ea8 <_init>
 8001e66:	4d0a      	ldr	r5, [pc, #40]	; (8001e90 <__libc_init_array+0x40>)
 8001e68:	4c0a      	ldr	r4, [pc, #40]	; (8001e94 <__libc_init_array+0x44>)
 8001e6a:	1b64      	subs	r4, r4, r5
 8001e6c:	10a4      	asrs	r4, r4, #2
 8001e6e:	42a6      	cmp	r6, r4
 8001e70:	d105      	bne.n	8001e7e <__libc_init_array+0x2e>
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	00b3      	lsls	r3, r6, #2
 8001e76:	58eb      	ldr	r3, [r5, r3]
 8001e78:	4798      	blx	r3
 8001e7a:	3601      	adds	r6, #1
 8001e7c:	e7ee      	b.n	8001e5c <__libc_init_array+0xc>
 8001e7e:	00b3      	lsls	r3, r6, #2
 8001e80:	58eb      	ldr	r3, [r5, r3]
 8001e82:	4798      	blx	r3
 8001e84:	3601      	adds	r6, #1
 8001e86:	e7f2      	b.n	8001e6e <__libc_init_array+0x1e>
 8001e88:	08001f5c 	.word	0x08001f5c
 8001e8c:	08001f5c 	.word	0x08001f5c
 8001e90:	08001f5c 	.word	0x08001f5c
 8001e94:	08001f60 	.word	0x08001f60

08001e98 <memset>:
 8001e98:	0003      	movs	r3, r0
 8001e9a:	1882      	adds	r2, r0, r2
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <memset+0xa>
 8001ea0:	4770      	bx	lr
 8001ea2:	7019      	strb	r1, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e7f9      	b.n	8001e9c <memset+0x4>

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
