
prj1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d08  08002d08  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002d08  08002d08  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d08  08002d08  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000004  08002d14  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08002d14  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008643  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001deb  00000000  00000000  0002866f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002a460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002ad70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001023a  00000000  00000000  0002b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000078d0  00000000  00000000  0003b7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000534bf  00000000  00000000  000430a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f20  00000000  00000000  000965b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c40 	.word	0x08002c40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002c40 	.word	0x08002c40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__clzsi2>:
 8000220:	211c      	movs	r1, #28
 8000222:	2301      	movs	r3, #1
 8000224:	041b      	lsls	r3, r3, #16
 8000226:	4298      	cmp	r0, r3
 8000228:	d301      	bcc.n	800022e <__clzsi2+0xe>
 800022a:	0c00      	lsrs	r0, r0, #16
 800022c:	3910      	subs	r1, #16
 800022e:	0a1b      	lsrs	r3, r3, #8
 8000230:	4298      	cmp	r0, r3
 8000232:	d301      	bcc.n	8000238 <__clzsi2+0x18>
 8000234:	0a00      	lsrs	r0, r0, #8
 8000236:	3908      	subs	r1, #8
 8000238:	091b      	lsrs	r3, r3, #4
 800023a:	4298      	cmp	r0, r3
 800023c:	d301      	bcc.n	8000242 <__clzsi2+0x22>
 800023e:	0900      	lsrs	r0, r0, #4
 8000240:	3904      	subs	r1, #4
 8000242:	a202      	add	r2, pc, #8	; (adr r2, 800024c <__clzsi2+0x2c>)
 8000244:	5c10      	ldrb	r0, [r2, r0]
 8000246:	1840      	adds	r0, r0, r1
 8000248:	4770      	bx	lr
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	02020304 	.word	0x02020304
 8000250:	01010101 	.word	0x01010101
	...

0800025c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	0002      	movs	r2, r0
 8000264:	1dfb      	adds	r3, r7, #7
 8000266:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b7f      	cmp	r3, #127	; 0x7f
 800026e:	d809      	bhi.n	8000284 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	001a      	movs	r2, r3
 8000276:	231f      	movs	r3, #31
 8000278:	401a      	ands	r2, r3
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <__NVIC_EnableIRQ+0x30>)
 800027c:	2101      	movs	r1, #1
 800027e:	4091      	lsls	r1, r2
 8000280:	000a      	movs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000284:	46c0      	nop			; (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b002      	add	sp, #8
 800028a:	bd80      	pop	{r7, pc}
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	0002      	movs	r2, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b7f      	cmp	r3, #127	; 0x7f
 80002a4:	d828      	bhi.n	80002f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a6:	4a2f      	ldr	r2, [pc, #188]	; (8000364 <__NVIC_SetPriority+0xd4>)
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b25b      	sxtb	r3, r3
 80002ae:	089b      	lsrs	r3, r3, #2
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	589b      	ldr	r3, [r3, r2]
 80002b6:	1dfa      	adds	r2, r7, #7
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	0011      	movs	r1, r2
 80002bc:	2203      	movs	r2, #3
 80002be:	400a      	ands	r2, r1
 80002c0:	00d2      	lsls	r2, r2, #3
 80002c2:	21ff      	movs	r1, #255	; 0xff
 80002c4:	4091      	lsls	r1, r2
 80002c6:	000a      	movs	r2, r1
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	401a      	ands	r2, r3
 80002cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	019b      	lsls	r3, r3, #6
 80002d2:	22ff      	movs	r2, #255	; 0xff
 80002d4:	401a      	ands	r2, r3
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	0018      	movs	r0, r3
 80002dc:	2303      	movs	r3, #3
 80002de:	4003      	ands	r3, r0
 80002e0:	00db      	lsls	r3, r3, #3
 80002e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	481f      	ldr	r0, [pc, #124]	; (8000364 <__NVIC_SetPriority+0xd4>)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	089b      	lsrs	r3, r3, #2
 80002ee:	430a      	orrs	r2, r1
 80002f0:	33c0      	adds	r3, #192	; 0xc0
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002f6:	e031      	b.n	800035c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f8:	4a1b      	ldr	r2, [pc, #108]	; (8000368 <__NVIC_SetPriority+0xd8>)
 80002fa:	1dfb      	adds	r3, r7, #7
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	0019      	movs	r1, r3
 8000300:	230f      	movs	r3, #15
 8000302:	400b      	ands	r3, r1
 8000304:	3b08      	subs	r3, #8
 8000306:	089b      	lsrs	r3, r3, #2
 8000308:	3306      	adds	r3, #6
 800030a:	009b      	lsls	r3, r3, #2
 800030c:	18d3      	adds	r3, r2, r3
 800030e:	3304      	adds	r3, #4
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	1dfa      	adds	r2, r7, #7
 8000314:	7812      	ldrb	r2, [r2, #0]
 8000316:	0011      	movs	r1, r2
 8000318:	2203      	movs	r2, #3
 800031a:	400a      	ands	r2, r1
 800031c:	00d2      	lsls	r2, r2, #3
 800031e:	21ff      	movs	r1, #255	; 0xff
 8000320:	4091      	lsls	r1, r2
 8000322:	000a      	movs	r2, r1
 8000324:	43d2      	mvns	r2, r2
 8000326:	401a      	ands	r2, r3
 8000328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	019b      	lsls	r3, r3, #6
 800032e:	22ff      	movs	r2, #255	; 0xff
 8000330:	401a      	ands	r2, r3
 8000332:	1dfb      	adds	r3, r7, #7
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	0018      	movs	r0, r3
 8000338:	2303      	movs	r3, #3
 800033a:	4003      	ands	r3, r0
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000340:	4809      	ldr	r0, [pc, #36]	; (8000368 <__NVIC_SetPriority+0xd8>)
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	001c      	movs	r4, r3
 8000348:	230f      	movs	r3, #15
 800034a:	4023      	ands	r3, r4
 800034c:	3b08      	subs	r3, #8
 800034e:	089b      	lsrs	r3, r3, #2
 8000350:	430a      	orrs	r2, r1
 8000352:	3306      	adds	r3, #6
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	18c3      	adds	r3, r0, r3
 8000358:	3304      	adds	r3, #4
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b003      	add	sp, #12
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	e000e100 	.word	0xe000e100
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <LL_IOP_GRP1_EnableClock+0x28>)
 8000376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_IOP_GRP1_EnableClock+0x28>)
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	430a      	orrs	r2, r1
 800037e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <LL_IOP_GRP1_EnableClock+0x28>)
 8000382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800038a:	68fb      	ldr	r3, [r7, #12]
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b004      	add	sp, #16
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40021000 	.word	0x40021000

08000398 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_CONFIG_LINE14
  *         @arg @ref LL_EXTI_CONFIG_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03u], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << \
 80003a2:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <LL_EXTI_SetEXTISource+0x48>)
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2103      	movs	r1, #3
 80003a8:	400b      	ands	r3, r1
 80003aa:	3318      	adds	r3, #24
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	589b      	ldr	r3, [r3, r2]
 80003b0:	683a      	ldr	r2, [r7, #0]
 80003b2:	0c12      	lsrs	r2, r2, #16
 80003b4:	2107      	movs	r1, #7
 80003b6:	4091      	lsls	r1, r2
 80003b8:	000a      	movs	r2, r1
 80003ba:	43d2      	mvns	r2, r2
 80003bc:	401a      	ands	r2, r3
 80003be:	0011      	movs	r1, r2
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	409a      	lsls	r2, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <LL_EXTI_SetEXTISource+0x48>)
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	2403      	movs	r4, #3
 80003ce:	4023      	ands	r3, r4
 80003d0:	430a      	orrs	r2, r1
 80003d2:	3318      	adds	r3, #24
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	501a      	str	r2, [r3, r0]
             (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	b003      	add	sp, #12
 80003de:	bd90      	pop	{r4, r7, pc}
 80003e0:	40021800 	.word	0x40021800

080003e4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80003e4:	b590      	push	{r4, r7, lr}
 80003e6:	b08d      	sub	sp, #52	; 0x34
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681c      	ldr	r4, [r3, #0]
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	61bb      	str	r3, [r7, #24]
#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
#else
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80003f8:	231f      	movs	r3, #31
 80003fa:	617b      	str	r3, [r7, #20]

  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	085b      	lsrs	r3, r3, #1
 8000404:	61bb      	str	r3, [r7, #24]
 8000406:	e00e      	b.n	8000426 <LL_GPIO_SetPinMode+0x42>
  {
    result <<= 1U;
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 800040e:	69bb      	ldr	r3, [r7, #24]
 8000410:	2201      	movs	r2, #1
 8000412:	4013      	ands	r3, r2
 8000414:	693a      	ldr	r2, [r7, #16]
 8000416:	4313      	orrs	r3, r2
 8000418:	613b      	str	r3, [r7, #16]
    s--;
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	3b01      	subs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	085b      	lsrs	r3, r3, #1
 8000424:	61bb      	str	r3, [r7, #24]
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1ed      	bne.n	8000408 <LL_GPIO_SetPinMode+0x24>
  }
  result <<= s;                        /* shift when v's highest bits are zero */
 800042c:	693a      	ldr	r2, [r7, #16]
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	409a      	lsls	r2, r3
 8000432:	0013      	movs	r3, r2
 8000434:	613b      	str	r3, [r7, #16]
#endif
  return result;
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800043a:	69fb      	ldr	r3, [r7, #28]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d101      	bne.n	8000444 <LL_GPIO_SetPinMode+0x60>
  {
    return 32U;
 8000440:	2320      	movs	r3, #32
 8000442:	e004      	b.n	800044e <LL_GPIO_SetPinMode+0x6a>
  }
  return __builtin_clz(value);
 8000444:	69f8      	ldr	r0, [r7, #28]
 8000446:	f7ff feeb 	bl	8000220 <__clzsi2>
 800044a:	0003      	movs	r3, r0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	2203      	movs	r2, #3
 8000452:	409a      	lsls	r2, r3
 8000454:	0013      	movs	r3, r2
 8000456:	43db      	mvns	r3, r3
 8000458:	401c      	ands	r4, r3
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800045e:	231f      	movs	r3, #31
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8000462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000464:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000468:	085b      	lsrs	r3, r3, #1
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
 800046c:	e00e      	b.n	800048c <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 800046e:	6a3b      	ldr	r3, [r7, #32]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8000474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	6a3a      	ldr	r2, [r7, #32]
 800047c:	4313      	orrs	r3, r2
 800047e:	623b      	str	r3, [r7, #32]
    s--;
 8000480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000482:	3b01      	subs	r3, #1
 8000484:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000488:	085b      	lsrs	r3, r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
 800048c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1ed      	bne.n	800046e <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000492:	6a3a      	ldr	r2, [r7, #32]
 8000494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000496:	409a      	lsls	r2, r3
 8000498:	0013      	movs	r3, r2
 800049a:	623b      	str	r3, [r7, #32]
  return result;
 800049c:	6a3b      	ldr	r3, [r7, #32]
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80004a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d101      	bne.n	80004aa <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 80004a6:	2320      	movs	r3, #32
 80004a8:	e004      	b.n	80004b4 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 80004aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80004ac:	f7ff feb8 	bl	8000220 <__clzsi2>
 80004b0:	0003      	movs	r3, r0
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	409a      	lsls	r2, r3
 80004ba:	0013      	movs	r3, r2
 80004bc:	0022      	movs	r2, r4
 80004be:	431a      	orrs	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	601a      	str	r2, [r3, #0]
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b00d      	add	sp, #52	; 0x34
 80004ca:	bd90      	pop	{r4, r7, pc}

080004cc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b08d      	sub	sp, #52	; 0x34
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	68dc      	ldr	r4, [r3, #12]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80004e0:	231f      	movs	r3, #31
 80004e2:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	085b      	lsrs	r3, r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	e00e      	b.n	800050e <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	2201      	movs	r2, #1
 80004fa:	4013      	ands	r3, r2
 80004fc:	693a      	ldr	r2, [r7, #16]
 80004fe:	4313      	orrs	r3, r2
 8000500:	613b      	str	r3, [r7, #16]
    s--;
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3b01      	subs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	085b      	lsrs	r3, r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d1ed      	bne.n	80004f0 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8000514:	693a      	ldr	r2, [r7, #16]
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	409a      	lsls	r2, r3
 800051a:	0013      	movs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
  return result;
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <LL_GPIO_SetPinPull+0x60>
    return 32U;
 8000528:	2320      	movs	r3, #32
 800052a:	e004      	b.n	8000536 <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 800052c:	69f8      	ldr	r0, [r7, #28]
 800052e:	f7ff fe77 	bl	8000220 <__clzsi2>
 8000532:	0003      	movs	r3, r0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2203      	movs	r2, #3
 800053a:	409a      	lsls	r2, r3
 800053c:	0013      	movs	r3, r2
 800053e:	43db      	mvns	r3, r3
 8000540:	401c      	ands	r4, r3
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8000546:	231f      	movs	r3, #31
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800054c:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800054e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	62bb      	str	r3, [r7, #40]	; 0x28
 8000554:	e00e      	b.n	8000574 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 8000556:	6a3b      	ldr	r3, [r7, #32]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 800055c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800055e:	2201      	movs	r2, #1
 8000560:	4013      	ands	r3, r2
 8000562:	6a3a      	ldr	r2, [r7, #32]
 8000564:	4313      	orrs	r3, r2
 8000566:	623b      	str	r3, [r7, #32]
    s--;
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	3b01      	subs	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000570:	085b      	lsrs	r3, r3, #1
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
 8000574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1ed      	bne.n	8000556 <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800057a:	6a3a      	ldr	r2, [r7, #32]
 800057c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057e:	409a      	lsls	r2, r3
 8000580:	0013      	movs	r3, r2
 8000582:	623b      	str	r3, [r7, #32]
  return result;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8000588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 800058e:	2320      	movs	r3, #32
 8000590:	e004      	b.n	800059c <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 8000592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000594:	f7ff fe44 	bl	8000220 <__clzsi2>
 8000598:	0003      	movs	r3, r0
 800059a:	b2db      	uxtb	r3, r3
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0013      	movs	r3, r2
 80005a4:	0022      	movs	r2, r4
 80005a6:	431a      	orrs	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	60da      	str	r2, [r3, #12]
}
 80005ac:	46c0      	nop			; (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b00d      	add	sp, #52	; 0x34
 80005b2:	bd90      	pop	{r4, r7, pc}

080005b4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	619a      	str	r2, [r3, #24]
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b002      	add	sp, #8
 80005ca:	bd80      	pop	{r7, pc}

080005cc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80005ea:	2418      	movs	r4, #24
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2308      	movs	r3, #8
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f002 fb1b 	bl	8002c30 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	003b      	movs	r3, r7
 80005fc:	0018      	movs	r0, r3
 80005fe:	2318      	movs	r3, #24
 8000600:	001a      	movs	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	f002 fb14 	bl	8002c30 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000608:	2004      	movs	r0, #4
 800060a:	f7ff feaf 	bl	800036c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOF);
 800060e:	2020      	movs	r0, #32
 8000610:	f7ff feac 	bl	800036c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff fea9 	bl	800036c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 800061a:	2002      	movs	r0, #2
 800061c:	f7ff fea6 	bl	800036c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(SPI1_CS0_GPIO_Port, SPI1_CS0_Pin);
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	2108      	movs	r1, #8
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff ffc4 	bl	80005b4 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 800062c:	4b43      	ldr	r3, [pc, #268]	; (800073c <MX_GPIO_Init+0x158>)
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ffcb 	bl	80005cc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = nRST_Pin;
 8000636:	003b      	movs	r3, r7
 8000638:	2204      	movs	r2, #4
 800063a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(nRST_GPIO_Port, &GPIO_InitStruct);
 8000648:	003b      	movs	r3, r7
 800064a:	4a3d      	ldr	r2, [pc, #244]	; (8000740 <MX_GPIO_Init+0x15c>)
 800064c:	0019      	movs	r1, r3
 800064e:	0010      	movs	r0, r2
 8000650:	f001 fe2a 	bl	80022a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI1_CS0_Pin;
 8000654:	003b      	movs	r3, r7
 8000656:	2208      	movs	r2, #8
 8000658:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800065a:	003b      	movs	r3, r7
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]

  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000666:	003b      	movs	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  //GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;

  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800066c:	003b      	movs	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(SPI1_CS0_GPIO_Port, &GPIO_InitStruct);
 8000672:	003a      	movs	r2, r7
 8000674:	23a0      	movs	r3, #160	; 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fe14 	bl	80022a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000680:	003b      	movs	r3, r7
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000688:	003b      	movs	r3, r7
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	003b      	movs	r3, r7
 8000690:	2203      	movs	r2, #3
 8000692:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000694:	003b      	movs	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069a:	003b      	movs	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80006a0:	003b      	movs	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	003a      	movs	r2, r7
 80006a8:	23a0      	movs	r3, #160	; 0xa0
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fdfa 	bl	80022a8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80006b4:	003b      	movs	r3, r7
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2201      	movs	r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2203      	movs	r2, #3
 80006c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006d2:	003b      	movs	r3, r7
 80006d4:	4a19      	ldr	r2, [pc, #100]	; (800073c <MX_GPIO_Init+0x158>)
 80006d6:	0019      	movs	r1, r3
 80006d8:	0010      	movs	r0, r2
 80006da:	f001 fde5 	bl	80022a8 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_CONFIG_PORTA, LL_EXTI_CONFIG_LINE0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe59 	bl	8000398 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80006e6:	0021      	movs	r1, r4
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2201      	movs	r2, #1
 80006fe:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000700:	187b      	adds	r3, r7, r1
 8000702:	0018      	movs	r0, r3
 8000704:	f001 faec 	bl	8001ce0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(IMU_READY_0_GPIO_Port, IMU_READY_0_Pin, LL_GPIO_PULL_NO);
 8000708:	23a0      	movs	r3, #160	; 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	2200      	movs	r2, #0
 800070e:	2101      	movs	r1, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fedb 	bl	80004cc <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(IMU_READY_0_GPIO_Port, IMU_READY_0_Pin, LL_GPIO_MODE_INPUT);
 8000716:	23a0      	movs	r3, #160	; 0xa0
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2200      	movs	r2, #0
 800071c:	2101      	movs	r1, #1
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fe60 	bl	80003e4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_1_IRQn, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2005      	movs	r0, #5
 8000728:	f7ff fdb2 	bl	8000290 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_1_IRQn);
 800072c:	2005      	movs	r0, #5
 800072e:	f7ff fd95 	bl	800025c <__NVIC_EnableIRQ>

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b009      	add	sp, #36	; 0x24
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	50000400 	.word	0x50000400
 8000740:	50001400 	.word	0x50001400

08000744 <__NVIC_SetPriority>:
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	0002      	movs	r2, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	1dfb      	adds	r3, r7, #7
 8000750:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b7f      	cmp	r3, #127	; 0x7f
 8000758:	d828      	bhi.n	80007ac <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <__NVIC_SetPriority+0xd4>)
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25b      	sxtb	r3, r3
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	33c0      	adds	r3, #192	; 0xc0
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	589b      	ldr	r3, [r3, r2]
 800076a:	1dfa      	adds	r2, r7, #7
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	0011      	movs	r1, r2
 8000770:	2203      	movs	r2, #3
 8000772:	400a      	ands	r2, r1
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	21ff      	movs	r1, #255	; 0xff
 8000778:	4091      	lsls	r1, r2
 800077a:	000a      	movs	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	401a      	ands	r2, r3
 8000780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	401a      	ands	r2, r3
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	2303      	movs	r3, #3
 8000792:	4003      	ands	r3, r0
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	481f      	ldr	r0, [pc, #124]	; (8000818 <__NVIC_SetPriority+0xd4>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	089b      	lsrs	r3, r3, #2
 80007a2:	430a      	orrs	r2, r1
 80007a4:	33c0      	adds	r3, #192	; 0xc0
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	501a      	str	r2, [r3, r0]
}
 80007aa:	e031      	b.n	8000810 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <__NVIC_SetPriority+0xd8>)
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0019      	movs	r1, r3
 80007b4:	230f      	movs	r3, #15
 80007b6:	400b      	ands	r3, r1
 80007b8:	3b08      	subs	r3, #8
 80007ba:	089b      	lsrs	r3, r3, #2
 80007bc:	3306      	adds	r3, #6
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	3304      	adds	r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1dfa      	adds	r2, r7, #7
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	0011      	movs	r1, r2
 80007cc:	2203      	movs	r2, #3
 80007ce:	400a      	ands	r2, r1
 80007d0:	00d2      	lsls	r2, r2, #3
 80007d2:	21ff      	movs	r1, #255	; 0xff
 80007d4:	4091      	lsls	r1, r2
 80007d6:	000a      	movs	r2, r1
 80007d8:	43d2      	mvns	r2, r2
 80007da:	401a      	ands	r2, r3
 80007dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	019b      	lsls	r3, r3, #6
 80007e2:	22ff      	movs	r2, #255	; 0xff
 80007e4:	401a      	ands	r2, r3
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0018      	movs	r0, r3
 80007ec:	2303      	movs	r3, #3
 80007ee:	4003      	ands	r3, r0
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <__NVIC_SetPriority+0xd8>)
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001c      	movs	r4, r3
 80007fc:	230f      	movs	r3, #15
 80007fe:	4023      	ands	r3, r4
 8000800:	3b08      	subs	r3, #8
 8000802:	089b      	lsrs	r3, r3, #2
 8000804:	430a      	orrs	r2, r1
 8000806:	3306      	adds	r3, #6
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	18c3      	adds	r3, r0, r3
 800080c:	3304      	adds	r3, #4
 800080e:	601a      	str	r2, [r3, #0]
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b003      	add	sp, #12
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <LL_RCC_HSI_Enable+0x18>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b03      	ldr	r3, [pc, #12]	; (8000838 <LL_RCC_HSI_Enable+0x18>)
 800082a:	2180      	movs	r1, #128	; 0x80
 800082c:	0049      	lsls	r1, r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000

0800083c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <LL_RCC_HSI_IsReady+0x24>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	401a      	ands	r2, r3
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	429a      	cmp	r2, r3
 8000850:	d101      	bne.n	8000856 <LL_RCC_HSI_IsReady+0x1a>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <LL_RCC_HSI_IsReady+0x1c>
 8000856:	2300      	movs	r3, #0
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40021000 	.word	0x40021000

08000864 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a06      	ldr	r2, [pc, #24]	; (800088c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000872:	4013      	ands	r3, r2
 8000874:	0019      	movs	r1, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	021a      	lsls	r2, r3, #8
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800087c:	430a      	orrs	r2, r1
 800087e:	605a      	str	r2, [r3, #4]
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000
 800088c:	ffff80ff 	.word	0xffff80ff

08000890 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_RCC_SetSysClkSource+0x24>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2207      	movs	r2, #7
 800089e:	4393      	bics	r3, r2
 80008a0:	0019      	movs	r1, r3
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <LL_RCC_SetSysClkSource+0x24>)
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	609a      	str	r2, [r3, #8]
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <LL_RCC_GetSysClkSource+0x14>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	2238      	movs	r2, #56	; 0x38
 80008c2:	4013      	ands	r3, r2
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_HCLK_DIV_256  
  *         @arg @ref LL_RCC_HCLK_DIV_512  
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <LL_RCC_SetAHBPrescaler+0x28>)
 80008de:	4013      	ands	r3, r2
 80008e0:	0019      	movs	r1, r3
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	609a      	str	r2, [r3, #8]
}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b002      	add	sp, #8
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40021000 	.word	0x40021000
 80008f8:	fffff0ff 	.word	0xfffff0ff

080008fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <LL_RCC_SetAPB1Prescaler+0x28>)
 800090a:	4013      	ands	r3, r2
 800090c:	0019      	movs	r1, r3
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	430a      	orrs	r2, r1
 8000914:	609a      	str	r2, [r3, #8]
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b002      	add	sp, #8
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	40021000 	.word	0x40021000
 8000924:	ffff8fff 	.word	0xffff8fff

08000928 <LL_RCC_SetHSIDiv>:
  *         @arg @ref LL_RCC_HSI_DIV_64
  *         @arg @ref LL_RCC_HSI_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetHSIDiv(uint32_t HSIDiv)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, HSIDiv);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <LL_RCC_SetHSIDiv+0x24>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <LL_RCC_SetHSIDiv+0x28>)
 8000936:	4013      	ands	r3, r2
 8000938:	0019      	movs	r1, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <LL_RCC_SetHSIDiv+0x24>)
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	430a      	orrs	r2, r1
 8000940:	601a      	str	r2, [r3, #0]
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40021000 	.word	0x40021000
 8000950:	ffffc7ff 	.word	0xffffc7ff

08000954 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_64
  *         @arg @ref LL_RCC_MCO1_DIV_128
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <LL_RCC_ConfigMCO+0x28>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	0a19      	lsrs	r1, r3, #8
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	431a      	orrs	r2, r3
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <LL_RCC_ConfigMCO+0x28>)
 800096e:	430a      	orrs	r2, r1
 8000970:	609a      	str	r2, [r3, #8]
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	40021000 	.word	0x40021000

08000980 <LL_APB1_GRP1_EnableClock>:
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800098a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <LL_APB1_GRP1_EnableClock+0x28>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	430a      	orrs	r2, r1
 8000992:	63da      	str	r2, [r3, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <LL_APB1_GRP1_EnableClock+0x28>)
 8000996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000

080009ac <LL_APB2_GRP1_EnableClock>:
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80009b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	430a      	orrs	r2, r1
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <LL_APB2_GRP1_EnableClock+0x28>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	4013      	ands	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b004      	add	sp, #16
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000

080009d8 <LL_SYSCFG_EnablePinRemap>:
  *         @arg @ref LL_SYSCFG_PIN_RMP_PA11
  *         @arg @ref LL_SYSCFG_PIN_RMP_PA12
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnablePinRemap(uint32_t PinRemap)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80009e0:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <LL_SYSCFG_EnablePinRemap+0x1c>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <LL_SYSCFG_EnablePinRemap+0x1c>)
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	601a      	str	r2, [r3, #0]
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b002      	add	sp, #8
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40010000 	.word	0x40010000

080009f8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <LL_FLASH_SetLatency+0x24>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2207      	movs	r2, #7
 8000a06:	4393      	bics	r3, r2
 8000a08:	0019      	movs	r1, r3
 8000a0a:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <LL_FLASH_SetLatency+0x24>)
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	40022000 	.word	0x40022000

08000a20 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2240      	movs	r2, #64	; 0x40
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	601a      	str	r2, [r3, #0]
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8000a50:	2301      	movs	r3, #1
 8000a52:	e000      	b.n	8000a56 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d101      	bne.n	8000a76 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b002      	add	sp, #8
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	330c      	adds	r3, #12
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	000a      	movs	r2, r1
 8000aa2:	1cfb      	adds	r3, r7, #3
 8000aa4:	701a      	strb	r2, [r3, #0]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1cfa      	adds	r2, r7, #3
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LL_GPIO_SetOutputPin>:
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	619a      	str	r2, [r3, #24]
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <LL_GPIO_ResetOutputPin>:
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4013      	ands	r3, r2
 8000b02:	041a      	lsls	r2, r3, #16
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	619a      	str	r2, [r3, #24]
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <iputs1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void iputs1(char *msg)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   while(*msg)
 8000b22:	e006      	b.n	8000b32 <iputs1+0x18>
   Send_Data_To_UART1(*msg++);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 f821 	bl	8000b74 <Send_Data_To_UART1>
   while(*msg)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1f4      	bne.n	8000b24 <iputs1+0xa>
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <iputbytes1>:

void iputbytes1(uint8_t *msg, uint32_t ilen)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
   while(ilen--)
 8000b4e:	e006      	b.n	8000b5e <iputbytes1+0x1a>
   Send_Data_To_UART1(*msg++);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 f80b 	bl	8000b74 <Send_Data_To_UART1>
   while(ilen--)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	1e5a      	subs	r2, r3, #1
 8000b62:	603a      	str	r2, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f3      	bne.n	8000b50 <iputbytes1+0xc>
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <Send_Data_To_UART1>:

void Send_Data_To_UART1 (uint8_t c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	701a      	strb	r2, [r3, #0]
   USART1->TDR = c;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <Send_Data_To_UART1+0x2c>)
 8000b82:	1dfa      	adds	r2, r7, #7
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28

   while( (USART1-> ISR & (1<<7) ) ==0 );
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <Send_Data_To_UART1+0x2c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	4013      	ands	r3, r2
 8000b92:	d0fa      	beq.n	8000b8a <Send_Data_To_UART1+0x16>
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40013800 	.word	0x40013800

08000ba4 <SPI_transfer>:
   uint32_t inum = icount;
   while (inum--) ;
}

uint8_t SPI_transfer(uint8_t data)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
   // transmit
	LL_SPI_TransmitData8(MMC_SPI, data);
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <SPI_transfer+0x48>)
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	0010      	movs	r0, r2
 8000bba:	f7ff ff6d 	bl	8000a98 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_TXE(MMC_SPI));
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <SPI_transfer+0x48>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff ff4b 	bl	8000a5e <LL_SPI_IsActiveFlag_TXE>
 8000bc8:	1e03      	subs	r3, r0, #0
 8000bca:	d0f9      	beq.n	8000bc0 <SPI_transfer+0x1c>

   // receive
	while(!LL_SPI_IsActiveFlag_RXNE(MMC_SPI));
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <SPI_transfer+0x48>)
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ff33 	bl	8000a3c <LL_SPI_IsActiveFlag_RXNE>
 8000bd6:	1e03      	subs	r3, r0, #0
 8000bd8:	d0f9      	beq.n	8000bce <SPI_transfer+0x2a>
	return LL_SPI_ReceiveData8(MMC_SPI);
 8000bda:	4b04      	ldr	r3, [pc, #16]	; (8000bec <SPI_transfer+0x48>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff4f 	bl	8000a80 <LL_SPI_ReceiveData8>
 8000be2:	0003      	movs	r3, r0

}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40013000 	.word	0x40013000

08000bf0 <mmc0_read_byte>:
uint8_t mmc0_read_byte(uint8_t addr)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	0002      	movs	r2, r0
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	701a      	strb	r2, [r3, #0]
    uint8_t value;
 
   LL_GPIO_ResetOutputPin((GPIO_TypeDef *)GPIOA, LL_GPIO_PIN_3);
 8000bfc:	23a0      	movs	r3, #160	; 0xa0
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	2108      	movs	r1, #8
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff66 	bl	8000ad4 <LL_GPIO_ResetOutputPin>

    SPI_transfer(0x80|addr );
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	4252      	negs	r2, r2
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ffc5 	bl	8000ba4 <SPI_transfer>
    value  = SPI_transfer(0x00);
 8000c1a:	250f      	movs	r5, #15
 8000c1c:	197c      	adds	r4, r7, r5
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ffc0 	bl	8000ba4 <SPI_transfer>
 8000c24:	0003      	movs	r3, r0
 8000c26:	7023      	strb	r3, [r4, #0]

    LL_GPIO_SetOutputPin((GPIO_TypeDef *)GPIOA, LL_GPIO_PIN_3);
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff44 	bl	8000abc <LL_GPIO_SetOutputPin>
 

    return value;
 8000c34:	197b      	adds	r3, r7, r5
 8000c36:	781b      	ldrb	r3, [r3, #0]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b004      	add	sp, #16
 8000c3e:	bdb0      	pop	{r4, r5, r7, pc}

08000c40 <mmc0_write_byte>:

void mmc0_write_byte(uint8_t addr,  uint8_t value)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	1c0a      	adds	r2, r1, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 
   LL_GPIO_ResetOutputPin((GPIO_TypeDef *)GPIOA, LL_GPIO_PIN_3);
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2108      	movs	r1, #8
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff3b 	bl	8000ad4 <LL_GPIO_ResetOutputPin>
 
    SPI_transfer(addr);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff ff9e 	bl	8000ba4 <SPI_transfer>
    SPI_transfer(value);
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff99 	bl	8000ba4 <SPI_transfer>
 
    LL_GPIO_SetOutputPin((GPIO_TypeDef *)GPIOA, LL_GPIO_PIN_3);
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	2108      	movs	r1, #8
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff1f 	bl	8000abc <LL_GPIO_SetOutputPin>
 
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <mmc0_read_bytes>:

void mmc0_read_bytes(uint8_t addr ,uint8_t length ,uint8_t *buffer)
{
 8000c86:	b590      	push	{r4, r7, lr}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	603a      	str	r2, [r7, #0]
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	1c02      	adds	r2, r0, #0
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	1c0a      	adds	r2, r1, #0
 8000c98:	701a      	strb	r2, [r3, #0]
   //read data
	for(int index = 0; index < length; index++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e010      	b.n	8000cc2 <mmc0_read_bytes+0x3c>
	{
		buffer[index]  = mmc0_read_byte(addr+index);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	b2d9      	uxtb	r1, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	18d4      	adds	r4, r2, r3
 8000cb2:	0008      	movs	r0, r1
 8000cb4:	f7ff ff9c 	bl	8000bf0 <mmc0_read_byte>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	7023      	strb	r3, [r4, #0]
	for(int index = 0; index < length; index++)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	1dbb      	adds	r3, r7, #6
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbe9      	blt.n	8000ca0 <mmc0_read_bytes+0x1a>
	} 
 
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b005      	add	sp, #20
 8000cd4:	bd90      	pop	{r4, r7, pc}
	...

08000cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t ivalue=0;
 8000cde:	242f      	movs	r4, #47	; 0x2f
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fe60 	bl	80009ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cec:	2380      	movs	r3, #128	; 0x80
 8000cee:	055b      	lsls	r3, r3, #21
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fe45 	bl	8000980 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fd21 	bl	8000744 <__NVIC_SetPriority>

  LL_SYSCFG_EnablePinRemap(LL_SYSCFG_PIN_RMP_PA11);
 8000d02:	2008      	movs	r0, #8
 8000d04:	f7ff fe68 	bl	80009d8 <LL_SYSCFG_EnablePinRemap>
  LL_SYSCFG_EnablePinRemap(LL_SYSCFG_PIN_RMP_PA12);
 8000d08:	2010      	movs	r0, #16
 8000d0a:	f7ff fe65 	bl	80009d8 <LL_SYSCFG_EnablePinRemap>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0e:	f000 f877 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d12:	f7ff fc67 	bl	80005e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 fe63 	bl	80019e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d1a:	f000 fc0b 	bl	8001534 <MX_TIM1_Init>
  MX_SPI1_Init();
 8000d1e:	f000 f905 	bl	8000f2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_4);   //12Mhz = 48Mhz/4
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	059a      	lsls	r2, r3, #22
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	045b      	lsls	r3, r3, #17
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fe11 	bl	8000954 <LL_RCC_ConfigMCO>
  
  iputs1("start...");
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <main+0x118>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fef0 	bl	8000b1a <iputs1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  LL_SPI_Enable(SPI1);
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <main+0x11c>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fe6f 	bl	8000a20 <LL_SPI_Enable>
  
  
  //------------------MMC0-----init-----------------
  
    //check device id
    ivalue = mmc0_read_byte(0x2f);  //read id    
 8000d42:	0025      	movs	r5, r4
 8000d44:	197c      	adds	r4, r7, r5
 8000d46:	202f      	movs	r0, #47	; 0x2f
 8000d48:	f7ff ff52 	bl	8000bf0 <mmc0_read_byte>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	7023      	strb	r3, [r4, #0]
    if(ivalue == 0x30)  //device id
 8000d50:	197b      	adds	r3, r7, r5
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b30      	cmp	r3, #48	; 0x30
 8000d56:	d122      	bne.n	8000d9e <main+0xc6>
    {
       //flg_mmc0_ready=1;      

       //reset   
       mmc0_write_byte(0X0A,0x80);  //reset
 8000d58:	2180      	movs	r1, #128	; 0x80
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f7ff ff70 	bl	8000c40 <mmc0_write_byte>
       LL_mDelay(200);                    
 8000d60:	20c8      	movs	r0, #200	; 0xc8
 8000d62:	f001 ff0f 	bl	8002b84 <LL_mDelay>
 
       //set control 0  
       mmc0_write_byte(0X09,0x20|0x04);     //auto ser/reset, enable interrupt    
 8000d66:	2124      	movs	r1, #36	; 0x24
 8000d68:	2009      	movs	r0, #9
 8000d6a:	f7ff ff69 	bl	8000c40 <mmc0_write_byte>
          
       //set control 1   
       mmc0_write_byte(0X0A,0x00);    //100Hz
 8000d6e:	2100      	movs	r1, #0
 8000d70:	200a      	movs	r0, #10
 8000d72:	f7ff ff65 	bl	8000c40 <mmc0_write_byte>
    
       //set control 2   
       mmc0_write_byte(0X0B,0x05| (1<<3));     //100Hz, continuous mode  
 8000d76:	210d      	movs	r1, #13
 8000d78:	200b      	movs	r0, #11
 8000d7a:	f7ff ff61 	bl	8000c40 <mmc0_write_byte>
       
        //clear int
        ivalue = mmc0_read_byte(0x08);       //status  
 8000d7e:	197c      	adds	r4, r7, r5
 8000d80:	2008      	movs	r0, #8
 8000d82:	f7ff ff35 	bl	8000bf0 <mmc0_read_byte>
 8000d86:	0003      	movs	r3, r0
 8000d88:	7023      	strb	r3, [r4, #0]
        mmc0_write_byte(0x08, ivalue & 0x01);  
 8000d8a:	197b      	adds	r3, r7, r5
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4013      	ands	r3, r2
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	0019      	movs	r1, r3
 8000d96:	2008      	movs	r0, #8
 8000d98:	f7ff ff52 	bl	8000c40 <mmc0_write_byte>
 8000d9c:	e003      	b.n	8000da6 <main+0xce>
       
    }
    else
    {
       //flg_mmc0_ready=0;
       iputs1("mmc0 err");   
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <main+0x120>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff feba 	bl	8000b1a <iputs1>
    
  while (1)
  {
    uint8_t itestdata[40];
     
    LL_mDelay(100);
 8000da6:	2064      	movs	r0, #100	; 0x64
 8000da8:	f001 feec 	bl	8002b84 <LL_mDelay>
//
     
    //---------read mmc0 data----------------   
        
        //clear int
        ivalue = mmc0_read_byte(0x08);
 8000dac:	252f      	movs	r5, #47	; 0x2f
 8000dae:	197c      	adds	r4, r7, r5
 8000db0:	2008      	movs	r0, #8
 8000db2:	f7ff ff1d 	bl	8000bf0 <mmc0_read_byte>
 8000db6:	0003      	movs	r3, r0
 8000db8:	7023      	strb	r3, [r4, #0]
        mmc0_write_byte(0x08, ivalue & 0x01);   
 8000dba:	197b      	adds	r3, r7, r5
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	2008      	movs	r0, #8
 8000dc8:	f7ff ff3a 	bl	8000c40 <mmc0_write_byte>

        //read data
        mmc0_read_bytes(0x00, 7, itestdata);  
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff ff57 	bl	8000c86 <mmc0_read_bytes>
        iputbytes1(itestdata,7);   
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2107      	movs	r1, #7
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff feb1 	bl	8000b44 <iputbytes1>

    //---------read mmc0 data----------------
    
    
    //led
    LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <main+0x124>)
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fe80 	bl	8000aec <LL_GPIO_TogglePin>
  {
 8000dec:	e7db      	b.n	8000da6 <main+0xce>
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	08002c60 	.word	0x08002c60
 8000df4:	40013000 	.word	0x40013000
 8000df8:	08002c6c 	.word	0x08002c6c
 8000dfc:	50000400 	.word	0x50000400

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fdf7 	bl	80009f8 <LL_FLASH_SetLatency>

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8000e0a:	f7ff fd09 	bl	8000820 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	f7ff fd14 	bl	800083c <LL_RCC_HSI_IsReady>
 8000e14:	0003      	movs	r3, r0
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d1fa      	bne.n	8000e10 <SystemClock_Config+0x10>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000e1a:	2040      	movs	r0, #64	; 0x40
 8000e1c:	f7ff fd22 	bl	8000864 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetHSIDiv(LL_RCC_HSI_DIV_1);
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fd81 	bl	8000928 <LL_RCC_SetHSIDiv>
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_HCLK_DIV_1);
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fd52 	bl	80008d0 <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the HSI */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fd2f 	bl	8000890 <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	f7ff fd40 	bl	80008b8 <LL_RCC_GetSysClkSource>
 8000e38:	1e03      	subs	r3, r0, #0
 8000e3a:	d1fb      	bne.n	8000e34 <SystemClock_Config+0x34>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fd5d 	bl	80008fc <LL_RCC_SetAPB1Prescaler>
  LL_Init1msTick(48000000);
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SystemClock_Config+0x64>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f001 fe8d 	bl	8002b64 <LL_Init1msTick>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(48000000);
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemClock_Config+0x64>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 febd 	bl	8002bcc <LL_SetSystemCoreClock>
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1);
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	045b      	lsls	r3, r3, #17
 8000e56:	2100      	movs	r1, #0
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fd7b 	bl	8000954 <LL_RCC_ConfigMCO>
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	02dc6c00 	.word	0x02dc6c00

08000e68 <LL_RCC_SetI2SClockSource>:
  *         @arg @ref LL_RCC_I2S1_CLKSOURCE_PIN
  *         @arg @ref LL_RCC_I2S1_CLKSOURCE_HSIKER
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2SClockSource(uint32_t I2SxSource)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S1SEL, I2SxSource);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <LL_RCC_SetI2SClockSource+0x24>)
 8000e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <LL_RCC_SetI2SClockSource+0x28>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	0019      	movs	r1, r3
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <LL_RCC_SetI2SClockSource+0x24>)
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	655a      	str	r2, [r3, #84]	; 0x54
}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	ffff3fff 	.word	0xffff3fff

08000e94 <LL_APB2_GRP1_EnableClock>:
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <LL_APB2_GRP1_EnableClock+0x28>)
 8000e9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <LL_APB2_GRP1_EnableClock+0x28>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <LL_APB2_GRP1_EnableClock+0x28>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b004      	add	sp, #16
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_IOP_GRP1_EnableClock>:
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000eca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b004      	add	sp, #16
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000

08000eec <LL_SPI_SetStandard>:
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2210      	movs	r2, #16
 8000efc:	4393      	bics	r3, r2
 8000efe:	001a      	movs	r2, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	605a      	str	r2, [r3, #4]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LL_SPI_EnableNSSPulseMgt>:
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	605a      	str	r2, [r3, #4]
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b091      	sub	sp, #68	; 0x44
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f32:	2418      	movs	r4, #24
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	0018      	movs	r0, r3
 8000f38:	2328      	movs	r3, #40	; 0x28
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f001 fe77 	bl	8002c30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	003b      	movs	r3, r7
 8000f44:	0018      	movs	r0, r3
 8000f46:	2318      	movs	r3, #24
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f001 fe70 	bl	8002c30 <memset>

  LL_RCC_SetI2SClockSource(LL_RCC_I2S1_CLKSOURCE_SYSCLK);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ff89 	bl	8000e68 <LL_RCC_SetI2SClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff ff9a 	bl	8000e94 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ffad 	bl	8000ec0 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f66:	003b      	movs	r3, r7
 8000f68:	2220      	movs	r2, #32
 8000f6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2202      	movs	r2, #2
 8000f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f78:	003b      	movs	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f7e:	003b      	movs	r3, r7
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000f84:	003b      	movs	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	003a      	movs	r2, r7
 8000f8c:	23a0      	movs	r3, #160	; 0xa0
 8000f8e:	05db      	lsls	r3, r3, #23
 8000f90:	0011      	movs	r1, r2
 8000f92:	0018      	movs	r0, r3
 8000f94:	f001 f988 	bl	80022a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000f98:	003b      	movs	r3, r7
 8000f9a:	2240      	movs	r2, #64	; 0x40
 8000f9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	23a0      	movs	r3, #160	; 0xa0
 8000fc0:	05db      	lsls	r3, r3, #23
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f001 f96f 	bl	80022a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000fca:	003b      	movs	r3, r7
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fd0:	003b      	movs	r3, r7
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd6:	003b      	movs	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fdc:	003b      	movs	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe2:	003b      	movs	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	003a      	movs	r2, r7
 8000ff0:	23a0      	movs	r3, #160	; 0xa0
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	0011      	movs	r1, r2
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 f956 	bl	80022a8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ffc:	0021      	movs	r1, r4
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001004:	187b      	adds	r3, r7, r1
 8001006:	2282      	movs	r2, #130	; 0x82
 8001008:	0052      	lsls	r2, r2, #1
 800100a:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800100c:	187b      	adds	r3, r7, r1
 800100e:	22e0      	movs	r2, #224	; 0xe0
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2280      	movs	r2, #128	; 0x80
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001028:	187b      	adds	r3, r7, r1
 800102a:	2210      	movs	r2, #16
 800102c:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800102e:	187b      	adds	r3, r7, r1
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2207      	movs	r2, #7
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001040:	187b      	adds	r3, r7, r1
 8001042:	4a09      	ldr	r2, [pc, #36]	; (8001068 <MX_SPI1_Init+0x13c>)
 8001044:	0019      	movs	r1, r3
 8001046:	0010      	movs	r0, r2
 8001048:	f001 fb4e 	bl	80026e8 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI1_Init+0x13c>)
 800104e:	2100      	movs	r1, #0
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff ff4b 	bl	8000eec <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <MX_SPI1_Init+0x13c>)
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff59 	bl	8000f10 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b011      	add	sp, #68	; 0x44
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40013000 	.word	0x40013000

0800106c <LL_EXTI_IsActiveRisingFlag_0_31>:
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <LL_EXTI_IsActiveRisingFlag_0_31+0x24>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4013      	ands	r3, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	429a      	cmp	r2, r3
 8001080:	d101      	bne.n	8001086 <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 8001086:	2300      	movs	r3, #0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021800 	.word	0x40021800

08001094 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40021800 	.word	0x40021800

080010b0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2202      	movs	r2, #2
 80010bc:	4252      	negs	r2, r2
 80010be:	611a      	str	r2, [r3, #16]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}

080010ea <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2220      	movs	r2, #32
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b20      	cmp	r3, #32
 80010fc:	d101      	bne.n	8001102 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8001102:	2300      	movs	r3, #0
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_IsEnabledIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2220      	movs	r2, #32
 800111a:	4013      	ands	r3, r2
 800111c:	2b20      	cmp	r3, #32
 800111e:	d101      	bne.n	8001124 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <HardFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff ff85 	bl	800106c <LL_EXTI_IsActiveRisingFlag_0_31>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d005      	beq.n	8001172 <EXTI0_1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_0);
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff ff94 	bl	8001094 <LL_EXTI_ClearRisingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0_RISING */
     flg_exint=1; //test
 800116c:	4b02      	ldr	r3, [pc, #8]	; (8001178 <EXTI0_1_IRQHandler+0x20>)
 800116e:	2201      	movs	r2, #1
 8001170:	801a      	strh	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_0_RISING */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000020 	.word	0x20000020

0800117c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	  /* Check whether update interrupt is pending */
	  if(LL_TIM_IsActiveFlag_UPDATE(TIM1) == 1)
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff ffa0 	bl	80010c8 <LL_TIM_IsActiveFlag_UPDATE>
 8001188:	0003      	movs	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d103      	bne.n	8001196 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1a>
	  {
	    /* Clear the update interrupt flag */
	    LL_TIM_ClearFlag_UPDATE(TIM1);
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x24>)
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff8d 	bl	80010b0 <LL_TIM_ClearFlag_UPDATE>
	  }

	  /* TIM1 update interrupt processing */
	  TimerUpdate_Callback();
 8001196:	f000 fa23 	bl	80015e0 <TimerUpdate_Callback>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
   
   uint8_t cuartbyte=0;
 80011aa:	1dfb      	adds	r3, r7, #7
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
   
   if (LL_USART_IsActiveFlag_RXNE(USART1) && LL_USART_IsEnabledIT_RXNE(USART1)) 
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <USART1_IRQHandler+0x11c>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff99 	bl	80010ea <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d100      	bne.n	80011be <USART1_IRQHandler+0x1a>
 80011bc:	e07c      	b.n	80012b8 <USART1_IRQHandler+0x114>
 80011be:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <USART1_IRQHandler+0x11c>)
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ffa3 	bl	800110c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d100      	bne.n	80011cc <USART1_IRQHandler+0x28>
 80011ca:	e075      	b.n	80012b8 <USART1_IRQHandler+0x114>
   {   
      
      cuartbyte = (uint8_t)(READ_BIT(USART1->RDR, USART_RDR_RDR) & 0xFFU);
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <USART1_IRQHandler+0x11c>)
 80011ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
      
      if( (flg_rxin1==0) && ( cuartbyte !=CMDHEADER1) )
 80011d4:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <USART1_IRQHandler+0x120>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d103      	bne.n	80011e6 <USART1_IRQHandler+0x42>
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2ba5      	cmp	r3, #165	; 0xa5
 80011e4:	d167      	bne.n	80012b6 <USART1_IRQHandler+0x112>
         return;
      
      if( (flg_rxin1==0) && ( cuartbyte ==CMDHEADER1) )
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <USART1_IRQHandler+0x120>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d119      	bne.n	8001224 <USART1_IRQHandler+0x80>
 80011f0:	1dfb      	adds	r3, r7, #7
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2ba5      	cmp	r3, #165	; 0xa5
 80011f6:	d115      	bne.n	8001224 <USART1_IRQHandler+0x80>
      {         
         flg_rxin1=1;
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <USART1_IRQHandler+0x120>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
         irxdata[icurrentindex][irxcount++]=cuartbyte;
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <USART1_IRQHandler+0x124>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	0018      	movs	r0, r3
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <USART1_IRQHandler+0x128>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	b2d1      	uxtb	r1, r2
 8001210:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <USART1_IRQHandler+0x128>)
 8001212:	7011      	strb	r1, [r2, #0]
 8001214:	0019      	movs	r1, r3
 8001216:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <USART1_IRQHandler+0x12c>)
 8001218:	0143      	lsls	r3, r0, #5
 800121a:	18d3      	adds	r3, r2, r3
 800121c:	1dfa      	adds	r2, r7, #7
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	545a      	strb	r2, [r3, r1]
         return;
 8001222:	e049      	b.n	80012b8 <USART1_IRQHandler+0x114>
      }
      if( flg_rxin1==1)
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <USART1_IRQHandler+0x120>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d144      	bne.n	80012b8 <USART1_IRQHandler+0x114>
      {
         
         irxcount++;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <USART1_IRQHandler+0x128>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3301      	adds	r3, #1
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <USART1_IRQHandler+0x128>)
 800123a:	701a      	strb	r2, [r3, #0]
         
         if( irxcount<(TXRXDATALEN+2) )
 800123c:	4b23      	ldr	r3, [pc, #140]	; (80012cc <USART1_IRQHandler+0x128>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b1f      	cmp	r3, #31
 8001244:	d80e      	bhi.n	8001264 <USART1_IRQHandler+0xc0>
         {
            irxdata[icurrentindex][irxcount-1]=cuartbyte;
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <USART1_IRQHandler+0x124>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b2db      	uxtb	r3, r3
 800124c:	001a      	movs	r2, r3
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <USART1_IRQHandler+0x128>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	3b01      	subs	r3, #1
 8001256:	491e      	ldr	r1, [pc, #120]	; (80012d0 <USART1_IRQHandler+0x12c>)
 8001258:	0152      	lsls	r2, r2, #5
 800125a:	188a      	adds	r2, r1, r2
 800125c:	1df9      	adds	r1, r7, #7
 800125e:	7809      	ldrb	r1, [r1, #0]
 8001260:	54d1      	strb	r1, [r2, r3]
            return;
 8001262:	e029      	b.n	80012b8 <USART1_IRQHandler+0x114>
         }
         else
         {
            irxdata[icurrentindex][irxcount-1]=cuartbyte;
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <USART1_IRQHandler+0x124>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	001a      	movs	r2, r3
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <USART1_IRQHandler+0x128>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3b01      	subs	r3, #1
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <USART1_IRQHandler+0x12c>)
 8001276:	0152      	lsls	r2, r2, #5
 8001278:	188a      	adds	r2, r1, r2
 800127a:	1df9      	adds	r1, r7, #7
 800127c:	7809      	ldrb	r1, [r1, #0]
 800127e:	54d1      	strb	r1, [r2, r3]
            irxcount2 = irxcount;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <USART1_IRQHandler+0x128>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <USART1_IRQHandler+0x130>)
 8001288:	701a      	strb	r2, [r3, #0]
            
            if(icurrentindex==0)
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <USART1_IRQHandler+0x124>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <USART1_IRQHandler+0xf8>
               icurrentindex=1;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <USART1_IRQHandler+0x124>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e002      	b.n	80012a2 <USART1_IRQHandler+0xfe>
            else
               icurrentindex=0;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <USART1_IRQHandler+0x124>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
            
            //memcpy((void *)irxdata2,(void *)irxdata,TXRXDATALEN+2);  

            flg_rx=1;
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <USART1_IRQHandler+0x134>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
            
            flg_rxin1=0;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <USART1_IRQHandler+0x120>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
            irxcount=0;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <USART1_IRQHandler+0x128>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e000      	b.n	80012b8 <USART1_IRQHandler+0x114>
         return;
 80012b6:	46c0      	nop			; (mov r8, r8)

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b002      	add	sp, #8
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	40013800 	.word	0x40013800
 80012c4:	20000065 	.word	0x20000065
 80012c8:	20000064 	.word	0x20000064
 80012cc:	20000066 	.word	0x20000066
 80012d0:	20000024 	.word	0x20000024
 80012d4:	20000067 	.word	0x20000067
 80012d8:	20000022 	.word	0x20000022

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <SystemInit+0x14>)
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	0512      	lsls	r2, r2, #20
 80012e6:	609a      	str	r2, [r3, #8]
#endif
}
 80012e8:	46c0      	nop			; (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	0002      	movs	r2, r0
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b7f      	cmp	r3, #127	; 0x7f
 8001306:	d809      	bhi.n	800131c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	001a      	movs	r2, r3
 800130e:	231f      	movs	r3, #31
 8001310:	401a      	ands	r2, r3
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_EnableIRQ+0x30>)
 8001314:	2101      	movs	r1, #1
 8001316:	4091      	lsls	r1, r2
 8001318:	000a      	movs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	0002      	movs	r2, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b7f      	cmp	r3, #127	; 0x7f
 800133c:	d828      	bhi.n	8001390 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133e:	4a2f      	ldr	r2, [pc, #188]	; (80013fc <__NVIC_SetPriority+0xd4>)
 8001340:	1dfb      	adds	r3, r7, #7
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	33c0      	adds	r3, #192	; 0xc0
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	589b      	ldr	r3, [r3, r2]
 800134e:	1dfa      	adds	r2, r7, #7
 8001350:	7812      	ldrb	r2, [r2, #0]
 8001352:	0011      	movs	r1, r2
 8001354:	2203      	movs	r2, #3
 8001356:	400a      	ands	r2, r1
 8001358:	00d2      	lsls	r2, r2, #3
 800135a:	21ff      	movs	r1, #255	; 0xff
 800135c:	4091      	lsls	r1, r2
 800135e:	000a      	movs	r2, r1
 8001360:	43d2      	mvns	r2, r2
 8001362:	401a      	ands	r2, r3
 8001364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	401a      	ands	r2, r3
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	0018      	movs	r0, r3
 8001374:	2303      	movs	r3, #3
 8001376:	4003      	ands	r3, r0
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <__NVIC_SetPriority+0xd4>)
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	430a      	orrs	r2, r1
 8001388:	33c0      	adds	r3, #192	; 0xc0
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	501a      	str	r2, [r3, r0]
}
 800138e:	e031      	b.n	80013f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <__NVIC_SetPriority+0xd8>)
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	0019      	movs	r1, r3
 8001398:	230f      	movs	r3, #15
 800139a:	400b      	ands	r3, r1
 800139c:	3b08      	subs	r3, #8
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3306      	adds	r3, #6
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	18d3      	adds	r3, r2, r3
 80013a6:	3304      	adds	r3, #4
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1dfa      	adds	r2, r7, #7
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	0011      	movs	r1, r2
 80013b0:	2203      	movs	r2, #3
 80013b2:	400a      	ands	r2, r1
 80013b4:	00d2      	lsls	r2, r2, #3
 80013b6:	21ff      	movs	r1, #255	; 0xff
 80013b8:	4091      	lsls	r1, r2
 80013ba:	000a      	movs	r2, r1
 80013bc:	43d2      	mvns	r2, r2
 80013be:	401a      	ands	r2, r3
 80013c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	019b      	lsls	r3, r3, #6
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	401a      	ands	r2, r3
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	2303      	movs	r3, #3
 80013d2:	4003      	ands	r3, r0
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <__NVIC_SetPriority+0xd8>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	001c      	movs	r4, r3
 80013e0:	230f      	movs	r3, #15
 80013e2:	4023      	ands	r3, r4
 80013e4:	3b08      	subs	r3, #8
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	430a      	orrs	r2, r1
 80013ea:	3306      	adds	r3, #6
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	18c3      	adds	r3, r0, r3
 80013f0:	3304      	adds	r3, #4
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b003      	add	sp, #12
 80013fa:	bd90      	pop	{r4, r7, pc}
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <LL_APB2_GRP1_EnableClock>:
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <LL_APB2_GRP1_EnableClock+0x28>)
 800140e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <LL_APB2_GRP1_EnableClock+0x28>)
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	430a      	orrs	r2, r1
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <LL_APB2_GRP1_EnableClock+0x28>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <LL_TIM_EnableCounter>:
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2201      	movs	r2, #1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b002      	add	sp, #8
 800144a:	bd80      	pop	{r7, pc}

0800144c <LL_TIM_DisableARRPreload>:
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	4393      	bics	r3, r2
 800145c:	001a      	movs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <LL_TIM_SetClockSource>:
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <LL_TIM_SetClockSource+0x24>)
 800147c:	401a      	ands	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]
}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	fffebff8 	.word	0xfffebff8

08001494 <LL_TIM_SetTriggerOutput>:
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2270      	movs	r2, #112	; 0x70
 80014a4:	4393      	bics	r3, r2
 80014a6:	001a      	movs	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LL_TIM_SetTriggerOutput2>:
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4a05      	ldr	r2, [pc, #20]	; (80014dc <LL_TIM_SetTriggerOutput2+0x24>)
 80014c8:	401a      	ands	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	605a      	str	r2, [r3, #4]
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	ff0fffff 	.word	0xff0fffff

080014e0 <LL_TIM_DisableMasterSlaveMode>:
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	4393      	bics	r3, r2
 80014f0:	001a      	movs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}

080014fe <LL_TIM_ClearFlag_UPDATE>:
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	4252      	negs	r2, r2
 800150c:	611a      	str	r2, [r3, #16]
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}

08001516 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60da      	str	r2, [r3, #12]
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	0018      	movs	r0, r3
 800153e:	2314      	movs	r3, #20
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f001 fb74 	bl	8002c30 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ff59 	bl	8001404 <LL_APB2_GRP1_EnableClock>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0);
 8001552:	2100      	movs	r1, #0
 8001554:	200d      	movs	r0, #13
 8001556:	f7ff fee7 	bl	8001328 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800155a:	200d      	movs	r0, #13
 800155c:	f7ff feca 	bl	80012f4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 4799;
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <MX_TIM1_Init+0xa4>)
 8001564:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2209      	movs	r2, #9
 8001570:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f001 f94d 	bl	8002824 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_TIM1_Init+0xa8>)
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <MX_TIM1_Init+0xa8>)
 8001594:	2100      	movs	r1, #0
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff ff68 	bl	800146c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_TIM1_Init+0xa8>)
 800159e:	2100      	movs	r1, #0
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ff77 	bl	8001494 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff ff84 	bl	80014b8 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff ff94 	bl	80014e0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */
  /* Clear the update flag */
  LL_TIM_ClearFlag_UPDATE(TIM1);
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff ff9f 	bl	80014fe <LL_TIM_ClearFlag_UPDATE>

  /* Enable the update interrupt */
  LL_TIM_EnableIT_UPDATE(TIM1);
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff ffa7 	bl	8001516 <LL_TIM_EnableIT_UPDATE>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM1);
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <MX_TIM1_Init+0xa8>)
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff ff30 	bl	8001430 <LL_TIM_EnableCounter>
  /* USER CODE END TIM1_Init 2 */

}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b006      	add	sp, #24
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	000012bf 	.word	0x000012bf
 80015dc:	40012c00 	.word	0x40012c00

080015e0 <TimerUpdate_Callback>:
  * @brief  Timer update interrupt processing
  * @param  None
  * @retval None
  */
void TimerUpdate_Callback(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	timer1_flag = 1;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <TimerUpdate_Callback+0x1c>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
   
   itimecount++;
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <TimerUpdate_Callback+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TimerUpdate_Callback+0x20>)
 80015f2:	601a      	str	r2, [r3, #0]
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	20000068 	.word	0x20000068
 8001600:	2000006c 	.word	0x2000006c

08001604 <__NVIC_EnableIRQ>:
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	0002      	movs	r2, r0
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b7f      	cmp	r3, #127	; 0x7f
 8001616:	d809      	bhi.n	800162c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001618:	1dfb      	adds	r3, r7, #7
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	001a      	movs	r2, r3
 800161e:	231f      	movs	r3, #31
 8001620:	401a      	ands	r2, r3
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <__NVIC_EnableIRQ+0x30>)
 8001624:	2101      	movs	r1, #1
 8001626:	4091      	lsls	r1, r2
 8001628:	000a      	movs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
}
 800162c:	46c0      	nop			; (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b002      	add	sp, #8
 8001632:	bd80      	pop	{r7, pc}
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	0002      	movs	r2, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b7f      	cmp	r3, #127	; 0x7f
 800164c:	d828      	bhi.n	80016a0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <__NVIC_SetPriority+0xd4>)
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b25b      	sxtb	r3, r3
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	33c0      	adds	r3, #192	; 0xc0
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	589b      	ldr	r3, [r3, r2]
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	0011      	movs	r1, r2
 8001664:	2203      	movs	r2, #3
 8001666:	400a      	ands	r2, r1
 8001668:	00d2      	lsls	r2, r2, #3
 800166a:	21ff      	movs	r1, #255	; 0xff
 800166c:	4091      	lsls	r1, r2
 800166e:	000a      	movs	r2, r1
 8001670:	43d2      	mvns	r2, r2
 8001672:	401a      	ands	r2, r3
 8001674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	22ff      	movs	r2, #255	; 0xff
 800167c:	401a      	ands	r2, r3
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	0018      	movs	r0, r3
 8001684:	2303      	movs	r3, #3
 8001686:	4003      	ands	r3, r0
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168c:	481f      	ldr	r0, [pc, #124]	; (800170c <__NVIC_SetPriority+0xd4>)
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b25b      	sxtb	r3, r3
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	430a      	orrs	r2, r1
 8001698:	33c0      	adds	r3, #192	; 0xc0
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	501a      	str	r2, [r3, r0]
}
 800169e:	e031      	b.n	8001704 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <__NVIC_SetPriority+0xd8>)
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	0019      	movs	r1, r3
 80016a8:	230f      	movs	r3, #15
 80016aa:	400b      	ands	r3, r1
 80016ac:	3b08      	subs	r3, #8
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3306      	adds	r3, #6
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	18d3      	adds	r3, r2, r3
 80016b6:	3304      	adds	r3, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	1dfa      	adds	r2, r7, #7
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	0011      	movs	r1, r2
 80016c0:	2203      	movs	r2, #3
 80016c2:	400a      	ands	r2, r1
 80016c4:	00d2      	lsls	r2, r2, #3
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	4091      	lsls	r1, r2
 80016ca:	000a      	movs	r2, r1
 80016cc:	43d2      	mvns	r2, r2
 80016ce:	401a      	ands	r2, r3
 80016d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	22ff      	movs	r2, #255	; 0xff
 80016d8:	401a      	ands	r2, r3
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0018      	movs	r0, r3
 80016e0:	2303      	movs	r3, #3
 80016e2:	4003      	ands	r3, r0
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <__NVIC_SetPriority+0xd8>)
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	001c      	movs	r4, r3
 80016f0:	230f      	movs	r3, #15
 80016f2:	4023      	ands	r3, r4
 80016f4:	3b08      	subs	r3, #8
 80016f6:	089b      	lsrs	r3, r3, #2
 80016f8:	430a      	orrs	r2, r1
 80016fa:	3306      	adds	r3, #6
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	18c3      	adds	r3, r0, r3
 8001700:	3304      	adds	r3, #4
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	b003      	add	sp, #12
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <LL_RCC_SetUSARTClockSource>:
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <LL_RCC_SetUSARTClockSource+0x2c>)
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	0c12      	lsrs	r2, r2, #16
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	0011      	movs	r1, r2
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	0c1a      	lsrs	r2, r3, #16
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <LL_RCC_SetUSARTClockSource+0x2c>)
 8001732:	430a      	orrs	r2, r1
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b002      	add	sp, #8
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	40021000 	.word	0x40021000

08001744 <LL_APB2_GRP1_EnableClock>:
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <LL_APB2_GRP1_EnableClock+0x28>)
 800174e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <LL_APB2_GRP1_EnableClock+0x28>)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	430a      	orrs	r2, r1
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <LL_APB2_GRP1_EnableClock+0x28>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4013      	ands	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b004      	add	sp, #16
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000

08001770 <LL_IOP_GRP1_EnableClock>:
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <LL_IOP_GRP1_EnableClock+0x28>)
 800177a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_IOP_GRP1_EnableClock+0x28>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	430a      	orrs	r2, r1
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <LL_IOP_GRP1_EnableClock+0x28>)
 8001786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <LL_SYSCFG_EnableFastModePlus>:
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
}
 80017b0:	46c0      	nop			; (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40010000 	.word	0x40010000

080017bc <LL_USART_Enable>:
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2201      	movs	r2, #1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <LL_USART_DisableFIFO>:
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <LL_USART_DisableFIFO+0x1c>)
 80017e6:	401a      	ands	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	dfffffff 	.word	0xdfffffff

080017f8 <LL_USART_SetTXFIFOThreshold>:
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001802:	f3ef 8310 	mrs	r3, PRIMASK
 8001806:	60bb      	str	r3, [r7, #8]
  return(result);
 8001808:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	2301      	movs	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f383 8810 	msr	PRIMASK, r3
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	075b      	lsls	r3, r3, #29
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	f383 8810 	msr	PRIMASK, r3
}
 8001834:	46c0      	nop			; (mov r8, r8)
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b006      	add	sp, #24
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <LL_USART_SetRXFIFOThreshold>:
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800184a:	f3ef 8310 	mrs	r3, PRIMASK
 800184e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001850:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	2301      	movs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f383 8810 	msr	PRIMASK, r3
}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a08      	ldr	r2, [pc, #32]	; (8001888 <LL_USART_SetRXFIFOThreshold+0x48>)
 8001866:	401a      	ands	r2, r3
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	065b      	lsls	r3, r3, #25
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	f383 8810 	msr	PRIMASK, r3
}
 800187c:	46c0      	nop			; (mov r8, r8)
}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	f1ffffff 	.word	0xf1ffffff

0800188c <LL_USART_ConfigAsyncMode>:
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <LL_USART_ConfigAsyncMode+0x2c>)
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	222a      	movs	r2, #42	; 0x2a
 80018a6:	4393      	bics	r3, r2
 80018a8:	001a      	movs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	ffffb7ff 	.word	0xffffb7ff

080018bc <LL_USART_IsActiveFlag_TEACK>:
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	2380      	movs	r3, #128	; 0x80
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	401a      	ands	r2, r3
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	039b      	lsls	r3, r3, #14
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d101      	bne.n	80018da <LL_USART_IsActiveFlag_TEACK+0x1e>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <LL_USART_IsActiveFlag_TEACK+0x20>
 80018da:	2300      	movs	r3, #0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LL_USART_IsActiveFlag_REACK>:
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	03db      	lsls	r3, r3, #15
 80018f4:	401a      	ands	r2, r3
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	03db      	lsls	r3, r3, #15
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d101      	bne.n	8001902 <LL_USART_IsActiveFlag_REACK+0x1e>
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <LL_USART_IsActiveFlag_REACK+0x20>
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <LL_USART_ClearFlag_PE>:
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	621a      	str	r2, [r3, #32]
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <LL_USART_ClearFlag_FE>:
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	621a      	str	r2, [r3, #32]
}
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}

08001938 <LL_USART_ClearFlag_NE>:
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2204      	movs	r2, #4
 8001944:	621a      	str	r2, [r3, #32]
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}

0800194e <LL_USART_ClearFlag_ORE>:
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2208      	movs	r2, #8
 800195a:	621a      	str	r2, [r3, #32]
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <LL_USART_EnableIT_RXNE_RXFNE>:
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800196c:	f3ef 8310 	mrs	r3, PRIMASK
 8001970:	60bb      	str	r3, [r7, #8]
  return(result);
 8001972:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	2301      	movs	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f383 8810 	msr	PRIMASK, r3
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2220      	movs	r2, #32
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f383 8810 	msr	PRIMASK, r3
}
 8001998:	46c0      	nop			; (mov r8, r8)
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b006      	add	sp, #24
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_USART_EnableIT_ERROR>:
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80019aa:	f3ef 8310 	mrs	r3, PRIMASK
 80019ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80019b0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f383 8810 	msr	PRIMASK, r3
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2201      	movs	r2, #1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	f383 8810 	msr	PRIMASK, r3
}
 80019d6:	46c0      	nop			; (mov r8, r8)
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}

080019e0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b08f      	sub	sp, #60	; 0x3c
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019e6:	2418      	movs	r4, #24
 80019e8:	193b      	adds	r3, r7, r4
 80019ea:	0018      	movs	r0, r3
 80019ec:	2320      	movs	r3, #32
 80019ee:	001a      	movs	r2, r3
 80019f0:	2100      	movs	r1, #0
 80019f2:	f001 f91d 	bl	8002c30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f6:	003b      	movs	r3, r7
 80019f8:	0018      	movs	r0, r3
 80019fa:	2318      	movs	r3, #24
 80019fc:	001a      	movs	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	f001 f916 	bl	8002c30 <memset>

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fe83 	bl	8001714 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	01db      	lsls	r3, r3, #7
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff fe96 	bl	8001744 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001a18:	2001      	movs	r0, #1
 8001a1a:	f7ff fea9 	bl	8001770 <LL_IOP_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9 [PA11]   ------> USART1_TX
  PA10 [PA12]   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001a1e:	003b      	movs	r3, r7
 8001a20:	2280      	movs	r2, #128	; 0x80
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a26:	003b      	movs	r3, r7
 8001a28:	2202      	movs	r2, #2
 8001a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	003b      	movs	r3, r7
 8001a2e:	2203      	movs	r2, #3
 8001a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a32:	003b      	movs	r3, r7
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a38:	003b      	movs	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a3e:	003b      	movs	r3, r7
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	003a      	movs	r2, r7
 8001a46:	23a0      	movs	r3, #160	; 0xa0
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 fc2b 	bl	80022a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a52:	003b      	movs	r3, r7
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	00d2      	lsls	r2, r2, #3
 8001a58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2203      	movs	r2, #3
 8001a64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a66:	003b      	movs	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a6c:	003b      	movs	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001a72:	003b      	movs	r3, r7
 8001a74:	2201      	movs	r2, #1
 8001a76:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	003a      	movs	r2, r7
 8001a7a:	23a0      	movs	r3, #160	; 0xa0
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fc11 	bl	80022a8 <LL_GPIO_Init>

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PA9);
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	03db      	lsls	r3, r3, #15
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff fe86 	bl	800179c <LL_SYSCFG_EnableFastModePlus>

  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PA10);
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff fe81 	bl	800179c <LL_SYSCFG_EnableFastModePlus>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	201b      	movs	r0, #27
 8001a9e:	f7ff fdcb 	bl	8001638 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001aa2:	201b      	movs	r0, #27
 8001aa4:	f7ff fdae 	bl	8001604 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001aa8:	0021      	movs	r1, r4
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 1000000;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <MX_USART1_UART_Init+0x184>)
 8001ab4:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART1, &USART_InitStruct);
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	f000 ffb3 	bl	8002a4c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fe84 	bl	80017f8 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001af2:	2100      	movs	r1, #0
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff fea3 	bl	8001840 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fe6b 	bl	80017d8 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff fec1 	bl	800188c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff fe55 	bl	80017bc <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff fed0 	bl	80018bc <LL_USART_IsActiveFlag_TEACK>
 8001b1c:	1e03      	subs	r3, r0, #0
 8001b1e:	d0f9      	beq.n	8001b14 <MX_USART1_UART_Init+0x134>
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff fede 	bl	80018e4 <LL_USART_IsActiveFlag_REACK>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d0f3      	beq.n	8001b14 <MX_USART1_UART_Init+0x134>
  }
  /* USER CODE BEGIN USART1_Init 2 */
//  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
//  {
//  }
  LL_USART_ClearFlag_ORE(USART1);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff ff0d 	bl	800194e <LL_USART_ClearFlag_ORE>
  LL_USART_ClearFlag_NE(USART1);
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff fefe 	bl	8001938 <LL_USART_ClearFlag_NE>
  LL_USART_ClearFlag_PE(USART1);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fee4 	bl	800190c <LL_USART_ClearFlag_PE>
  LL_USART_ClearFlag_FE(USART1);
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff feeb 	bl	8001922 <LL_USART_ClearFlag_FE>

  LL_USART_EnableIT_RXNE(USART1);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff ff08 	bl	8001964 <LL_USART_EnableIT_RXNE_RXFNE>
  LL_USART_EnableIT_ERROR(USART1);// for some reason cannot start ERR interrupt
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <MX_USART1_UART_Init+0x188>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff ff23 	bl	80019a2 <LL_USART_EnableIT_ERROR>


  /* USER CODE END USART1_Init 2 */

}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b00f      	add	sp, #60	; 0x3c
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	000f4240 	.word	0x000f4240
 8001b68:	40013800 	.word	0x40013800

08001b6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b70:	f7ff fbb4 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b76:	e003      	b.n	8001b80 <LoopCopyDataInit>

08001b78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001b7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b7e:	3104      	adds	r1, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <LoopForever+0xa>)
  ldr r3, =_edata
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0xe>)
  adds r2, r0, r1
 8001b84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b88:	d3f6      	bcc.n	8001b78 <CopyDataInit>
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopForever+0x12>)
  b LoopFillZerobss
 8001b8c:	e002      	b.n	8001b94 <LoopFillZerobss>

08001b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001b90:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b92:	3204      	adds	r2, #4

08001b94 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <LoopForever+0x16>)
  cmp r2, r3
 8001b96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b98:	d3f9      	bcc.n	8001b8e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001b9a:	f001 f825 	bl	8002be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b9e:	f7ff f89b 	bl	8000cd8 <main>

08001ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   r0, =_estack
 8001ba4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001ba8:	08002d10 	.word	0x08002d10
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bb0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001bb4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001bb8:	20000070 	.word	0x20000070

08001bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_IRQHandler>
	...

08001bc0 <LL_EXTI_EnableIT_0_31>:
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	58d2      	ldr	r2, [r2, r3]
 8001bce:	4904      	ldr	r1, [pc, #16]	; (8001be0 <LL_EXTI_EnableIT_0_31+0x20>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	508b      	str	r3, [r1, r2]
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b002      	add	sp, #8
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021800 	.word	0x40021800

08001be4 <LL_EXTI_DisableIT_0_31>:
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	58d3      	ldr	r3, [r2, r3]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	4904      	ldr	r1, [pc, #16]	; (8001c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	508b      	str	r3, [r1, r2]
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	40021800 	.word	0x40021800

08001c0c <LL_EXTI_EnableEvent_0_31>:
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001c16:	2384      	movs	r3, #132	; 0x84
 8001c18:	58d2      	ldr	r2, [r2, r3]
 8001c1a:	4904      	ldr	r1, [pc, #16]	; (8001c2c <LL_EXTI_EnableEvent_0_31+0x20>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	2284      	movs	r2, #132	; 0x84
 8001c22:	508b      	str	r3, [r1, r2]
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021800 	.word	0x40021800

08001c30 <LL_EXTI_DisableEvent_0_31>:
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c3a:	2384      	movs	r3, #132	; 0x84
 8001c3c:	58d3      	ldr	r3, [r2, r3]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	43d2      	mvns	r2, r2
 8001c42:	4904      	ldr	r1, [pc, #16]	; (8001c54 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	2284      	movs	r2, #132	; 0x84
 8001c48:	508b      	str	r3, [r1, r2]
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021800 	.word	0x40021800

08001c58 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001c62:	6819      	ldr	r1, [r3, #0]
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	46c0      	nop			; (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b002      	add	sp, #8
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021800 	.word	0x40021800

08001c78 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	46bd      	mov	sp, r7
 8001c92:	b002      	add	sp, #8
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021800 	.word	0x40021800

08001c9c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
}
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021800 	.word	0x40021800

08001cbc <LL_EXTI_DisableFallingTrig_0_31>:
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b002      	add	sp, #8
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	40021800 	.word	0x40021800

08001ce0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001ce8:	230f      	movs	r3, #15
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d100      	bne.n	8001cfa <LL_EXTI_Init+0x1a>
 8001cf8:	e068      	b.n	8001dcc <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d100      	bne.n	8001d04 <LL_EXTI_Init+0x24>
 8001d02:	e06e      	b.n	8001de2 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	795b      	ldrb	r3, [r3, #5]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d01b      	beq.n	8001d44 <LL_EXTI_Init+0x64>
 8001d0c:	dc25      	bgt.n	8001d5a <LL_EXTI_Init+0x7a>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <LL_EXTI_Init+0x38>
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d00b      	beq.n	8001d2e <LL_EXTI_Init+0x4e>
 8001d16:	e020      	b.n	8001d5a <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ff87 	bl	8001c30 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ff4a 	bl	8001bc0 <LL_EXTI_EnableIT_0_31>
          break;
 8001d2c:	e01a      	b.n	8001d64 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff ff56 	bl	8001be4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff ff65 	bl	8001c0c <LL_EXTI_EnableEvent_0_31>
          break;
 8001d42:	e00f      	b.n	8001d64 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7ff ff39 	bl	8001bc0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff ff5a 	bl	8001c0c <LL_EXTI_EnableEvent_0_31>
          break;
 8001d58:	e004      	b.n	8001d64 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
          break;
 8001d62:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	799b      	ldrb	r3, [r3, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d03a      	beq.n	8001de2 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	799b      	ldrb	r3, [r3, #6]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d01b      	beq.n	8001dac <LL_EXTI_Init+0xcc>
 8001d74:	dc25      	bgt.n	8001dc2 <LL_EXTI_Init+0xe2>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d002      	beq.n	8001d80 <LL_EXTI_Init+0xa0>
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d00b      	beq.n	8001d96 <LL_EXTI_Init+0xb6>
 8001d7e:	e020      	b.n	8001dc2 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff ff99 	bl	8001cbc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff ff62 	bl	8001c58 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001d94:	e026      	b.n	8001de4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7ff ff6c 	bl	8001c78 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff79 	bl	8001c9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001daa:	e01b      	b.n	8001de4 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff ff51 	bl	8001c58 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff ff6e 	bl	8001c9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001dc0:	e010      	b.n	8001de4 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 8001dc2:	230f      	movs	r3, #15
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
            break;
 8001dca:	e00b      	b.n	8001de4 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff07 	bl	8001be4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff ff28 	bl	8001c30 <LL_EXTI_DisableEvent_0_31>
 8001de0:	e000      	b.n	8001de4 <LL_EXTI_Init+0x104>
      }
 8001de2:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8001de4:	230f      	movs	r3, #15
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	781b      	ldrb	r3, [r3, #0]
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b004      	add	sp, #16
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <LL_GPIO_SetPinMode>:
{
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b08d      	sub	sp, #52	; 0x34
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681c      	ldr	r4, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001e06:	231f      	movs	r3, #31
 8001e08:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e00e      	b.n	8001e34 <LL_GPIO_SetPinMode+0x42>
    result <<= 1U;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
    s--;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ed      	bne.n	8001e16 <LL_GPIO_SetPinMode+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
  return result;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <LL_GPIO_SetPinMode+0x60>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e004      	b.n	8001e5c <LL_GPIO_SetPinMode+0x6a>
  return __builtin_clz(value);
 8001e52:	69f8      	ldr	r0, [r7, #28]
 8001e54:	f7fe f9e4 	bl	8000220 <__clzsi2>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	409a      	lsls	r2, r3
 8001e62:	0013      	movs	r3, r2
 8001e64:	43db      	mvns	r3, r3
 8001e66:	401c      	ands	r4, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7a:	e00e      	b.n	8001e9a <LL_GPIO_SetPinMode+0xa8>
    result <<= 1U;
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	2201      	movs	r2, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	6a3a      	ldr	r2, [r7, #32]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	623b      	str	r3, [r7, #32]
    s--;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	3b01      	subs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ed      	bne.n	8001e7c <LL_GPIO_SetPinMode+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	623b      	str	r3, [r7, #32]
  return result;
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <LL_GPIO_SetPinMode+0xc6>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e004      	b.n	8001ec2 <LL_GPIO_SetPinMode+0xd0>
  return __builtin_clz(value);
 8001eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eba:	f7fe f9b1 	bl	8000220 <__clzsi2>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	0013      	movs	r3, r2
 8001eca:	0022      	movs	r2, r4
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b00d      	add	sp, #52	; 0x34
 8001ed8:	bd90      	pop	{r4, r7, pc}

08001eda <LL_GPIO_SetPinOutputType>:
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	43d2      	mvns	r2, r2
 8001eee:	401a      	ands	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	434b      	muls	r3, r1
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
}
 8001efc:	46c0      	nop			; (mov r8, r8)
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <LL_GPIO_SetPinSpeed>:
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08d      	sub	sp, #52	; 0x34
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689c      	ldr	r4, [r3, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001f18:	231f      	movs	r3, #31
 8001f1a:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	e00e      	b.n	8001f46 <LL_GPIO_SetPinSpeed+0x42>
    result <<= 1U;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
    s--;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ed      	bne.n	8001f28 <LL_GPIO_SetPinSpeed+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	409a      	lsls	r2, r3
 8001f52:	0013      	movs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
  return result;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <LL_GPIO_SetPinSpeed+0x60>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e004      	b.n	8001f6e <LL_GPIO_SetPinSpeed+0x6a>
  return __builtin_clz(value);
 8001f64:	69f8      	ldr	r0, [r7, #28]
 8001f66:	f7fe f95b 	bl	8000220 <__clzsi2>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	409a      	lsls	r2, r3
 8001f74:	0013      	movs	r3, r2
 8001f76:	43db      	mvns	r3, r3
 8001f78:	401c      	ands	r4, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8001f7e:	231f      	movs	r3, #31
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f8c:	e00e      	b.n	8001fac <LL_GPIO_SetPinSpeed+0xa8>
    result <<= 1U;
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	6a3a      	ldr	r2, [r7, #32]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	623b      	str	r3, [r7, #32]
    s--;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ed      	bne.n	8001f8e <LL_GPIO_SetPinSpeed+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8001fb2:	6a3a      	ldr	r2, [r7, #32]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	623b      	str	r3, [r7, #32]
  return result;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <LL_GPIO_SetPinSpeed+0xc6>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e004      	b.n	8001fd4 <LL_GPIO_SetPinSpeed+0xd0>
  return __builtin_clz(value);
 8001fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001fcc:	f7fe f928 	bl	8000220 <__clzsi2>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	0013      	movs	r3, r2
 8001fdc:	0022      	movs	r2, r4
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b00d      	add	sp, #52	; 0x34
 8001fea:	bd90      	pop	{r4, r7, pc}

08001fec <LL_GPIO_SetPinPull>:
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b08d      	sub	sp, #52	; 0x34
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	68dc      	ldr	r4, [r3, #12]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8002000:	231f      	movs	r3, #31
 8002002:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	e00e      	b.n	800202e <LL_GPIO_SetPinPull+0x42>
    result <<= 1U;
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2201      	movs	r2, #1
 800201a:	4013      	ands	r3, r2
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
    s--;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	3b01      	subs	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ed      	bne.n	8002010 <LL_GPIO_SetPinPull+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	409a      	lsls	r2, r3
 800203a:	0013      	movs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
  return result;
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <LL_GPIO_SetPinPull+0x60>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e004      	b.n	8002056 <LL_GPIO_SetPinPull+0x6a>
  return __builtin_clz(value);
 800204c:	69f8      	ldr	r0, [r7, #28]
 800204e:	f7fe f8e7 	bl	8000220 <__clzsi2>
 8002052:	0003      	movs	r3, r0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	409a      	lsls	r2, r3
 800205c:	0013      	movs	r3, r2
 800205e:	43db      	mvns	r3, r3
 8002060:	401c      	ands	r4, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 8002066:	231f      	movs	r3, #31
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206c:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
 8002074:	e00e      	b.n	8002094 <LL_GPIO_SetPinPull+0xa8>
    result <<= 1U;
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 800207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	6a3a      	ldr	r2, [r7, #32]
 8002084:	4313      	orrs	r3, r2
 8002086:	623b      	str	r3, [r7, #32]
    s--;
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	3b01      	subs	r3, #1
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 800208e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
 8002094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ed      	bne.n	8002076 <LL_GPIO_SetPinPull+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	623b      	str	r3, [r7, #32]
  return result;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <LL_GPIO_SetPinPull+0xc6>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e004      	b.n	80020bc <LL_GPIO_SetPinPull+0xd0>
  return __builtin_clz(value);
 80020b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020b4:	f7fe f8b4 	bl	8000220 <__clzsi2>
 80020b8:	0003      	movs	r3, r0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	409a      	lsls	r2, r3
 80020c2:	0013      	movs	r3, r2
 80020c4:	0022      	movs	r2, r4
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	60da      	str	r2, [r3, #12]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b00d      	add	sp, #52	; 0x34
 80020d2:	bd90      	pop	{r4, r7, pc}

080020d4 <LL_GPIO_SetAFPin_0_7>:
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b08d      	sub	sp, #52	; 0x34
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1c      	ldr	r4, [r3, #32]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80020e8:	231f      	movs	r3, #31
 80020ea:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	61bb      	str	r3, [r7, #24]
 80020f6:	e00e      	b.n	8002116 <LL_GPIO_SetAFPin_0_7+0x42>
    result <<= 1U;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
    s--;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3b01      	subs	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	085b      	lsrs	r3, r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ed      	bne.n	80020f8 <LL_GPIO_SetAFPin_0_7+0x24>
  result <<= s;                        /* shift when v's highest bits are zero */
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	409a      	lsls	r2, r3
 8002122:	0013      	movs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
  return result;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <LL_GPIO_SetAFPin_0_7+0x60>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e004      	b.n	800213e <LL_GPIO_SetAFPin_0_7+0x6a>
  return __builtin_clz(value);
 8002134:	69f8      	ldr	r0, [r7, #28]
 8002136:	f7fe f873 	bl	8000220 <__clzsi2>
 800213a:	0003      	movs	r3, r0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	409a      	lsls	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	43db      	mvns	r3, r3
 8002148:	401c      	ands	r4, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800214e:	231f      	movs	r3, #31
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8002152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002154:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
 800215c:	e00e      	b.n	800217c <LL_GPIO_SetAFPin_0_7+0xa8>
    result <<= 1U;
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8002164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	6a3a      	ldr	r2, [r7, #32]
 800216c:	4313      	orrs	r3, r2
 800216e:	623b      	str	r3, [r7, #32]
    s--;
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	3b01      	subs	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	085b      	lsrs	r3, r3, #1
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ed      	bne.n	800215e <LL_GPIO_SetAFPin_0_7+0x8a>
  result <<= s;                        /* shift when v's highest bits are zero */
 8002182:	6a3a      	ldr	r2, [r7, #32]
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	623b      	str	r3, [r7, #32]
  return result;
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <LL_GPIO_SetAFPin_0_7+0xc6>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e004      	b.n	80021a4 <LL_GPIO_SetAFPin_0_7+0xd0>
  return __builtin_clz(value);
 800219a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800219c:	f7fe f840 	bl	8000220 <__clzsi2>
 80021a0:	0003      	movs	r3, r0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	0022      	movs	r2, r4
 80021ae:	431a      	orrs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	621a      	str	r2, [r3, #32]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b00d      	add	sp, #52	; 0x34
 80021ba:	bd90      	pop	{r4, r7, pc}

080021bc <LL_GPIO_SetAFPin_8_15>:
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b08d      	sub	sp, #52	; 0x34
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80021d2:	231f      	movs	r3, #31
 80021d4:	617b      	str	r3, [r7, #20]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	613b      	str	r3, [r7, #16]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	e00e      	b.n	8002200 <LL_GPIO_SetAFPin_8_15+0x44>
    result <<= 1U;
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2201      	movs	r2, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
    s--;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ed      	bne.n	80021e2 <LL_GPIO_SetAFPin_8_15+0x26>
  result <<= s;                        /* shift when v's highest bits are zero */
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
  return result;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <LL_GPIO_SetAFPin_8_15+0x62>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e004      	b.n	8002228 <LL_GPIO_SetAFPin_8_15+0x6c>
  return __builtin_clz(value);
 800221e:	69f8      	ldr	r0, [r7, #28]
 8002220:	f7fd fffe 	bl	8000220 <__clzsi2>
 8002224:	0003      	movs	r3, r0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	409a      	lsls	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	43db      	mvns	r3, r3
 8002232:	401c      	ands	r4, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800223a:	231f      	movs	r3, #31
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	623b      	str	r3, [r7, #32]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
 8002248:	e00e      	b.n	8002268 <LL_GPIO_SetAFPin_8_15+0xac>
    result <<= 1U;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	6a3a      	ldr	r2, [r7, #32]
 8002258:	4313      	orrs	r3, r2
 800225a:	623b      	str	r3, [r7, #32]
    s--;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3b01      	subs	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ed      	bne.n	800224a <LL_GPIO_SetAFPin_8_15+0x8e>
  result <<= s;                        /* shift when v's highest bits are zero */
 800226e:	6a3a      	ldr	r2, [r7, #32]
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	623b      	str	r3, [r7, #32]
  return result;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <LL_GPIO_SetAFPin_8_15+0xca>
    return 32U;
 8002282:	2320      	movs	r3, #32
 8002284:	e004      	b.n	8002290 <LL_GPIO_SetAFPin_8_15+0xd4>
  return __builtin_clz(value);
 8002286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002288:	f7fd ffca 	bl	8000220 <__clzsi2>
 800228c:	0003      	movs	r3, r0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	0022      	movs	r2, r4
 800229a:	431a      	orrs	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b00d      	add	sp, #52	; 0x34
 80022a6:	bd90      	pop	{r4, r7, pc}

080022a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	623b      	str	r3, [r7, #32]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 80022b8:	231f      	movs	r3, #31
 80022ba:	61fb      	str	r3, [r7, #28]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	61bb      	str	r3, [r7, #24]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	623b      	str	r3, [r7, #32]
 80022c6:	e00e      	b.n	80022e6 <LL_GPIO_Init+0x3e>
    result <<= 1U;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2201      	movs	r2, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
    s--;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3b01      	subs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
  for (value >>= 1U; value != 0U; value >>= 1U)
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	623b      	str	r3, [r7, #32]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ed      	bne.n	80022c8 <LL_GPIO_Init+0x20>
  result <<= s;                        /* shift when v's highest bits are zero */
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
  return result;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <LL_GPIO_Init+0x5c>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e004      	b.n	800230e <LL_GPIO_Init+0x66>
  return __builtin_clz(value);
 8002304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002306:	f7fd ff8b 	bl	8000220 <__clzsi2>
 800230a:	0003      	movs	r3, r0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8002310:	e06c      	b.n	80023ec <LL_GPIO_Init+0x144>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2101      	movs	r1, #1
 8002318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800231a:	4091      	lsls	r1, r2
 800231c:	000a      	movs	r2, r1
 800231e:	4013      	ands	r3, r2
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28

    if (currentpin != 0U)
 8002322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d05e      	beq.n	80023e6 <LL_GPIO_Init+0x13e>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff fd5e 	bl	8001df2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d003      	beq.n	8002346 <LL_GPIO_Init+0x9e>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d106      	bne.n	8002354 <LL_GPIO_Init+0xac>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff fdd8 	bl	8001f04 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fe45 	bl	8001fec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d13d      	bne.n	80023e6 <LL_GPIO_Init+0x13e>
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	613b      	str	r3, [r7, #16]
  uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 800236e:	231f      	movs	r3, #31
 8002370:	60fb      	str	r3, [r7, #12]
  result = value;                      /* r will be reversed bits of v; first get LSB of v */
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	60bb      	str	r3, [r7, #8]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	e00e      	b.n	800239c <LL_GPIO_Init+0xf4>
    result <<= 1U;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
    s--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3b01      	subs	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
  for (value >>= 1U; value != 0U; value >>= 1U)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1ed      	bne.n	800237e <LL_GPIO_Init+0xd6>
  result <<= s;                        /* shift when v's highest bits are zero */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  return result;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <LL_GPIO_Init+0x112>
    return 32U;
 80023b6:	2320      	movs	r3, #32
 80023b8:	e004      	b.n	80023c4 <LL_GPIO_Init+0x11c>
  return __builtin_clz(value);
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7fd ff30 	bl	8000220 <__clzsi2>
 80023c0:	0003      	movs	r3, r0
 80023c2:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d807      	bhi.n	80023d8 <LL_GPIO_Init+0x130>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff fe7f 	bl	80020d4 <LL_GPIO_SetAFPin_0_7>
 80023d6:	e006      	b.n	80023e6 <LL_GPIO_Init+0x13e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff feeb 	bl	80021bc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	3301      	adds	r3, #1
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	40da      	lsrs	r2, r3
 80023f4:	1e13      	subs	r3, r2, #0
 80023f6:	d18c      	bne.n	8002312 <LL_GPIO_Init+0x6a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d003      	beq.n	8002408 <LL_GPIO_Init+0x160>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d107      	bne.n	8002418 <LL_GPIO_Init+0x170>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f7ff fd61 	bl	8001eda <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b00c      	add	sp, #48	; 0x30
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <LL_RCC_HSIKER_GetDivider>:
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIKERDIV));
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <LL_RCC_HSIKER_GetDivider+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	22e0      	movs	r2, #224	; 0xe0
 800242e:	4013      	ands	r3, r2
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000

0800243c <LL_RCC_HSI_IsReady>:
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <LL_RCC_HSI_IsReady+0x24>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	401a      	ands	r2, r3
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	429a      	cmp	r2, r3
 8002450:	d101      	bne.n	8002456 <LL_RCC_HSI_IsReady+0x1a>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_RCC_HSI_IsReady+0x1c>
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	40021000 	.word	0x40021000

08002464 <LL_RCC_LSE_IsReady>:
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == (RCC_CSR1_LSERDY)) ? 1UL : 0UL);
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <LL_RCC_LSE_IsReady+0x1c>)
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2202      	movs	r2, #2
 800246e:	4013      	ands	r3, r2
 8002470:	2b02      	cmp	r3, #2
 8002472:	d101      	bne.n	8002478 <LL_RCC_LSE_IsReady+0x14>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_RCC_LSE_IsReady+0x16>
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000

08002484 <LL_RCC_GetSysClkSource>:
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <LL_RCC_GetSysClkSource+0x14>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2238      	movs	r2, #56	; 0x38
 800248e:	4013      	ands	r3, r2
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	40021000 	.word	0x40021000

0800249c <LL_RCC_GetAHBPrescaler>:
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <LL_RCC_GetAHBPrescaler+0x14>)
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	23f0      	movs	r3, #240	; 0xf0
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	4013      	ands	r3, r2
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <LL_RCC_GetAPB1Prescaler>:
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	23e0      	movs	r3, #224	; 0xe0
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4013      	ands	r3, r2
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_HSIKER
  *         @arg @ref LL_RCC_USART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <LL_RCC_GetUSARTClockSource+0x20>)
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	401a      	ands	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	4313      	orrs	r3, r2
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	40021000 	.word	0x40021000

080024f0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024f8:	f000 f870 	bl	80025dc <RCC_GetSystemClockFreq>
 80024fc:	0002      	movs	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f88c 	bl	8002624 <RCC_GetHCLKClockFreq>
 800250c:	0002      	movs	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0018      	movs	r0, r3
 8002518:	f000 f89c 	bl	8002654 <RCC_GetPCLK1ClockFreq>
 800251c:	0002      	movs	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART1_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d140      	bne.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x94>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ffc3 	bl	80024cc <LL_RCC_GetUSARTClockSource>
 8002546:	0003      	movs	r3, r0
 8002548:	4a20      	ldr	r2, [pc, #128]	; (80025cc <LL_RCC_GetUSARTClockFreq+0xa0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d01f      	beq.n	800258e <LL_RCC_GetUSARTClockFreq+0x62>
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d825      	bhi.n	80025a0 <LL_RCC_GetUSARTClockFreq+0x74>
 8002554:	4a1e      	ldr	r2, [pc, #120]	; (80025d0 <LL_RCC_GetUSARTClockFreq+0xa4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <LL_RCC_GetUSARTClockFreq+0x36>
 800255a:	4a1e      	ldr	r2, [pc, #120]	; (80025d4 <LL_RCC_GetUSARTClockFreq+0xa8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d005      	beq.n	800256c <LL_RCC_GetUSARTClockFreq+0x40>
 8002560:	e01e      	b.n	80025a0 <LL_RCC_GetUSARTClockFreq+0x74>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002562:	f000 f83b 	bl	80025dc <RCC_GetSystemClockFreq>
 8002566:	0003      	movs	r3, r0
 8002568:	60fb      	str	r3, [r7, #12]
        break;
 800256a:	e029      	b.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x94>

      case LL_RCC_USART1_CLKSOURCE_HSIKER:    /* USART1 Clock is HSI Kernel */
        if (LL_RCC_HSI_IsReady() == 1U)
 800256c:	f7ff ff66 	bl	800243c <LL_RCC_HSI_IsReady>
 8002570:	0003      	movs	r3, r0
 8002572:	2b01      	cmp	r3, #1
 8002574:	d121      	bne.n	80025ba <LL_RCC_GetUSARTClockFreq+0x8e>
        {
          usart_frequency = (HSI_VALUE / ((LL_RCC_HSIKER_GetDivider() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002576:	f7ff ff55 	bl	8002424 <LL_RCC_HSIKER_GetDivider>
 800257a:	0003      	movs	r3, r0
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	3301      	adds	r3, #1
 8002580:	0019      	movs	r1, r3
 8002582:	4815      	ldr	r0, [pc, #84]	; (80025d8 <LL_RCC_GetUSARTClockFreq+0xac>)
 8002584:	f7fd fdc0 	bl	8000108 <__udivsi3>
 8002588:	0003      	movs	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800258c:	e015      	b.n	80025ba <LL_RCC_GetUSARTClockFreq+0x8e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800258e:	f7ff ff69 	bl	8002464 <LL_RCC_LSE_IsReady>
 8002592:	0003      	movs	r3, r0
 8002594:	2b01      	cmp	r3, #1
 8002596:	d112      	bne.n	80025be <LL_RCC_GetUSARTClockFreq+0x92>
        {
          usart_frequency = LSE_VALUE;
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800259e:	e00e      	b.n	80025be <LL_RCC_GetUSARTClockFreq+0x92>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80025a0:	f000 f81c 	bl	80025dc <RCC_GetSystemClockFreq>
 80025a4:	0003      	movs	r3, r0
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f83c 	bl	8002624 <RCC_GetHCLKClockFreq>
 80025ac:	0003      	movs	r3, r0
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f850 	bl	8002654 <RCC_GetPCLK1ClockFreq>
 80025b4:	0003      	movs	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
        break;
 80025b8:	e002      	b.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	e000      	b.n	80025c0 <LL_RCC_GetUSARTClockFreq+0x94>
        break;
 80025be:	46c0      	nop			; (mov r8, r8)
    }
  }
  else
  {
  }
  return usart_frequency;
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	00030003 	.word	0x00030003
 80025d0:	00030001 	.word	0x00030001
 80025d4:	00030002 	.word	0x00030002
 80025d8:	02dc6c00 	.word	0x02dc6c00

080025dc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80025e2:	f7ff ff4f 	bl	8002484 <LL_RCC_GetSysClkSource>
 80025e6:	0003      	movs	r3, r0
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d102      	bne.n	80025f2 <RCC_GetSystemClockFreq+0x16>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <RCC_GetSystemClockFreq+0x40>)
 80025ee:	607b      	str	r3, [r7, #4]
      break;
 80025f0:	e00f      	b.n	8002612 <RCC_GetSystemClockFreq+0x36>
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <RCC_GetSystemClockFreq+0x44>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	2207      	movs	r2, #7
 80025fa:	4013      	ands	r3, r2
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <RCC_GetSystemClockFreq+0x40>)
 8002608:	f7fd fd7e 	bl	8000108 <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	607b      	str	r3, [r7, #4]
      break;
 8002610:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002612:	687b      	ldr	r3, [r7, #4]
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	02dc6c00 	.word	0x02dc6c00
 8002620:	40021000 	.word	0x40021000

08002624 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800262c:	f7ff ff36 	bl	800249c <LL_RCC_GetAHBPrescaler>
 8002630:	0003      	movs	r3, r0
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	220f      	movs	r2, #15
 8002636:	401a      	ands	r2, r3
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <RCC_GetHCLKClockFreq+0x2c>)
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	58d3      	ldr	r3, [r2, r3]
 800263e:	221f      	movs	r2, #31
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	40da      	lsrs	r2, r3
 8002646:	0013      	movs	r3, r2
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}
 8002650:	08002c78 	.word	0x08002c78

08002654 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800265c:	f7ff ff2a 	bl	80024b4 <LL_RCC_GetAPB1Prescaler>
 8002660:	0003      	movs	r3, r0
 8002662:	0b1a      	lsrs	r2, r3, #12
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <RCC_GetPCLK1ClockFreq+0x28>)
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	58d3      	ldr	r3, [r2, r3]
 800266a:	221f      	movs	r2, #31
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	40da      	lsrs	r2, r3
 8002672:	0013      	movs	r3, r2
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	08002cb8 	.word	0x08002cb8

08002680 <LL_SPI_IsEnabled>:
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2240      	movs	r2, #64	; 0x40
 800268e:	4013      	ands	r3, r2
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d101      	bne.n	8002698 <LL_SPI_IsEnabled+0x18>
 8002694:	2301      	movs	r3, #1
 8002696:	e000      	b.n	800269a <LL_SPI_IsEnabled+0x1a>
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <LL_SPI_SetRxFIFOThreshold>:
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <LL_SPI_SetRxFIFOThreshold+0x24>)
 80026b4:	401a      	ands	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	605a      	str	r2, [r3, #4]
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	ffffefff 	.word	0xffffefff

080026cc <LL_SPI_SetCRCPolynomial>:
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	001a      	movs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b002      	add	sp, #8
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026f2:	230f      	movs	r3, #15
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ffbf 	bl	8002680 <LL_SPI_IsEnabled>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d148      	bne.n	8002798 <LL_SPI_Init+0xb0>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <LL_SPI_Init+0xcc>)
 800270c:	401a      	ands	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4319      	orrs	r1, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4319      	orrs	r1, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4319      	orrs	r1, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	4319      	orrs	r1, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	4319      	orrs	r1, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	4319      	orrs	r1, r3
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	430b      	orrs	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <LL_SPI_Init+0xd0>)
 8002748:	401a      	ands	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	430b      	orrs	r3, r1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	429a      	cmp	r2, r3
 8002766:	d206      	bcs.n	8002776 <LL_SPI_Init+0x8e>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff ff97 	bl	80026a4 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6a1a      	ldr	r2, [r3, #32]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	019b      	lsls	r3, r3, #6
 800277e:	429a      	cmp	r2, r3
 8002780:	d106      	bne.n	8002790 <LL_SPI_Init+0xa8>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0011      	movs	r1, r2
 800278a:	0018      	movs	r0, r3
 800278c:	f7ff ff9e 	bl	80026cc <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002790:	230f      	movs	r3, #15
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <LL_SPI_Init+0xd4>)
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	781b      	ldrb	r3, [r3, #0]
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	ffff0040 	.word	0xffff0040
 80027b8:	fffff0fb 	.word	0xfffff0fb
 80027bc:	fffff7ff 	.word	0xfffff7ff

080027c0 <LL_TIM_SetPrescaler>:
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <LL_TIM_SetAutoReload>:
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027e8:	46c0      	nop			; (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b002      	add	sp, #8
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <LL_TIM_SetRepetitionCounter>:
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2201      	movs	r2, #1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	615a      	str	r2, [r3, #20]
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b002      	add	sp, #8
 8002822:	bd80      	pop	{r7, pc}

08002824 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a2c      	ldr	r2, [pc, #176]	; (80028e8 <LL_TIM_Init+0xc4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d003      	beq.n	8002844 <LL_TIM_Init+0x20>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <LL_TIM_Init+0xc8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d107      	bne.n	8002854 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2270      	movs	r2, #112	; 0x70
 8002848:	4393      	bics	r3, r2
 800284a:	001a      	movs	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <LL_TIM_Init+0xc4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00f      	beq.n	800287c <LL_TIM_Init+0x58>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a23      	ldr	r2, [pc, #140]	; (80028ec <LL_TIM_Init+0xc8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00b      	beq.n	800287c <LL_TIM_Init+0x58>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a22      	ldr	r2, [pc, #136]	; (80028f0 <LL_TIM_Init+0xcc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <LL_TIM_Init+0x58>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a21      	ldr	r2, [pc, #132]	; (80028f4 <LL_TIM_Init+0xd0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <LL_TIM_Init+0x58>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <LL_TIM_Init+0xd4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d106      	bne.n	800288a <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a1f      	ldr	r2, [pc, #124]	; (80028fc <LL_TIM_Init+0xd8>)
 8002880:	401a      	ands	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff ff9d 	bl	80027d8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ff89 	bl	80027c0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <LL_TIM_Init+0xc4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <LL_TIM_Init+0xa2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <LL_TIM_Init+0xd0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <LL_TIM_Init+0xa2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <LL_TIM_Init+0xd4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d106      	bne.n	80028d4 <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	0011      	movs	r1, r2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7ff ff8e 	bl	80027f0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff ff96 	bl	8002808 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b004      	add	sp, #16
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40002000 	.word	0x40002000
 80028f4:	40014400 	.word	0x40014400
 80028f8:	40014800 	.word	0x40014800
 80028fc:	fffffcff 	.word	0xfffffcff

08002900 <LL_USART_IsEnabled>:
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <LL_USART_IsEnabled+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_USART_IsEnabled+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	0018      	movs	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}

08002922 <LL_USART_SetPrescaler>:
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	220f      	movs	r2, #15
 8002932:	4393      	bics	r3, r2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b292      	uxth	r2, r2
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <LL_USART_SetStopBitsLength>:
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <LL_USART_SetStopBitsLength+0x24>)
 8002958:	401a      	ands	r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	605a      	str	r2, [r3, #4]
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	ffffcfff 	.word	0xffffcfff

08002970 <LL_USART_SetHWFlowCtrl>:
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <LL_USART_SetHWFlowCtrl+0x24>)
 8002980:	401a      	ands	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	fffffcff 	.word	0xfffffcff

08002998 <LL_USART_SetBaudRate>:
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0b      	cmp	r3, #11
 80029aa:	d846      	bhi.n	8002a3a <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d043      	beq.n	8002a3a <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d126      	bne.n	8002a0a <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	001a      	movs	r2, r3
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <LL_USART_SetBaudRate+0xac>)
 80029c4:	0092      	lsls	r2, r2, #2
 80029c6:	58d3      	ldr	r3, [r2, r3]
 80029c8:	0019      	movs	r1, r3
 80029ca:	68b8      	ldr	r0, [r7, #8]
 80029cc:	f7fd fb9c 	bl	8000108 <__udivsi3>
 80029d0:	0003      	movs	r3, r0
 80029d2:	005a      	lsls	r2, r3, #1
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	6a39      	ldr	r1, [r7, #32]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7fd fb93 	bl	8000108 <__udivsi3>
 80029e2:	0003      	movs	r3, r0
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <LL_USART_SetBaudRate+0xb0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	001a      	movs	r2, r3
 80029f8:	2307      	movs	r3, #7
 80029fa:	4013      	ands	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	60da      	str	r2, [r3, #12]
}
 8002a08:	e017      	b.n	8002a3a <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	001a      	movs	r2, r3
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <LL_USART_SetBaudRate+0xac>)
 8002a12:	0092      	lsls	r2, r2, #2
 8002a14:	58d3      	ldr	r3, [r2, r3]
 8002a16:	0019      	movs	r1, r3
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7fd fb75 	bl	8000108 <__udivsi3>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	001a      	movs	r2, r3
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	18d3      	adds	r3, r2, r3
 8002a28:	6a39      	ldr	r1, [r7, #32]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7fd fb6c 	bl	8000108 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	001a      	movs	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	60da      	str	r2, [r3, #12]
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b006      	add	sp, #24
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	08002cd8 	.word	0x08002cd8
 8002a48:	0000fff0 	.word	0x0000fff0

08002a4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a56:	231f      	movs	r3, #31
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f7ff ff4b 	bl	8002900 <LL_USART_IsEnabled>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d153      	bne.n	8002b16 <LL_USART_Init+0xca>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2c      	ldr	r2, [pc, #176]	; (8002b24 <LL_USART_Init+0xd8>)
 8002a74:	401a      	ands	r2, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	4319      	orrs	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4319      	orrs	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0011      	movs	r1, r2
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff ff54 	bl	8002948 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff ff61 	bl	8002970 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <LL_USART_Init+0xdc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d105      	bne.n	8002ac2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002ab6:	2003      	movs	r0, #3
 8002ab8:	f7ff fd38 	bl	800252c <LL_RCC_GetUSARTClockFreq>
 8002abc:	0003      	movs	r3, r0
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e00b      	b.n	8002ada <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <LL_USART_Init+0xe0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d107      	bne.n	8002ada <LL_USART_Init+0x8e>
    {
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002aca:	240c      	movs	r4, #12
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fd0e 	bl	80024f0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ad4:	193b      	adds	r3, r7, r4
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00f      	beq.n	8002b08 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002ae8:	231f      	movs	r3, #31
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	69dc      	ldr	r4, [r3, #28]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0023      	movs	r3, r4
 8002b04:	f7ff ff48 	bl	8002998 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0011      	movs	r1, r2
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7ff ff06 	bl	8002922 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002b16:	231f      	movs	r3, #31
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b009      	add	sp, #36	; 0x24
 8002b22:	bd90      	pop	{r4, r7, pc}
 8002b24:	efff69f3 	.word	0xefff69f3
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40004400 	.word	0x40004400

08002b30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7fd fae3 	bl	8000108 <__udivsi3>
 8002b42:	0003      	movs	r3, r0
 8002b44:	001a      	movs	r2, r3
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <LL_InitTick+0x30>)
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <LL_InitTick+0x30>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <LL_InitTick+0x30>)
 8002b54:	2205      	movs	r2, #5
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b6c:	23fa      	movs	r3, #250	; 0xfa
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff ffdb 	bl	8002b30 <LL_InitTick>
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b002      	add	sp, #8
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <LL_mDelay+0x44>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b92:	68bb      	ldr	r3, [r7, #8]
  tmpDelay  = Delay;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	d00c      	beq.n	8002bb8 <LL_mDelay+0x34>
  {
    tmpDelay ++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay  != 0U)
 8002ba4:	e008      	b.n	8002bb8 <LL_mDelay+0x34>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <LL_mDelay+0x44>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d002      	beq.n	8002bb8 <LL_mDelay+0x34>
    {
      tmpDelay --;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
  while (tmpDelay  != 0U)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f3      	bne.n	8002ba6 <LL_mDelay+0x22>
    }
  }
}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <LL_SetSystemCoreClock+0x18>)
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	20000000 	.word	0x20000000

08002be8 <__libc_init_array>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	2600      	movs	r6, #0
 8002bec:	4d0c      	ldr	r5, [pc, #48]	; (8002c20 <__libc_init_array+0x38>)
 8002bee:	4c0d      	ldr	r4, [pc, #52]	; (8002c24 <__libc_init_array+0x3c>)
 8002bf0:	1b64      	subs	r4, r4, r5
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	42a6      	cmp	r6, r4
 8002bf6:	d109      	bne.n	8002c0c <__libc_init_array+0x24>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	f000 f821 	bl	8002c40 <_init>
 8002bfe:	4d0a      	ldr	r5, [pc, #40]	; (8002c28 <__libc_init_array+0x40>)
 8002c00:	4c0a      	ldr	r4, [pc, #40]	; (8002c2c <__libc_init_array+0x44>)
 8002c02:	1b64      	subs	r4, r4, r5
 8002c04:	10a4      	asrs	r4, r4, #2
 8002c06:	42a6      	cmp	r6, r4
 8002c08:	d105      	bne.n	8002c16 <__libc_init_array+0x2e>
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	00b3      	lsls	r3, r6, #2
 8002c0e:	58eb      	ldr	r3, [r5, r3]
 8002c10:	4798      	blx	r3
 8002c12:	3601      	adds	r6, #1
 8002c14:	e7ee      	b.n	8002bf4 <__libc_init_array+0xc>
 8002c16:	00b3      	lsls	r3, r6, #2
 8002c18:	58eb      	ldr	r3, [r5, r3]
 8002c1a:	4798      	blx	r3
 8002c1c:	3601      	adds	r6, #1
 8002c1e:	e7f2      	b.n	8002c06 <__libc_init_array+0x1e>
 8002c20:	08002d08 	.word	0x08002d08
 8002c24:	08002d08 	.word	0x08002d08
 8002c28:	08002d08 	.word	0x08002d08
 8002c2c:	08002d0c 	.word	0x08002d0c

08002c30 <memset>:
 8002c30:	0003      	movs	r3, r0
 8002c32:	1882      	adds	r2, r0, r2
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <memset+0xa>
 8002c38:	4770      	bx	lr
 8002c3a:	7019      	strb	r1, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e7f9      	b.n	8002c34 <memset+0x4>

08002c40 <_init>:
 8002c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c46:	bc08      	pop	{r3}
 8002c48:	469e      	mov	lr, r3
 8002c4a:	4770      	bx	lr

08002c4c <_fini>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr
